{
  "x-generator": "NSwag v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Nsk - Newskies",
    "description": "All NewSkies related endpoints.",
    "version": "4.4.2.648"
  },
  "servers": [
    {
      "url": "https://localhost:8080/dotrez"
    }
  ],
  "paths": {
    "/api/nsk/v1/account/password/change": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Changes the accounts password.",
        "description": "This endpoint is recommended for a user who has an expired password.  This endpoint is restricted to the anonymous\nuser only\nand remains as the anonymous user even if the change password operation completed.  For changing the password of a\nlogged-in\nuser, please use /api/nsk/v2/user/password/change.\n            ",
        "operationId": "nsk_v1_account_password_change_post",
        "requestBody": {
          "x-name": "request",
          "description": "The change password request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountChangePasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/account/password/reset": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Invokes the forgot password reset for a specific account.",
        "operationId": "nsk_v1_account_password_reset_post",
        "requestBody": {
          "x-name": "request",
          "description": "The forgot password request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountForgotPasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "202": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/apisMessage": {
      "post": {
        "tags": [
          "apisMessage"
        ],
        "summary": "Takes the ApisMessage Request and sends it to core to queue a new message.\nReturns 201 in the response if message successfully queued and a message with Verified and Infant Counts,\nand 400 if errors occur (And failure text (if any) will be returned).",
        "operationId": "nsk_v1_apisMessage_post",
        "requestBody": {
          "x-name": "request",
          "description": "The generate APIS Message Request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApisQueueRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "201": {
            "description": "The APIS Message Created Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/apo": {
      "get": {
        "tags": [
          "apo"
        ],
        "summary": "Gets the current saved ancillary pricing options data.",
        "operationId": "nsk_v1_apo_get",
        "responses": {
          "200": {
            "description": "The ancillary pricing options context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAncillaryPricingOptionsContext"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "apo"
        ],
        "summary": "Adds new entries to the saved ancillary pricing options data.",
        "operationId": "nsk_v1_apo_post",
        "requestBody": {
          "x-name": "inputParameters",
          "description": "The input parameters to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "apo"
        ],
        "summary": "Deletes all of the saved ancillary pricing options data.",
        "operationId": "nsk_v1_apo_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/apo/{inputParameterKey}": {
      "put": {
        "tags": [
          "apo"
        ],
        "summary": "Updates an individual saved ancillary pricing option's data.",
        "description": "This will replace the current saved ancillary pricing option's value with the\ngiven input parameter value, based on the input parameter key.\n            ",
        "operationId": "nsk_v1_apo_inputParameterKey_put",
        "parameters": [
          {
            "name": "inputParameterKey",
            "in": "path",
            "required": true,
            "description": "The input parameter key to update.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "inputParameterValue",
            "in": "query",
            "description": "The input parameter value to update.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "apo"
        ],
        "summary": "Deletes a single saved ancillary pricing option's data.",
        "operationId": "nsk_v1_apo_inputParameterKey_delete",
        "parameters": [
          {
            "name": "inputParameterKey",
            "in": "path",
            "required": true,
            "description": "The input parameter key to delete.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/availability/lowfare": {
      "post": {
        "tags": [
          "availability"
        ],
        "summary": "Searches for low fare availability with the full low fare search request. This request allows for total control\nover the configuration. If a property is not set, the default settings (LowFareAvailabilitySettings) are used in\nits place. Note low fare will not always match availability requests for certain configurations including sorting\nby taxes and fees.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\nWhen LowFareAvailabilityRequest.GetAllDetails is set to true, New Skies sets the passenger count in the request\nto zero. This means that passenger count restrictions on a fare are not considered and that any available fare\nis returned.\n            ",
        "operationId": "nsk_v2_availability_lowfare_post",
        "requestBody": {
          "x-name": "request",
          "description": "The low fare availability request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowFareAvailabilityRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Availability returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLowFareAvailability"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/availability/lowfare/estimate": {
      "get": {
        "tags": [
          "availability"
        ],
        "summary": "Retrieves the low fare availability estimate using a range of dates.",
        "description": "This endpoint, unless otherwise specified, will request the pricing and availability for a single adult passenger.\nHowever, the number of passengers can be set on the\nrequest.  It is important to note that the pricing on this endpoint is estimated.  It will not match availability\ndue to round trip vs one way discounts, taxes and fees\nvariations, multi passenger discounts, recently sold out fares, etc.  It's intended to be an estimate only.  Due to\nthese restrictions this endpoint is extremely\nperformant and can be configured to be cached, with a high cache hit rate.\n            ",
        "operationId": "nsk_v1_availability_lowfare_estimate_get",
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "The start date to retrieve from the low fare cache.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date for the low fare cache request.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "IncludeTaxesAndFees",
            "in": "query",
            "description": "A flag to indicate if taxes and fees should be included.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "NumberOfPassengers",
            "in": "query",
            "description": "The number of passengers\n            ",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLowFareEstimateResults"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/availability/lowfare/simple": {
      "post": {
        "tags": [
          "availability"
        ],
        "summary": "Searches for low fare availability with the simple search request. The simple search request covers the common\nsearch\ncriteria and lets default settings (LowFareAvailabilitySettings) configure the rest. Note low fare will not always\nmatch availability requests for certain configurations included sorting by taxes and fees.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v2_availability_lowfare_simple_post",
        "requestBody": {
          "x-name": "request",
          "description": "The low fare availability search simple request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowFareAvailabilitySearchSimpleRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Availability returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLowFareAvailability"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/availability/search": {
      "post": {
        "tags": [
          "availability"
        ],
        "summary": "Searches for availability with the full availability search request. This request allows for total control over\nthe configuration. If a property is not set, default values will be set instead. These defaults are what we\nconsider a general optimized request. If these optimizations are not preferred the requester will need to\nopted out the filters on the availability request.",
        "description": "Note: It is advised to optimize the availability request with passing in at least one or more (ProductClass,\nTravelClass, FareTypes or ClassesOfService) so the response can be optimized as possible. This is even more\nrecommended for mobile applications due to the nature of limited network capabilities.\nThe default values that will be set unless specified:\n\n    - AvailabilityRequestv2.TaxesAndFees = TaxesAndFeesRollupMode.None\n    - AvailabilityRequestv2.Criteria.SsrCollectionsMode = AvailabilitySsrCollectionsMode.None\n    - AvailabilityRequestv2.Criteria.Filters.FareInclusionType = AvailabilityType.Default\n    - AvailabilityRequestv2.Criteria.Filters.CompressionType = FareClassControl.LowestFareClass\n    - AvailabilityRequestv2.Criteria.Filters.Loyalty = LoyaltyFilter.MonetaryOnly\n    - AvailabilityRequestv2.Criteria.Filters.FlightType = FlightType.All\n    - AvailabilityRequestv2.Criteria.Filters.ExclusionType = AvailabilityFilter.ExcludeUnavailable\n    - AvailabilityRequestv2.Criteria.Filters.SortOptions =\n    JourneySortKey.LowestFare,JourneySortKey.EarliestDeparture,JourneySortKey.ShortestTravelTime\n    - AvailabilityRequestv2.Filters.ConnectionType = SoldAsConnectionType.None\n    - AvailabilityRequestv2.Criteria.Filters.MaxConnectingFlights = 0\n    - AvailabilityRequestv2.Criteria.Stations.SearchDestinationMacs = false\n    - AvailabilityRequestv2.Criteria.Stations.SearchOriginMacs = false\n    - AvailabilityRequestv2.Criteria.Filters.BundleControlFilter = BundleControlFilter.Disabled\n    - AvailabilityRequestv2.NumberOfFaresPerJourney = 1\n\nAvailabilityRequestv2.Criteria.Filters.IncludeServiceBundleSetCodes is marked as obsolete, and the use of\nBundleControlFilter is preferred. To specifically return bundle set codes which IncludeServiceBundleSetCodes has\noriginally provided when set to true, use an enumeration value of BundleControlFilter.ReturnBundleSets for\nBundleControlFilter instead.\nWhen searching for open jaw availability the results will contain only available markets if any are configured.\n            ",
        "operationId": "nsk_v4_availability_search_post",
        "requestBody": {
          "x-name": "request",
          "description": "The availability v2 search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Availability returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/availability/search/simple": {
      "post": {
        "tags": [
          "availability"
        ],
        "summary": "Searches for availability with the simple availability search request. This request allows for easy setup for one\nway and round trip searches. If a property is not set, default values will be set instead just like they would in\nthe full availability request. These defaults are what we consider a general optimized request. If these\noptimizations are not preferred the requester will need to opted out the filters on the availability simple\nrequest.",
        "description": "Note: It is advised to optimize the availability request with passing in at least one or more (ProductClass,\nTravelClass, FareTypes or ClassesOfService) so the response can be optimized as possible. This is even more\nrecommended for mobile applications due to the nature of limited network capabilities.\nThe default values that will be set unless specified:\n\n    - AvailabilitySimpleRequestv2.TaxesAndFees = TaxesAndFeesRollupMode.None\n    - AvailabilitySimpleRequestv2.SsrCollectionsMode = AvailabilitySsrCollectionsMode.None\n    - AvailabilitySimpleRequestv2.Filters.FareInclusionType = AvailabilityType.Default\n    - AvailabilitySimpleRequestv2.Filters.CompressionType = FareClassControl.LowestFareClass\n    - AvailabilitySimpleRequestv2.Filters.Loyalty = LoyaltyFilter.MonetaryOnly\n    - AvailabilitySimpleRequestv2.Filters.FlightType = FlightType.All\n    - AvailabilitySimpleRequestv2.Filters.ExclusionType = AvailabilityFilter.ExcludeUnavailable\n    - AvailabilitySimpleRequestv2.Filters.SortOptions =\n    JourneySortKey.LowestFare,JourneySortKey.EarliestDeparture,JourneySortKey.ShortestTravelTime\n    - AvailabilitySimpleRequestv2.Filters.ConnectionType = SoldAsConnectionType.None\n    - AvailabilitySimpleRequestv2.Filters.MaxConnectingFlights = 0\n    - AvailabilitySimpleRequestv2.SearchDestinationMacs = false\n    - AvailabilitySimpleRequestv2.SearchOriginMacs = false\n    - AvailabilityRequestv2.Criteria.Filters.BundleControlFilter = BundleControlFilter.Disabled\n    - AvailabilitySimpleRequestv2.NumberOfFaresPerJourney = 1\n\nAvailabilityRequestv2.Criteria.Filters.IncludeServiceBundleSetCodes is marked as obsolete, and the use of\nBundleControlFilter is preferred. To specifically return bundle set codes which IncludeServiceBundleSetCodes has\noriginally provided when set to true, use an enumeration value of BundleControlFilter.ReturnBundleSets for\nBundleControlFilter instead.\n            ",
        "operationId": "nsk_v4_availability_search_simple_post",
        "requestBody": {
          "x-name": "request",
          "description": "The availability simple v2 search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilitySimpleRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Availability returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/availability/search/ssr": {
      "post": {
        "tags": [
          "availability"
        ],
        "summary": "Searches for availability with SSR prices with the full availability search request. This request allows for total\ncontrol over the configuration. If a property is not set, default values will be set instead. These defaults are\nwhat we consider a general optimized request. If these optimizations are not preferred the requester will need to\nopt out of the filters on the availability request.",
        "description": "Note: This is an expensive call and should be used with appropriate cautions.\nIt is advised to optimize the availability request with passing in at least one or more (ProductClass,\nTravelClass, FareTypes or ClassesOfService) so the response can be optimized as possible. This is even more\nrecommended for mobile applications due to the nature of limited network capabilities.\nThe default values that will be set unless specified:\n\n    - AvailabilityWithSsrRequest.TaxesAndFees = TaxesAndFeesRollupMode.None\n    - AvailabilityWithSsrRequest.Criteria.SsrCollectionsMode = AvailabilitySsrCollectionsMode.None\n    - AvailabilityWithSsrRequest.Criteria.Filters.FareInclusionType = AvailabilityType.Default\n    - AvailabilityWithSsrRequest.Criteria.Filters.CompressionType = FareClassControl.LowestFareClass\n    - AvailabilityWithSsrRequest.Criteria.Filters.Loyalty = LoyaltyFilter.MonetaryOnly\n    - AvailabilityWithSsrRequest.Criteria.Filters.FlightType = FlightType.All\n    - AvailabilityWithSsrRequest.Criteria.Filters.ExclusionType = AvailabilityFilter.ExcludeUnavailable\n    - AvailabilityWithSsrRequest.Criteria.Filters.SortOptions =\n    JourneySortKey.LowestFare,JourneySortKey.EarliestDeparture,JourneySortKey.ShortestTravelTime\n    - AvailabilityWithSsrRequest.Filters.ConnectionType = SoldAsConnectionType.None\n    - AvailabilityWithSsrRequest.Criteria.Filters.MaxConnectingFlights = 0\n    - AvailabilityWithSsrRequest.Criteria.Stations.SearchDestinationMacs = false\n    - AvailabilityWithSsrRequest.Criteria.Stations.SearchOriginMacs = false\n    - AvailabilityWithSsrRequest.Criteria.Filters.BundleControlFilter = BundleControlFilter.Disabled\n    - AvailabilityWithSsrRequest.NumberOfFaresPerJourney = 1\n\nAvailabilityWithSsrRequest.Criteria.Filters.IncludeServiceBundleSetCodes is marked as obsolete, and the use of\nBundleControlFilter is preferred. To specifically return bundle set codes which IncludeServiceBundleSetCodes has\noriginally provided when set to true, use an enumeration value of BundleControlFilter.ReturnBundleSets for\nBundleControlFilter instead.\n            ",
        "operationId": "nsk_v1_availability_search_ssr_post",
        "requestBody": {
          "x-name": "request",
          "description": "The availability with SSR search request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityWithSsrRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityWithSsrResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Get the current booking in state.",
        "description": "Note: To add a booking comment please use\napi/nsk/v3/booking.\n            ",
        "operationId": "nsk_v1_booking_get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Commits stateful changes made and processes the booking.",
        "operationId": "nsk_v3_booking_post",
        "requestBody": {
          "x-name": "request",
          "description": "Commit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Committed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Commits stateful changes made and processes the booking.",
        "description": "Only archived bookings can use the `Archive` comment type. If the booking in state is archived, only\nthe comments will be acknowledged by New Skies. All other filled in fields in the request will be ignored.\n            ",
        "operationId": "nsk_v3_booking_put",
        "requestBody": {
          "x-name": "request",
          "description": "Commit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/addons/{addOnKey}/payments": {
      "get": {
        "tags": [
          "booking/addons"
        ],
        "summary": "Gets a specific add-on's allowed payment methods.",
        "description": "If the add on's payment required flag is set to true, this endpoint\nwill return the allowed payment options for the add on.  If set to\nfalse, null will be returned.\n            ",
        "operationId": "nsk_v1_booking_addons_addOnKey_payments_get",
        "parameters": [
          {
            "name": "addOnKey",
            "in": "path",
            "required": true,
            "description": "The unique add on key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The add on's allowed payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAddOnAllowedPayments"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/addons"
        ],
        "summary": "Adds a payment to a specific add-on on the booking.",
        "operationId": "nsk_v1_booking_addons_addOnKey_payments_post",
        "parameters": [
          {
            "name": "addOnKey",
            "in": "path",
            "required": true,
            "description": "The unique add on key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The order payment to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPaymentBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Status created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/addons/payments": {
      "get": {
        "tags": [
          "booking/addons"
        ],
        "summary": "Gets all the available add-ons allowed payment methods for all the add-ons on the booking in state.",
        "operationId": "nsk_v1_booking_addons_payments_get",
        "responses": {
          "200": {
            "description": "The dictionary of add on allowed payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndAddOnAllowedPayments"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/addons/sync": {
      "put": {
        "tags": [
          "booking/addons"
        ],
        "summary": "Syncs the prices of the Travel Commerce addons.",
        "description": "This endpoint should be called prior to displaying the total booking cost and collecting\npayment for Travel Commerce items. It will trigger New Skies to query Travel Commerce for\nthe items in the cart.\n            ",
        "operationId": "nsk_v1_booking_addons_sync_put",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/baggageAllowances": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the baggage allowances for the current booking in state.\nBaggage usage details will only be returned if includeUsageDetails\nis flagged true AND the allowance behavior is NOT Default.",
        "operationId": "nsk_v1_booking_baggageAllowances_get",
        "parameters": [
          {
            "name": "includeUsageDetails",
            "in": "query",
            "description": "If true, the baggage allowance usage details will be populated in the response.\nIncluding these details adds processing overhead, so set this only when absolutely necessary.\nDefaults to `false`, not include usage details.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger baggage allowances.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfBaggageAllowance"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/baggageAllowances/external": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the third-party baggage allowance calculations for the current booking in state.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_booking_baggageAllowances_external_post",
        "requestBody": {
          "x-name": "request",
          "description": "External baggage allowance request.\n            ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalBaggageAllowanceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfExternalBaggageAllowanceResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/boardingpasses/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking/boardingpasses"
        ],
        "summary": "Retrieves the version of the boarding passes based on a specific journey.",
        "operationId": "nsk_v3_booking_boardingpasses_journey_journeyKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey to retrieve boarding passes for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The passenger/segment filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardingPassFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The boarding passes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoardingPassesCollectionv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/boardingpasses/m2d/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking/boardingpasses"
        ],
        "summary": "Retrieves the specific journeys boarding passes using the M2D barcode type. This endpoint will only give a single\nbarcode back even if the journey contains multiple segments. Note that if the journey has only one segment the M2D\nbarcode will look just like the S2D barcode.",
        "operationId": "nsk_v1_booking_boardingpasses_m2d_journey_journeyKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The specific journey to get boarding passes for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The boarding pass passenger filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardingPassPassengerFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The boarding passes for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoardingPassesM2D"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/boardingpasses/s2d/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking/boardingpasses"
        ],
        "summary": "Retrieves the specific journeys boarding passes for each segment using the S2D barcode type. This endpoint will\nprovide a single barcode for each segment.",
        "operationId": "nsk_v1_booking_boardingpasses_s2d_journey_journeyKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The specific journey to get boarding passes for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The boarding pass passenger filter request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardingPassPassengerFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The boarding passes for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoardingPassesS2D"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/boardingpasses/segment/{segmentKey}": {
      "post": {
        "tags": [
          "booking/boardingpasses"
        ],
        "summary": "Retrieves the version of the boarding passes based on a specific segment.",
        "operationId": "nsk_v3_booking_boardingpasses_segment_segmentKey_post",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment to retrieve boarding passes for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The passenger filter request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardingPassPassengerFilterRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The boarding passes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoardingPassesCollectionv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/bundle/availability": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves the bundle and ssr availability for the booking in-state.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_booking_bundle_availability_post",
        "requestBody": {
          "x-name": "request",
          "description": "The bundle availability request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundleAvailabilityRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleAvailability"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/journey/{journeyKey}": {
      "delete": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Removes the checkin status of passengers for a specific journey in state.",
        "operationId": "nsk_v1_booking_checkin_journey_journeyKey_delete",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/checkin/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Checks in a collection of passengers to a specific journey in state.",
        "operationId": "nsk_v3_booking_checkin_journey_journeyKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key of the segments to checkin.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequestv3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/journey/{journeyKey}/requirements": {
      "get": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Gets the checkin pre-validation requirements for a specific journey.",
        "operationId": "nsk_v1_booking_checkin_journey_journeyKey_requirements_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key to be pre validate checkin with.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The checkin validation requirements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCheckinRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/journey/{journeyKey}/status": {
      "get": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Gets the passengers lift status for a specific journey based on the booking in state.",
        "operationId": "nsk_v1_booking_checkin_journey_journeyKey_status_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey to check lift statuses.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger lift statuses for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCheckinPassengerLiftStatus"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/segment/{segmentKey}": {
      "delete": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Removes the checkin status of passengers for a specific journey's segment in state.",
        "operationId": "nsk_v1_booking_checkin_segment_segmentKey_delete",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/checkin/segment/{segmentKey}": {
      "post": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Checks in a collection of passengers to a specific journey's segment in state.",
        "operationId": "nsk_v3_booking_checkin_segment_segmentKey_post",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key of the segment to checkin.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequestv3"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/segment/{segmentKey}/requirements": {
      "get": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Gets the checkin pre-validation requirements for a specific journey's segment.",
        "operationId": "nsk_v1_booking_checkin_segment_segmentKey_requirements_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key to pre validate checkin with.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The checkin validation requirements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCheckinRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/checkin/segment/{segmentKey}/status": {
      "get": {
        "tags": [
          "booking/checkin"
        ],
        "summary": "Gets the passenger lift status for a specific segment based on the booking in state.",
        "operationId": "nsk_v1_booking_checkin_segment_segmentKey_status_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key in reference.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger lift statuses for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfCheckinPassengerLiftStatus"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/comments": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the list of comments on the in-state booking.",
        "operationId": "nsk_v1_booking_comments_get",
        "responses": {
          "200": {
            "description": "The list booking comments, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingComment"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/comments/{commentKey}": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes a comment from the booking.",
        "operationId": "nsk_v2_booking_comments_commentKey_delete",
        "parameters": [
          {
            "name": "commentKey",
            "in": "path",
            "required": true,
            "description": "The booking comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/contacts": {
      "get": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Gets all the contacts on the booking.",
        "operationId": "nsk_v1_booking_contacts_get",
        "responses": {
          "200": {
            "description": "The collection of contacts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfCharAndContact"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Creates a new contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/contacts/{contactTypeCode}": {
      "get": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Gets a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_get",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The contact.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfContact"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Updates a specific contact on the booking based on type code.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_put",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Patches a specific contact on the booking based on type code.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_patch",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched contact request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfContactBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Deletes a specific contact on the booking based on type code.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_delete",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/contacts/{contactTypeCode}/phoneNumbers": {
      "get": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Gets the collection of phone number for a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_phoneNumbers_get",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of contact phone numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPhoneNumber"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Creates a new phone number on a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_phoneNumbers_post",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/contacts/{contactTypeCode}/phoneNumbers/{phoneNumberType}": {
      "get": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Gets the specific phone number from a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_phoneNumbers_phoneNumberType_get",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": "The phone number type. \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The phone number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPhoneNumber"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Updates a specific phone number on a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_phoneNumbers_phoneNumberType_put",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": "The phone number type. \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Deletes a specific phone number on a specific contact on the booking.",
        "operationId": "nsk_v1_booking_contacts_contactTypeCode_phoneNumbers_phoneNumberType_delete",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": "The phone number type. \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/contacts/primary": {
      "get": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Gets the primary contact based on configuration.",
        "operationId": "nsk_v1_booking_contacts_primary_get",
        "responses": {
          "200": {
            "description": "The primary contact.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfContact"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Creates a new primary contact based on configuration.",
        "operationId": "nsk_v1_booking_contacts_primary_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Updates the primary contact.",
        "operationId": "nsk_v1_booking_contacts_primary_put",
        "requestBody": {
          "x-name": "request",
          "description": "The modified contact request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Patches the primary contact.",
        "operationId": "nsk_v1_booking_contacts_primary_patch",
        "requestBody": {
          "x-name": "request",
          "description": "The patched contact request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfContactBase"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/contacts"
        ],
        "summary": "Delete the primary contact.",
        "operationId": "nsk_v1_booking_contacts_primary_delete",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/divide": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Divides the current booking.",
        "description": "A valid user must be logged in to divide a booking.",
        "operationId": "nsk_v2_booking_divide_post",
        "requestBody": {
          "x-name": "request",
          "description": "Contains the divide request information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DivideRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Successfully divided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "200": {
            "description": "Successfully divided and canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/equipment/legs/{legKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves equipment information for a specified leg.",
        "operationId": "nsk_v2_booking_equipment_legs_legKey_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfEquipmentBasev2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/equipment/legs/{legKey}/properties": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves equipment, supported seat property and seat-dependent SSR information for a specified leg.",
        "operationId": "nsk_v2_booking_equipment_legs_legKey_properties_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfEquipmentv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/equipment/segments/{segmentKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves equipment information for all legs on a specified segment.",
        "operationId": "nsk_v2_booking_equipment_segments_segmentKey_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEquipmentBasev2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/equipment/segments/{segmentKey}/properties": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves equipment, supported seat property and seat-dependent SSR information for all legs on a specified\nsegment.",
        "operationId": "nsk_v2_booking_equipment_segments_segmentKey_properties_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEquipmentv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fareOverride/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Replaces an existing fare price with an amount specified.",
        "operationId": "nsk_v1_booking_fareOverride_journey_journeyKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The fare override request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FareOverrideRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/fareRules": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves the collection of all fare rules from the current booking in state.",
        "description": "Note that this defaults to returning the fare rules in html format. The html format may not be entirely culture\nsensitive, so setting the convertToHtml flag to false will allow users some flexibility when converting the\ncontent and the fare rules will be returned as an rtf string.\n            ",
        "operationId": "nsk_v2_booking_fareRules_get",
        "parameters": [
          {
            "name": "convertToHtml",
            "in": "query",
            "description": "Whether to convert to html. Defaults to true.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of fare rules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FareRule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fareRules/category50/journeys/{journeyKey}/segments/{segmentKey}": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Get the category 50 fare rule information for a specific segment on a booking.",
        "description": "This is functionally a GET but POST is used to reduce URL length overhead.\n            ",
        "operationId": "nsk_v1_booking_fareRules_category50_journeys_journeyKey_segments_segmentKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "the culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category50Response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fareRules/fare/{fareKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves a fare rule from the current booking in state based on\nthe specific fare key.",
        "description": "Note that this defaults to returning the fare rules in html format. The html format may not be entirely culture\nsensitive, so setting the convertToHtml flag to false will allow users some flexibility when converting the\ncontent and the fare rules will be returned as an rtf string.\n            ",
        "operationId": "nsk_v1_booking_fareRules_fare_fareKey_get",
        "parameters": [
          {
            "name": "fareKey",
            "in": "path",
            "required": true,
            "description": "The unique fare key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "convertToHtml",
            "in": "query",
            "description": "Whether to convert to html. Defaults to true.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The fare rule for the specific fare rule key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFareRule"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/fareRules/journey/{journeyKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves the collection of all fare rules from the current booking in state\nfor the specific journey key.",
        "description": "Note that this defaults to returning the fare rules in html format. The html format may not be entirely culture\nsensitive, so setting the convertToHtml flag to false will allow users some flexibility when converting the\ncontent and the fare rules will be returned as an rtf string.\n            ",
        "operationId": "nsk_v2_booking_fareRules_journey_journeyKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The unique journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "convertToHtml",
            "in": "query",
            "description": "Whether to convert to html. Defaults to true.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of fare rules for the specific journey.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FareRule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/fareRules/segment/{segmentKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves the collection of all fare rules from the current booking in state for the specific segment key.",
        "description": "Note that this defaults to returning the fare rules in html format. The html format may not be entirely culture\nsensitive, so setting the convertToHtml flag to false will allow users some flexibility when converting the\ncontent and the fare rules will be returned as an rtf string.\n            ",
        "operationId": "nsk_v2_booking_fareRules_segment_segmentKey_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The unique segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "convertToHtml",
            "in": "query",
            "description": "Whether to convert to html. Defaults to true.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of fare rules for the specific segment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FareRule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fee": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the fee price.",
        "description": "Only service and penalty fee types support a price that is configured by the booking in state.\nDepending on the configuration, the passenger key will be needed.\nFor other fee types the price amount is manually provided.\n            ",
        "operationId": "nsk_v1_booking_fee_get",
        "parameters": [
          {
            "name": "PassengerKey",
            "in": "query",
            "description": "The passenger key.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "CollectedCurrencyCode",
            "in": "query",
            "description": "The collected currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "FeeCode",
            "in": "query",
            "description": "The fee code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 6,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "FeePricingMode",
            "in": "query",
            "description": "Determines if fees are to be paid in points or with currency.\n             \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FeePricingMode"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfServiceCharge"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Manually adds a new fee.",
        "description": "Penalty fees, spoilage fees, and service fees can be created manually. Other types are automatically created by\nthe system.\nDepending on the configuration, the passenger key will be needed.\nIf a passenger key was added to the request, the API will attempt to provide a location header url to point to the\nnewly created fee using the passenger key and the passenger fee key from the new fee.  However, depending on the\nfee type, this url may not always be valid.  Spoilage fees for example are applied to the primary passenger, so if\na non-primary passenger key was added on the request, the resulting url constructed by the API may result in a\n404 - Not Found response.\n            ",
        "operationId": "nsk_v1_booking_fee_post",
        "requestBody": {
          "x-name": "request",
          "description": "The fee request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitPassengerFeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fee/{feeKey}": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Overrides a fee amount.",
        "description": "When the fee override amount is zero, New Skies keeps or removes passenger fees with respect to the Store\nConfirming Waived Fees system setting.\nThis endpoint returns a HTTP 200 on either case. Please retrieve the state booking afterwards to verify the absence\nor presence of the overridden fee.\n            ",
        "operationId": "nsk_v1_booking_fee_feeKey_put",
        "parameters": [
          {
            "name": "feeKey",
            "in": "path",
            "required": true,
            "description": "The fee key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The fee request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeeRequestBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes a fee.",
        "description": "If a fee is deleted during the same commit in which it was added, then the fee will not be present on the booking\n-- It is truly deleted\nIf a fee is waived after it has been committed to a booking, then the fee will still be present, along with a \"FEE\nOR\" fee indicating the override is 0.\nThis behavior can be changed by checking the \"Store Confirming Waived Fees\" box in the Booking Settings dialog in\nutilities (SYS Users Only).  If this box\nis checked, then all fees will behave in the second manner shown above -- meaning that an uncommitted fee that is\noverriden to 0 will not be removed from\nthe booking.\nAdditionally, if the fee was added pre-commit and the SkySpeed setting 'Allow Fees to be Deleted' is enabled for\nthat user,\nthen they will be able to delete the fee without needing waive fee permissions. Post-commit we still require waive\nfee permissions\nto override a fee.\n            ",
        "operationId": "nsk_v1_booking_fee_feeKey_delete",
        "parameters": [
          {
            "name": "feeKey",
            "in": "path",
            "required": true,
            "description": "The fee key request.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fees": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Overrides multiple fee amounts.",
        "description": "When the fee override amount is zero, New Skies keeps or removes passenger fees with respect to the Store\nConfirming Waived Fees system setting.\nThis endpoint returns a HTTP 200 on either case. Please retrieve the state booking afterwards to verify the absence\nor presence of the overridden fees.\n            ",
        "operationId": "nsk_v1_booking_fees_put",
        "requestBody": {
          "x-name": "request",
          "description": "The multiple fee override request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleFeeOverrideRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fees/penalty": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Waives the penalty fee of all journeys in the booking.",
        "operationId": "nsk_v1_booking_fees_penalty_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/fees/spoilage": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Waives the spoilage fee of all journeys in the booking.",
        "operationId": "nsk_v1_booking_fees_spoilage_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/groupName": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Changes the group name of the booking in state.",
        "operationId": "nsk_v1_booking_groupName_put",
        "parameters": [
          {
            "name": "groupName",
            "in": "query",
            "description": "The booking group name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes the group name of the booking in state.",
        "operationId": "nsk_v1_booking_groupName_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current booking history in state.",
        "operationId": "nsk_v1_booking_history_get",
        "parameters": [
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the history entry.\n             \nEnumeration values: 0 = Unknown, 1 = ConvertedHistory, 2 = FlightTimeChange, 3 = FlightDesignatorChange, 4 = AssignedSeat, 5 = RemoveSeat, 6 = AddedFlight, 7 = DeletedFlight, 8 = DeletedPassenger, 9 = NameChange, 10 = GroupNameChange, 11 = CancelledTicketing, 12 = ScheduleChange, 13 = AddedPayment, 14 = ServiceFee, 15 = QueuedPnr, 16 = UnqueuedPnr, 17 = DeletedComment, 18 = Divided, 19 = CheckedIn, 20 = CheckedOut, 21 = FareOverride, 22 = AddedBaggage, 23 = ChangedBaggageWeight, 24 = CheckedBaggage, 25 = RemovedBaggage, 26 = BoardedPassenger, 27 = UnboardedPassenger, 28 = ManualAuthorization, 29 = ManualDecline, 30 = UndoCancel, 31 = ItinerarySent, 32 = ContactChange, 33 = SsrAdded, 34 = FlightMoved, 35 = VerifiedDocument, 36 = RemovedVerifiedDocument, 37 = Promotion, 38 = BookingComment, 39 = CancelledSchedule, 40 = CancelServiceFee, 41 = OverrideServiceFee, 42 = AddedRecordLocator, 43 = DeletedRecordLocator, 44 = UpgradeClassOfService, 45 = DowngradeClassOfService, 46 = StandbyPriorityChange, 47 = AssignedTicketNumber, 48 = DeletedTicketNumber, 49 = ConfirmSegmentStatusCodeChange, 50 = CodeshareFlightChanged, 51 = PdsCancel, 52 = PdsPending, 53 = PdsConfirm, 54 = PdsFinalized, 55 = PdsDeclined, 56 = PdsException, 57 = PdsCancelRefused, 58 = PdsCancelUnsuccessful, 59 = Apps, 60 = InhibitedOverride, 61 = PrintedBagTag, 62 = SelfPrintedBagTag, 63 = PrintedBoardingPass, 64 = AddCustomerId, 65 = DeleteCustomerId, 66 = HoldCreated, 67 = HoldRemoved, 68 = HoldChanged, 69 = OverrideCoupon, 70 = PdsSynchronized, 71 = PdsItemremoved, 72 = Reprice, 73 = ChannelOverride, 74 = EmdCreated, 75 = EmdRemoved, 76 = EmdChanged, 77 = ServiceBundle, 78 = PublishedFareOverride, 79 = FareClassRealignment",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/BookingHistoryEvent"
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The booking history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/bagTagPrint": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current bag tag print history for the booking in state.",
        "operationId": "nsk_v1_booking_history_bagTagPrint_get",
        "parameters": [
          {
            "name": "isBagTagSelfPrinted",
            "in": "query",
            "description": "Whether the bag tag is self printed.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBagTagPrintHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/history"
        ],
        "summary": "Creates a bag tag print history for the booking in state.",
        "description": "Also updates bag's status from Added to AddedPrinted if Self-Tagging Baggage is enabled.\nIn order to see the status of a bag, check bags on a passenger segment.\n            ",
        "operationId": "nsk_v1_booking_history_bagTagPrint_post",
        "requestBody": {
          "x-name": "request",
          "description": "The bag tag print history request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BagTagPrintHistoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/flightMove": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current flight move history in state.",
        "operationId": "nsk_v1_booking_history_flightMove_get",
        "parameters": [
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The flight move history response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFlightMoveHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/holdDateChange": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current hold date change history for the booking in state.",
        "operationId": "nsk_v1_booking_history_holdDateChange_get",
        "parameters": [
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the hold date change history entry.\n             \nEnumeration values: 66 = Created, 67 = Removed, 68 = Changed",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/HoldDateChangeEvent"
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The hold date change history response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfHoldDateChangeHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/itinerarySent": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current itinerary sent history for the booking in state.",
        "operationId": "nsk_v1_booking_history_itinerarySent_get",
        "parameters": [
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The itinerary sent history response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfItinerarySentHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/message": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current message history in state.",
        "operationId": "nsk_v1_booking_history_message_get",
        "responses": {
          "200": {
            "description": "The list of message history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingMessageHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/notification": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current notification history in state.",
        "operationId": "nsk_v1_booking_history_notification_get",
        "responses": {
          "200": {
            "description": "The list of notification history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingNotificationHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/seatAssignment": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current seat assignment history in state.",
        "operationId": "nsk_v1_booking_history_seatAssignment_get",
        "parameters": [
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the seat assignment history entry.\n             \nEnumeration values: 4 = AssignedSeat, 5 = RemoveSeat",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/SeatAssignmentEvent"
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The seat assignment history response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSeatAssignmentHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/history/segmentChange": {
      "get": {
        "tags": [
          "booking/history"
        ],
        "summary": "Gets the current segment change history in state.",
        "operationId": "nsk_v1_booking_history_segmentChange_get",
        "parameters": [
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the seat assignment history entry.\n             \nEnumeration values: 6 = AddedFlight, 7 = DeletedFlight",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/SegmentChangeEvent"
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The segment change history response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSegmentChangeHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/hold/available": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Retrieves the recommended hold date if hold is available.",
        "operationId": "nsk_v2_booking_hold_available_get",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNullableDateTime"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/indiaGstRegistrationRequirement": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Returns true if it is expected to prompt the user for India GST registration details.",
        "operationId": "nsk_v1_booking_indiaGstRegistrationRequirement_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoolean"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets the collection of journeys on the booking in state.",
        "operationId": "nsk_v1_booking_journeys_get",
        "responses": {
          "200": {
            "description": "The collection of journeys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfJourney"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Cancels all the journeys on the current booking in state.",
        "description": "This endpoint also cancels all booking components/add-ons.\nTo only cancel journeys, use DELETE /api/nsk/v1/booking/journeys/{journeyKey}.\n            ",
        "operationId": "nsk_v1_booking_journeys_delete",
        "responses": {
          "200": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets a single journey by the key.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfJourney"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Cancels the specific journey from the booking in state.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_delete",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key to be canceled.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The cancel journey request options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelJourneyRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Metadata response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/bundles": {
      "post": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Sells a service bundle for one or more passengers on a journey.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_bundles_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The bundle sell request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundleSellRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/fees/penalty": {
      "delete": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Waives the penalty fee of the specified journey.",
        "description": "Waving the penalty fee is configurable. See the \"Fee and Tax Settings\", \"Single Penalty Fee\" option. If this is\nchecked and configured this endpoint will waive the penalty fees from all journeys in the booking in state.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_fees_penalty_delete",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/address/requirements": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets the passenger or associated infant's destination address requirements for a specific journey for the booking\nin-state.",
        "description": "This endpoint will determine if the passenger or the associated infant requires a destination address for the\ngiven journey.\nThis does not determine if the passenger already has a qualifying address, only if the destination address\nis required.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_address_requirements_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key to check requirements for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key to check requirements for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoolean"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/baggage": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets all baggage for a passenger on a specific journey.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_baggage_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key for the journey to retrieve from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key for the passenger to retrieve from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerBag"
                }
              }
            }
          },
          "404": {
            "description": "Baggage was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Adds baggage to the booking.",
        "description": "This call must be followed by a commit to see the bags added in state.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_baggage_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The unique identifier for the journey to remove from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The specific passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "A request to add bags to the given passenger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerBagRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/baggage/{baggageKey}": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets a single bag from a passenger on a journey.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_baggage_baggageKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key for the journey to retrieve from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key for the passenger to retrieve from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "The bag key for the bag to retrieve.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerBag"
                }
              }
            }
          },
          "404": {
            "description": "Bag was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Checks-in the baggage for a passenger on the booking in state.",
        "description": "This is to be called after a stateful adding of baggage to a booking and a commit must follow\nthe completion of this in order to see the bag checked in.\nAlso, this call properly syncs with baggage allowances and usages once completed.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_baggage_baggageKey_put",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "The baggage key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The baggage check-in request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerBagCheckInRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Removes baggage from the booking.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_baggage_baggageKey_delete",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The unique identifier for the journey to remove from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The specific passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the bag to remove.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/fees/amount": {
      "delete": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Waives fees for a specific journey and passenger, based upon the given fee type.\nThis is an agent-only endpoint.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_fees_amount_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "waiveFeeType",
          "description": "The waive fee type. \nEnumeration values: 0 = None, 1 = PenaltyFee, 2 = SpoilageFee, 3 = NameChangeFee",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaiveFeeType"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/passengers/{passengerKey}/infant": {
      "post": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Creates an infant on a passenger in the specified journey.",
        "description": "If the booking in state contains a passive segment, an infant will not be\ncreated on the passive segment for the passenger.\nIf one of the segments in the journey already has an infant, the infant details from\nthe request will be ignored and the infant details from the existing infant will be retained.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_passengers_passengerKey_infant_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The unique journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new infant.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerInfantCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/segments/{segmentKey}/status": {
      "patch": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Modifies the status of the specified segment in the journey.",
        "operationId": "nsk_v1_booking_journeys_journeyKey_segments_segmentKey_status_patch",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey that contains the specified segment.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment to be modified.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "newStatus",
            "in": "query",
            "description": "The new segment status to be set. \nEnumeration values: 0 = UnknownStatus, 1 = NoActionTaken, 2 = UnableToConfirmSegment, 3 = HeldConfirmed, 4 = HeldCancelled, 5 = ConfirmedTimeChange",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ModifySegmentStatus"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/{journeyKey}/travelDocument/requirements": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets the travel document requirements for a specific journey for the booking in-state.",
        "description": "This endpoint will return a response containing a collection of travel document type codes that could fulfill\na travel document requirement.  If the \"AtLeastOneDocumentRequired\" value is true, then one or more documents\nin the list are required.  However, it does not mean that every document in the list is required.  If\n\"AtLeastOneDocumentRequired\" is false, then the list of document type codes represents a list of acceptable\ntravel documents, but nothing is required.\nThis endpoint does not determine if any passengers already have required travel documents.\n            ",
        "operationId": "nsk_v1_booking_journeys_journeyKey_travelDocument_requirements_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key to get required travel documents for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelDocumentRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/passengers/{passengerKey}/address/requirements": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets the passenger or associated infant's destination address requirements for all journeys for the booking\nin-state.",
        "description": "This endpoint will determine if the passenger or the associated infant requires a destination address.  If a\ndestination address is required for the passenger or associated infant for any journey, then this will return\ntrue.\nThis does not determine if the passenger already has a qualifying address, only if the destination address\nis required.\n            ",
        "operationId": "nsk_v1_booking_journeys_passengers_passengerKey_address_requirements_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key to check requirements for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBoolean"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/journeys/travelDocument/requirements": {
      "get": {
        "tags": [
          "booking/journeys"
        ],
        "summary": "Gets the travel document requirements for all journeys for the booking in-state.",
        "description": "This endpoint will return a response containing a collection of travel document type codes that could fulfill\na travel document requirement.  If the \"AtLeastOneDocumentRequired\" value is true, then one or more documents\nin the list are required.  However, it does not mean that every document in the list is required.  If\n\"AtLeastOneDocumentRequired\" is false, then the list of document type codes represents a list of acceptable\ntravel documents, but nothing is required.\nThis endpoint does not determine if any passengers already have required travel documents.\n            ",
        "operationId": "nsk_v1_booking_journeys_travelDocument_requirements_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelDocumentRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets the collection of passengers on the booking.",
        "operationId": "nsk_v1_booking_passengers_get",
        "responses": {
          "200": {
            "description": "The collection of passengers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndPassenger"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets passenger travel notifications for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTravelNotification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Creates a passenger travel notification for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_post",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The passenger travel notification create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications/{travelNotificationKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a passenger travel notification for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelNotification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a passenger travel notification for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_put",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a passenger travel notification for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_patch",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The delta mapper travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a passenger travel notification for a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_delete",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications/{travelNotificationKey}/events": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets notification events for a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_events_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Adds a notification event to a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_events_post",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification event create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications/{travelNotificationKey}/events/{eventType}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Get a notification event for a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_events_eventType_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a notification event from a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_events_eventType_delete",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The notification event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications/{travelNotificationKey}/timedEvents": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets notification timed events for a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_timedEvents_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Adds a notification timed event to a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_timedEvents_post",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification timed even create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerAlternateKey}/travelNotifications/{travelNotificationKey}/timedEvents/{timedEventType}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Get a notification timed event for a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_get",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a notification timed event for a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_put",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The updated notification timed event request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a notification timed event from a specific passenger travel notification on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerAlternateKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_delete",
        "parameters": [
          {
            "name": "passengerAlternateKey",
            "in": "path",
            "required": true,
            "description": "The passenger alternate key. This key will be null until the booking is committed.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger on the booking.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The passenger.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassenger"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/passengers/{passengerKey}": {
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a specific passenger on the booking.",
        "operationId": "nsk_v3_booking_passengers_passengerKey_put",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "waiveNameChangeFees",
            "in": "query",
            "description": "Waive the name change fees.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified passenger request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a specific passenger on the booking.",
        "operationId": "nsk_v3_booking_passengers_passengerKey_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "waiveNameChangeFees",
            "in": "query",
            "description": "Waive the name change fee.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched passenger request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPassengerBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/addresses": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets the collection of addresses from a specific passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_addresses_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerAddress"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/addresses": {
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Creates a new address for a specific passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_addresses_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new address request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerAddressCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/addresses/{addressKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific address from a specific passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_addresses_addressKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "addressKey",
            "in": "path",
            "required": true,
            "description": "The unique address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerAddress"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/passengers/{passengerKey}/addresses/{addressKey}": {
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a specific address on a specific passenger.",
        "operationId": "nsk_v3_booking_passengers_passengerKey_addresses_addressKey_put",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "addressKey",
            "in": "path",
            "required": true,
            "description": "The unique address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerAddressEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a specific address on a specific passenger.",
        "operationId": "nsk_v3_booking_passengers_passengerKey_addresses_addressKey_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "addressKey",
            "in": "path",
            "required": true,
            "description": "The unique address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPassengerAddressEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/addresses/{addressKey}": {
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a specific address on a specific passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_addresses_addressKey_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "addressKey",
            "in": "path",
            "required": true,
            "description": "The unique address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/baggage": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets all the baggage for a specified passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_baggage_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique identifier for the passenger to get baggage for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerBag"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/baggage/{baggageKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Retrieve a single bag from a specific passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_baggage_baggageKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key for the passenger to retrieve from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "The bag key for the bag to retrieve.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerBag"
                }
              }
            }
          },
          "404": {
            "description": "Bag was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/baggage/{baggageKey}/events": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Retrieves events for a specific passenger baggage.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_baggage_baggageKey_events_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "Passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "Baggage key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date. If no start date is provided, the start date defaults to the current UTC-based date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date. If no end date is provided, the end date defaults to the current UTC-based date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBaggageEventResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Creates event information for a specific passenger baggage. A successful call immediately creates the event\nand does not require the booking to be committed.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_baggage_baggageKey_events_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "Passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "Baggage key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Baggage event create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaggageEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/baggage/{baggageKey}/events/{baggageEventKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Retrieves information for a specific passenger baggage event.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_baggage_baggageKey_events_baggageEventKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "Passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "baggageKey",
            "in": "path",
            "required": true,
            "description": "Baggage key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "baggageEventKey",
            "in": "path",
            "required": true,
            "description": "Baggage event key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date. If no start date is provided, the start date defaults to the current UTC-based date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date. If no end date is provided, the end date defaults to the current UTC-based date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBaggageEvent"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/breakdown": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger price breakdown by passenger key.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_breakdown_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The specific passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The passenger price breakdown.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerPriceBreakdown"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/documents": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger's collection of travel documents.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_documents_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger travel documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerTravelDocument"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/documents": {
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Create a new travel document for a specific passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_documents_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/documents/{travelDocumentKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger's specific travel document.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_documents_travelDocumentKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerTravelDocument"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/documents/{travelDocumentKey}": {
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a specific passenger's travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_documents_travelDocumentKey_put",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The updated travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a specific passenger's travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_documents_travelDocumentKey_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelDocumentEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a specific passenger's specific travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_documents_travelDocumentKey_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/documents/check": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets the document check status for a specific passenger if there are any.",
        "description": "Requires a committed booking in state.\nRequires document check to be enabled in government security configuration.\n            ",
        "operationId": "nsk_v1_booking_passengers_passengerKey_documents_check_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The key of the passenger to perform the document check on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerDocumentCheckResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/emdCoupons": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets the collection of passenger EMD coupons for a specific passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_emdCoupons_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerEmdCoupon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/emdCoupons/{passengerEmdCouponKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger EMD coupon for a specific passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_emdCoupons_passengerEmdCouponKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerEmdCouponKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger EMD coupon key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerEmdCoupon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/fees": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets all fees for a specific passenger, based upon the given passenger key.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_fees_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerFee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/fees/{passengerFeeKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific fee for a specific passenger, based upon the given keys.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_fees_passengerFeeKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerFeeKey",
            "in": "path",
            "required": true,
            "description": "The passenger fee key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerFee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/fees/nameChange": {
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Waives the name change fee of the specified passenger.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_fees_nameChange_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/infant": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger's infant.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_infant_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The passenger infant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerInfant"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/passengers/{passengerKey}/infant": {
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Creates an infant on a specific passenger.",
        "description": "If the booking in state contains a passive segment, an infant will not be\ncreated on the passive segment for the passenger.\n            ",
        "operationId": "nsk_v3_booking_passengers_passengerKey_infant_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new infant.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerInfantCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "The created infant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates an infant on a specific passenger.",
        "operationId": "nsk_v3_booking_passengers_passengerKey_infant_put",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified infant.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Infant"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/infant": {
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a infant on a specific passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched infant.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfInfant"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a infant from a specific passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/infant/documents": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger infant's collection of travel documents.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_infant_documents_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger infant travel documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerTravelDocument"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/infant/documents": {
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Create a new travel document for a specific passenger infant.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_documents_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/infant/documents/{travelDocumentKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets a specific passenger infant's specific travel document.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_infant_documents_travelDocumentKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerTravelDocument"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/infant/documents/{travelDocumentKey}": {
      "put": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Updates a specific passenger infant travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_documents_travelDocumentKey_put",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The updated travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a specific passenger infant travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_documents_travelDocumentKey_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelDocumentEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a specific passenger infant specific travel document.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_infant_documents_travelDocumentKey_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/infant/documents/check": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets the document check status for a specific passenger's infant if there are any.",
        "description": "Requires a committed booking in state.\nRequires document check to be enabled in government security configuration.\n            ",
        "operationId": "nsk_v1_booking_passengers_passengerKey_infant_documents_check_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The key of the passenger to perform the infant document check on.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerDocumentCheckResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/passengerTypeCode": {
      "patch": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Patches a specific passenger to the given passenger type.",
        "description": "NOTE: The date of birth doesn't need to be updated if the passenger's current date of birth still falls within the\nnew passenger type's age restriction.\nThis could also cause a repricing on the booking.\nIn addition, changing the passenger type will change the passenger key as well.\n            ",
        "operationId": "nsk_v1_booking_passengers_passengerKey_passengerTypeCode_patch",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The passenger type request containing the new passenger type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerTypeCodeEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassengerKeyResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/seats": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets all seats associated with a passenger.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_seats_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "Passengers to get seats for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerSeat"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/seats/{unitKey}": {
      "delete": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Deletes a seat assignment from a specific passenger on the booking in state.",
        "operationId": "nsk_v1_booking_passengers_passengerKey_seats_unitKey_delete",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "The unique unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "WaiveFee",
            "in": "query",
            "description": "The flag indicating to waive the seat fees if permissions permit.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "IgnoreSeatSsrs",
            "in": "query",
            "description": "Flag indicating whether to ignore seat SSR's.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "No content if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/passengers/{passengerKey}/seats/{unitKey}": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets passenger seat by key.",
        "operationId": "nsk_v2_booking_passengers_passengerKey_seats_unitKey_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "Unique passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "Unique unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerSeat"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Adds a seat assignment to a specific passenger on the booking in state.",
        "description": "This endpoint actively checks whether the passenger has a seat. If the passenger does\nhave a seat, it will delete the current seat the passenger occupies and add the requested\none. This may result in slightly slower response times.\n            ",
        "operationId": "nsk_v2_booking_passengers_passengerKey_seats_unitKey_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "The unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The add seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSeatRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/seats/{unitKey}/quote": {
      "post": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Retrieves a seat fee quote for a specific passenger.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_booking_passengers_passengerKey_seats_unitKey_quote_post",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "The unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The seat fee quote request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeatFeeQuoteRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerSeatFee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/{passengerKey}/ssrs/{ssrCode}/price": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets an SSR price quote on the booking in state.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_passengers_passengerKey_ssrs_ssrCode_price_get",
        "parameters": [
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ssrCode",
            "in": "path",
            "required": true,
            "description": "The ssr code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "collectedCurrencyCode",
            "in": "query",
            "description": "The collected currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSsrPrice"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/breakdown": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets all the passenger price breakdowns.",
        "operationId": "nsk_v1_booking_passengers_breakdown_get",
        "responses": {
          "200": {
            "description": "The collection of passenger breakdowns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndPassengerPriceBreakdown"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/passengers/breakdown/byType": {
      "get": {
        "tags": [
          "booking/passengers"
        ],
        "summary": "Gets all the passenger price breakdown by passenger type.",
        "operationId": "nsk_v1_booking_passengers_breakdown_byType_get",
        "responses": {
          "200": {
            "description": "The collection of passenger type breakdowns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndPassengerTypePriceBreakdown"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Retrieves the booking payments on the booking in state.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_payments_get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPayment"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/booking/payments": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new external payment or prepaid payment on the booking in state.",
        "description": "    The payment fields are dynamic to the criteria of your payment provider. Here is an example request for a\n    credit card payment that does not require address, zip, etc.\n    { \"amount\": 10, \"currencyCode\": \"USD\", \"paymentFields\": {\"ACCTNO\":\"411111111111\", \"EXPDATE\":\"10/8/2017\",\n    \"CC::AccountHolderName\":\"Bob Smith\", \"CC::VerificationCode\":\"111\"}}\n\n\n    A 202 (HTTP status code) response returns alternate data signifying that either Three D Secure was enabled for\n    this payment and is required for this payment type or a direct currency conversion (Dcc) offer was given. The\n    payment will need to be resent using the 3DS endpoint or the Dcc endpoint.\n    Note that it is possible for a payment to return a dcc offer and also have three d secure enabled. In these\n    cases the direct currency conversion offer will need to be handled first and then the three d secure payment\n    can be\n    handled.\n\n\n    If you would like to make a Dcc offer and the system using this endpoint cannot display a dcc offer to the end\n    user, the status should be updated to DccNotOffered. This indicates that the offer was not displayed to the end\n    user\n    and is to be accepted automatically.\n\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent (USER-AGENT)\n        \n        \n            Accept (ACCEPT)\n        \n    \n\n            ",
        "operationId": "nsk_v4_booking_payments_post",
        "parameters": [
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term URL.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The booking payments response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "The booking payments response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentInformation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/{paymentKey}": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets a specific payment.",
        "operationId": "nsk_v1_booking_payments_paymentKey_get",
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "required": true,
            "description": "Payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPayment"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Deletes the payment.",
        "operationId": "nsk_v1_booking_payments_paymentKey_delete",
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "required": true,
            "description": "Payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/{paymentKey}/authorize": {
      "patch": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Manually authorize a committed payment.",
        "description": "This endpoint is to be used with caution and is only permissible to use under certain circumstances.\n            ",
        "operationId": "nsk_v1_booking_payments_paymentKey_authorize_patch",
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "required": true,
            "description": "The payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "force",
            "in": "query",
            "description": "Indicates if a manual force authorization is desired. Defaults to the standard, manual\nauthorization process if this query parameter is not provided. On a manual force authorization,\nonly pending, amounted payments (under an external payment method) are allowed, and the agent's role\nmust allow the manual force authorization of pending payments.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "authorizationCode",
          "description": "The authorization code.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/{paymentKey}/decline": {
      "patch": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Manually decline a committed payment.",
        "description": "This endpoint is to be used with caution and is only permissible to use under certain circumstances.\n            ",
        "operationId": "nsk_v1_booking_payments_paymentKey_decline_patch",
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "required": true,
            "description": "The payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "force",
            "in": "query",
            "description": "Indicates if a manual force decline is desired. Defaults to the standard, manual decline process if\nthis query parameter is not provided. On a manual force decline, only pending, amounted payments\n(under an external payment method) are allowed, and the agent's role must allow the manual\nforce decline of pending payments.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/{paymentMethod}/dcc": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets the available direct currency codes offer.\nThis is for making an inline dcc payment.",
        "description": "If a dcc offer is accepted the payment transaction will need to be completed before getting another\ndcc offer. For example, a user cannot get a dcc offer for a VISA, get a dcc offer for a MasterCard and then accept\nthe VISA dcc offer and pay with the VISA. The only way to complete this would be to get a dcc offer on one card,\naccept, and then pay and then get the dcc offer for another card, accept, and pay.\nRegardless of whether the offer is accepted or not, the endpoint /api/nsk/v5/booking/payments/dcc/{dccKey} will\nneed to be called.\n            ",
        "operationId": "nsk_v3_booking_payments_paymentMethod_dcc_get",
        "parameters": [
          {
            "name": "paymentMethod",
            "in": "path",
            "required": true,
            "description": "Payment method code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Amount",
            "in": "query",
            "description": "The amount being applied as a payment.\n            ",
            "schema": {
              "type": "number",
              "format": "decimal"
            },
            "x-position": 2
          },
          {
            "name": "AccountNumber",
            "in": "query",
            "description": "The account number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 34,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "QuotedCurrencyCode",
            "in": "query",
            "description": "The quoted currency code to convert to.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDirectCurrencyConversionAvailability"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/available": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Retrieves the booking payment methods available for the booking in state.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v2_booking_payments_available_get",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "query",
            "description": "The optional currency code. Defaults to the logged in users currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndPaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/bookingCredit": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets credit available from a past booking.",
        "description": "See booking retrieve. This method uses the same validation rules.\n            ",
        "operationId": "nsk_v2_booking_payments_bookingCredit_get",
        "parameters": [
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code of the account.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address of a contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 266,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "One of the passengers customer numbers applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCreditAccount"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/bookingCredit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Applies credit from a past booking.",
        "operationId": "nsk_v3_booking_payments_bookingCredit_post",
        "requestBody": {
          "x-name": "request",
          "description": "Apply booking credit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyBookingCreditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/credit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Applies credit by reference number and type.",
        "description": "This endpoint is for agents and can apply credit for any user or type.\n            ",
        "operationId": "nsk_v3_booking_payments_credit_post",
        "requestBody": {
          "x-name": "request",
          "description": "Apply credit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyCreditAccountRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/credit": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets credit available by reference number and type.",
        "description": "This endpoint is for agents and can get credit available for any user or type.\n            ",
        "operationId": "nsk_v2_booking_payments_credit_get",
        "parameters": [
          {
            "name": "ReferenceNumber",
            "in": "query",
            "description": "The account reference. This will be the record locator, customer account number, or organization code depending on\nthe type.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code of the account.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Defines the type of credit being applied.\n             \nEnumeration values: 0 = Customer, 1 = Booking, 2 = Organization",
            "schema": {
              "$ref": "#/components/schemas/CreditType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Credit account HTTP response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCreditAccount"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/customerCredit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Applies credit from the logged in customer to the booking in state.",
        "operationId": "nsk_v3_booking_payments_customerCredit_post",
        "requestBody": {
          "x-name": "request",
          "description": "Apply credit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyCreditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/customerCredit": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets credit available for the logged in user on the booking in state.",
        "description": "Depending on configuration, credit may be validated by the contacts and passengers on the booking.\n            ",
        "operationId": "nsk_v2_booking_payments_customerCredit_get",
        "parameters": [
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code of the account.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Credit account http response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCreditAccount"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v5/booking/payments/dcc/{dccKey}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new external payment with direct currency conversion.\nThis endpoint is used for inline dcc payments only.",
        "description": "If a dcc offer is accepted the payment transaction will need to be completed before getting another\ndcc offer. For example, a user cannot get a dcc offer for a VISA, get a dcc offer for a MasterCard and then accept\nthe VISA dcc offer and pay with the VISA. The only way to complete this would be to get a dcc offer on one card,\naccept, and then pay and then get the dcc offer for another card, accept, and pay.\nRegardless of whether the offer is accepted or not, the endpoint /api/nsk/v5/booking/payments/dcc/{dccKey} will\nneed to be called.\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent (USER-AGENT)\n        \n        \n            Accept (ACCEPT)\n        \n    \n\nent\n            ",
        "operationId": "nsk_v5_booking_payments_dcc_dccKey_post",
        "parameters": [
          {
            "name": "dccKey",
            "in": "path",
            "required": true,
            "description": "The dcc key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term url.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The dcc request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DccRequestBasev2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfThreeDSecureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/dcc/{dccPaymentTransactionKey}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Adds a dcc payment to the booking in state.",
        "description": "If the system using this endpoint cannot display a dcc offer to the end user, the status should be updated to\nDccNotOffered. This indicates that the offer was not displayed to the end user and is it to be accepted\nautomatically.\n\n    A 202 (HTTP status code) response returns alternate data signifying that Three D Secure was enabled for this\n    payment and is required for this payment type. The payment will need to be resent using the 3DS endpoint.\n\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent (USER-AGENT)\n        \n        \n            Accept (ACCEPT)\n        \n    \n\n            ",
        "operationId": "nsk_v1_booking_payments_dcc_dccPaymentTransactionKey_post",
        "parameters": [
          {
            "name": "dccPaymentTransactionKey",
            "in": "path",
            "required": true,
            "description": "The dcc payment transaction key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "status",
          "description": "The dcc status. \nEnumeration values: 0 = DccNotOffered, 1 = DccOfferRejected, 2 = DccOfferAccepted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectCurrencyConversionOfferStatus"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfThreeDSecureResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/fees/{feeCode}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Retrieves the payment fee for the fee code by providing the account number and payment method code for a manual\nform of payment.",
        "description": "This endpoint behaves like a GET endpoint but is masked as POST.\n            ",
        "operationId": "nsk_v1_booking_payments_fees_feeCode_post",
        "parameters": [
          {
            "name": "feeCode",
            "in": "path",
            "required": true,
            "description": "The feeCode.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The payment fee price request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualPaymentFeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentFeeResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/fees/{feeCode}/storedPayment/{storedPaymentKey}": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Retrieves the payment fee for the fee code by providing the stored payment key for a stored payment.\nThe stored payment key will be able to provide to retrieve the account number, payment method code and account\nnumber id.",
        "operationId": "nsk_v1_booking_payments_fees_feeCode_storedPayment_storedPaymentKey_get",
        "parameters": [
          {
            "name": "feeCode",
            "in": "path",
            "required": true,
            "description": "The fee code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "storedPaymentKey",
            "in": "path",
            "required": true,
            "description": "The stored payment key of the agent holding the session.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Amount",
            "in": "query",
            "description": "The amount being payed.\n            ",
            "schema": {
              "type": "number",
              "format": "decimal"
            },
            "x-position": 3
          },
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CollectedCurrencyCode",
            "in": "query",
            "description": "The optional collected currency code. This will be needed for MCC requests.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentFeeResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/mcc": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets the available multi-currency codes available.",
        "description": "This is affected by the booking currency code.\n            ",
        "operationId": "nsk_v3_booking_payments_mcc_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndMccCurrencyInformationv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v5/booking/payments/mcc/{currencyCode}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new MCC payment.",
        "description": "This is affected by the booking currency code.\nThe MCC payment cannot have the same currency code in the URL and body.\nIn a normal MCC rate scenario, the rate ID and exchange rate payment fields are auto-populated and should not be\npassed in manually.\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent\n        \n        \n            Accept\n        \n    \n\n            ",
        "operationId": "nsk_v5_booking_payments_mcc_currencyCode_post",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "description": "The collected currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term URL.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The payment method request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MccPaymentMethodRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfThreeDSecureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v5/booking/payments/mcc/{currencyCode}/storedPayment/{storedPaymentKey}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new MCC payment from a stored payment.",
        "description": "This is affected by the booking currency code.\nThe MCC payment cannot have the same currency code in the URL and body.\nIn a normal MCC rate scenario, the rate ID and exchange rate payment fields are auto-populated and should not be\npassed in manually.\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent\n        \n        \n            Accept\n        \n    \n\n            ",
        "operationId": "nsk_v5_booking_payments_mcc_currencyCode_storedPayment_storedPaymentKey_post",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "description": "The collected currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "storedPaymentKey",
            "in": "path",
            "required": true,
            "description": "Stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term URL.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The payment method request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MccPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfThreeDSecureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/organizationCredit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Applies credit to the logged in user's organization.\nNOTE: It is not recommended to use a custom agency credit payment as it will not have the\nsame behavior nor be validated like the pre-configured `AG` credit payment.",
        "operationId": "nsk_v3_booking_payments_organizationCredit_post",
        "requestBody": {
          "x-name": "request",
          "description": "Apply credit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyOrganizationCreditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/organizationCredit": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets credit available for the logged in users organization.",
        "description": "Depending on configuration, credit may be validated by the contacts and passengers on the booking.\n            ",
        "operationId": "nsk_v2_booking_payments_organizationCredit_get",
        "parameters": [
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "The currency code of the account.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Credit account http response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCreditAccount"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/refunds": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Retrieves the booking payment methods available for a refund on the booking in state.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_payments_refunds_get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndPaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/booking/payments/refunds": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a refund for the booking in state.",
        "description": "Requires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not\nlogged in a booking credit will be applied.\n            ",
        "operationId": "nsk_v4_booking_payments_refunds_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/payments/refunds/customerCredit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a customer credit for a specified customer.",
        "description": "Requires a booking in state and an agent token. Agents should use /refunds endpoint for booking credits.\n            ",
        "operationId": "nsk_v3_booking_payments_refunds_customerCredit_post",
        "parameters": [
          {
            "name": "skipBalanceValidation",
            "in": "query",
            "description": "Indicates whether the validation of the booking balance should be skipped.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The customer credit refund request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreditRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/refunds/organizationCredit": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates an organization account refund for a payment from\nthe booking in state.",
        "operationId": "nsk_v2_booking_payments_refunds_organizationCredit_post",
        "requestBody": {
          "x-name": "request",
          "description": "The organization refund request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/payments/reversals": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Reverses a payment for the booking in state.",
        "description": "This endpoint works similarly with the refund endpoint (POST api/nsk/v4/booking/payments/refunds),\nbut agent-only permissions are needed and does not require a zero or negative booking balance for processing.\nRequires a booking in state. Credit shell payment types will default to a customer credit if logged in. If not\nlogged in a booking credit will be applied.\n            ",
        "operationId": "nsk_v1_booking_payments_reversals_post",
        "requestBody": {
          "x-name": "request",
          "description": "The payment reversal request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentReversalRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v6/booking/payments/storedPayment/{storedPaymentKey}": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a payment using the stored payment information for the booking in state.",
        "description": "    Account Number and Expiration Date are stored.\n    With stored payments, payment fields may still be required to complete the transaction.\n    For example, a credit card that requires address information, this information is not stored with the stored\n    payment.\n\n\n    A 202 (HTTP status code) response returns alternate data signifying that either Three D Secure was enabled for\n    this payment and is required for this payment type or a direct currency conversion (Dcc) offer was given. The\n    payment will need to be resent using the 3DS endpoint or the Dcc endpoint.\n    Note that it is possible for a payment to return a dcc offer and also have three d secure enabled. In these\n    cases the direct currency conversion offer will need to be handled first and then the three d secure payment\n    can be\n    handled.\n\n\n    If you would like to make a Dcc offer and the system using this endpoint cannot display a dcc offer to the end\n    user, the status should be updated to DccNotOffered. This indicates that the offer was not displayed to the end\n    user\n    and is to be accepted automatically.\n\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You also need to have these headers populated:\n    \n        \n            User Agent (USER-AGENT)\n        \n        \n            Accept (ACCEPT)\n        \n    \n\n            ",
        "operationId": "nsk_v6_booking_payments_storedPayment_storedPaymentKey_post",
        "parameters": [
          {
            "name": "storedPaymentKey",
            "in": "path",
            "required": true,
            "description": "Stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term url.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentInformation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v5/booking/payments/threeDSecure": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new ThreeDSecure external payment or prepaid payment on the booking in state.",
        "description": "    A call to payments post should be made first and processed to verify a 3DS payment is required.\n\n\n    If you would like to make a ThreeDSecure payment, you will need to provide a valid term url.\n    You will also need to have these headers populated:\n    \n        \n            User Agent (USER-AGENT)\n        \n        \n            Accept (ACCEPT)\n        \n    \n\n            ",
        "operationId": "nsk_v5_booking_payments_threeDSecure_post",
        "parameters": [
          {
            "name": "termUrl",
            "in": "query",
            "description": "The term URL.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Payment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreeDSecurePaymentMethodRequestv3"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The booking payments response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/booking/payments/voucher": {
      "post": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Creates a new voucher payment on the booking in state.",
        "operationId": "nsk_v4_booking_payments_voucher_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/payments/voucher/{voucherPaymentReference}": {
      "get": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Gets information regarding a specific voucher code and validates whether the referenced voucher\nexists as a voucher payment in the booking in state.",
        "operationId": "nsk_v2_booking_payments_voucher_voucherPaymentReference_get",
        "parameters": [
          {
            "name": "voucherPaymentReference",
            "in": "path",
            "required": true,
            "description": "The voucher payment reference.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "overrideRestrictions",
            "in": "query",
            "description": "Override voucher restrictions. Defaults to false.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVoucherInformation"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/payments"
        ],
        "summary": "Reverses a voucher payment on the booking in state. This refunds the claimed amount on the voucher.",
        "operationId": "nsk_v2_booking_payments_voucher_voucherPaymentReference_delete",
        "parameters": [
          {
            "name": "voucherPaymentReference",
            "in": "path",
            "required": true,
            "description": "Voucher payment reference.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The voucher deletion response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/penalties": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the booking penalty from the booking in state.",
        "operationId": "nsk_v1_booking_penalties_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBookingPenalty"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/penalties/{cancelledJourneyKey}": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Waives the penalty fees of the specified cancelled journey.",
        "description": "If the journey key specified is for a non-cancelled journey, i.e. the journey exists in the booking in state,\nan exception will be thrown.\nTo waive the penalty fee of a journey in the booking in state, please use\n/api/nsk/v1/booking/journeys/{journeyKey}/fees/penalty instead.\n            ",
        "operationId": "nsk_v1_booking_penalties_cancelledJourneyKey_delete",
        "parameters": [
          {
            "name": "cancelledJourneyKey",
            "in": "path",
            "required": true,
            "description": "The journey key of the cancelled journey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/pointOfSale": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Updates the booking point of sale.",
        "description": "The ISO country code cannot be updated for a committed booking.  This value can only be\nupdated on an uncommitted booking.\n            ",
        "operationId": "nsk_v1_booking_pointOfSale_put",
        "requestBody": {
          "x-name": "request",
          "description": "Details to update the point of sale.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingPointOfSaleEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking"
        ],
        "summary": "Updates the booking point of sale.",
        "description": "The ISO country code cannot be updated for a committed booking.  This value can only be\nupdated on an uncommitted booking.\n            ",
        "operationId": "nsk_v1_booking_pointOfSale_patch",
        "requestBody": {
          "x-name": "request",
          "description": "Details to update the point of sale.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfBookingPointOfSaleEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/price": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Applies fares, discounts and taxes to the booking in state.",
        "operationId": "nsk_v1_booking_price_put",
        "requestBody": {
          "x-name": "priceRequest",
          "description": "The price request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/promotion": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Sets a promotion code to a booking in state.",
        "operationId": "nsk_v1_booking_promotion_post",
        "requestBody": {
          "x-name": "request",
          "description": "Promotion request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Updates a promotion code to a booking in state.",
        "operationId": "nsk_v1_booking_promotion_put",
        "requestBody": {
          "x-name": "request",
          "description": "Promotion request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes the promotion code on the booking in state.",
        "operationId": "nsk_v1_booking_promotion_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/queue": {
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Adds the booking from state to a booking queue.",
        "operationId": "nsk_v2_booking_queue_post",
        "requestBody": {
          "x-name": "request",
          "description": "The booking request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Removes the booking in state from a booking queue.",
        "operationId": "nsk_v2_booking_queue_delete",
        "requestBody": {
          "x-name": "request",
          "description": "The booking request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueDeleteRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/queues/{bookingQueueKey}": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Removes the booking in state from the specified booking queue item.",
        "operationId": "nsk_v1_booking_queues_bookingQueueKey_delete",
        "parameters": [
          {
            "name": "bookingQueueKey",
            "in": "path",
            "required": true,
            "description": "The unique key of the booking queue to dequeue from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request for the dequeue operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueDeleteByKeyRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/recordLocators": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets all of the record locators on the in-state booking.",
        "operationId": "nsk_v1_booking_recordLocators_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfRecordLocator"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "booking"
        ],
        "summary": "Adds a third party record locator to the booking.",
        "operationId": "nsk_v1_booking_recordLocators_post",
        "requestBody": {
          "x-name": "request",
          "description": "The record locator request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordLocatorCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes all record locators from the booking.",
        "operationId": "nsk_v1_booking_recordLocators_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/recordLocators/{recordLocatorKey}": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the record locator associated with the record locator key for\nthe in-state booking.",
        "operationId": "nsk_v1_booking_recordLocators_recordLocatorKey_get",
        "parameters": [
          {
            "name": "recordLocatorKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The record locator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfRecordLocator"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Replaces the data of a third party record locator on the booking.",
        "operationId": "nsk_v1_booking_recordLocators_recordLocatorKey_put",
        "parameters": [
          {
            "name": "recordLocatorKey",
            "in": "path",
            "required": true,
            "description": "The record locator key to update.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The record locator update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordLocatorEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "booking"
        ],
        "summary": "Patches the data of a third party record locator on the booking.",
        "operationId": "nsk_v1_booking_recordLocators_recordLocatorKey_patch",
        "parameters": [
          {
            "name": "recordLocatorKey",
            "in": "path",
            "required": true,
            "description": "The record locator key to update.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The record locator update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfRecordLocatorEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Deletes a record locator from the booking.",
        "operationId": "nsk_v1_booking_recordLocators_recordLocatorKey_delete",
        "parameters": [
          {
            "name": "recordLocatorKey",
            "in": "path",
            "required": true,
            "description": "The record locator key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/reset": {
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Clears the current booking state.",
        "operationId": "nsk_v1_booking_reset_delete",
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/retrieve": {
      "get": {
        "tags": [
          "booking/retrieve"
        ],
        "summary": "Retrieves the booking from the New Skies server based on the retrieve booking request parameters and any configured\nbooking retrieve strategies. If the booking exists and the search criteria is allowed by one of the configured\nbooking\nretrieve strategies, the booking will be loaded into the web session and returned.",
        "description": "This endpoint will perform validation using a pre-configured booking retrieve strategy.  Custom strategies can\nbe configured in Utilities, and are configurable based on application name.\nTo set-up a custom strategy, go to Utilities -> Resource Management.  From the \"Resource Management\" screen, go\nto Root -> Web -> dotREZ folder.  Right click on the dotREZ folder and select \"Add Content\".  On the \"Add Resource\"\nscreen, set the \"Content Name\" to \"BookingStrategyManagementConfig\".  Choose \"XML\" as the \"Type\".  The \"Content\nData\"\nwill be in JSON, and should look like this:\n\n    {\n    \"strategies\" :\n    [{\n    \"applicationName\" : \"dotREZApi\",\n    \"allowedStrategies\" : [\n    \"firstAndLastName\",\n    \"email\"\n    ]\n    }, {\n    \"applicationName\" : \"Web\",\n    \"allowedStrategies\" : [\n    \"email\"\n    ]\n    }, {\n    \"applicationName\" : \"\",\n    \"allowedStrategies\" : [\n    \"lastName\"\n    ]\n    }]\n    }\n\nThe application name can be set when creating a new token.  If no application name is given for a token create\nrequest, the API will use whatever value is defined in the \"dotrez-nsk-common.json\" configuration file under the\n\"systemOptions\" -> \"fallbackApplicationName\".  If no strategies are configured and no \"fallbackApplicationName\" is\nconfigured, the default strategy will be a booking retrieve based on PNR, first name, and last name.\nIf the same strategy should be used for multiple applications, the last entry in the example above can be set by\nsetting an empty string as the application name, and then listing the allowed strategies to be used.  Application\nspecific strategies can still be defined, but if no application specific strategy is found, a list of strategies\nassociated with the blank application name will be used (if one exists in the configuration file).\nThe list of strategies currently includes the following options:\n\n    \n        firstAndLastName\n    \n    \n        email\n    \n    \n        originAndDepartureDate\n    \n    \n        lastName\n    \n    \n        customerNumber\n    \n\nMore strategies may be added in the future.\n            ",
        "operationId": "nsk_v2_booking_retrieve_get",
        "parameters": [
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address of a contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 266,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "One of the passengers customer numbers applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/retrieve/{bookingKey}": {
      "get": {
        "tags": [
          "booking/retrieve"
        ],
        "summary": "Gets a specific booking by key and stores it in state.",
        "description": "This action requires a session token and the user logged in.\n            ",
        "operationId": "nsk_v1_booking_retrieve_bookingKey_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The user bookings response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/retrieve/byRecordLocator/{recordLocator}": {
      "get": {
        "tags": [
          "booking/retrieve"
        ],
        "summary": "Gets a specific booking by record locator and stores it in state.",
        "description": "This action requires a session token and the user logged in.\n            ",
        "operationId": "nsk_v1_booking_retrieve_byRecordLocator_recordLocator_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The user bookings response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/salesChannel": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Overrides the effective sales channel for the booking in state.",
        "description": "For the overriden channel to be implemented, the booking in state must be committed after calling this endpoint.\n            ",
        "operationId": "nsk_v1_booking_salesChannel_put",
        "parameters": [
          {
            "name": "channelType",
            "in": "query",
            "description": "The sales channel type to override to. \nEnumeration values: 0 = Direct, 1 = Web, 2 = Api, 3 = DigitalApi, 4 = DigitalWeb, 5 = Ndc",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/OverrideChannelType"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/seatmaps": {
      "get": {
        "tags": [
          "booking/seatmaps"
        ],
        "summary": "Gets the list of seat maps for all the journeys for the booking in state.",
        "operationId": "nsk_v3_booking_seatmaps_get",
        "parameters": [
          {
            "name": "FeePricingMode",
            "in": "query",
            "description": "Fee pricing mode.\n             \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FeePricingMode"
            },
            "x-position": 1
          },
          {
            "name": "CollectedCurrencyCode",
            "in": "query",
            "description": "The collected currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "IncludePropertyLookup",
            "in": "query",
            "description": "Flag indicating to include seat property lookup on the response.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The list of available seat maps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSeatMapAvailability"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/booking/seatmaps/journey/{journeyKey}": {
      "get": {
        "tags": [
          "booking/seatmaps"
        ],
        "summary": "Gets the list of seat maps for an entire journey.",
        "operationId": "nsk_v4_booking_seatmaps_journey_journeyKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The unique journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "FeePricingMode",
            "in": "query",
            "description": "Fee pricing mode.\n             \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FeePricingMode"
            },
            "x-position": 2
          },
          {
            "name": "CollectedCurrencyCode",
            "in": "query",
            "description": "The collected currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "IncludePropertyLookup",
            "in": "query",
            "description": "Flag indicating to include seat property lookup on the response.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The list of seat maps for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSeatMapAvailability"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/seatmaps/segment/{segmentKey}": {
      "get": {
        "tags": [
          "booking/seatmaps"
        ],
        "summary": "Gets the list of seat maps for a specific journey's segment.",
        "operationId": "nsk_v3_booking_seatmaps_segment_segmentKey_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "FeePricingMode",
            "in": "query",
            "description": "Fee pricing mode.\n             \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FeePricingMode"
            },
            "x-position": 2
          },
          {
            "name": "CollectedCurrencyCode",
            "in": "query",
            "description": "The collected currency code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "IncludePropertyLookup",
            "in": "query",
            "description": "Flag indicating to include seat property lookup on the response.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The list of seat maps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSeatMapAvailability"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}": {
      "post": {
        "tags": [
          "booking/seats"
        ],
        "summary": "Auto assigns seats to all selected passengers that do not have them for every journey on the booking.\nIf seatedNearPrimary is empty, all passengers in the state booking will be requested for seat assignments.\nOtherwise, passengers with a passenger key specified in seatedNearPrimary will be requested instead.",
        "operationId": "nsk_v1_booking_seats_auto_primaryPassengerKey_post",
        "parameters": [
          {
            "name": "primaryPassengerKey",
            "in": "path",
            "required": true,
            "description": "The key for the primary passenger.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The auto assign seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoAssignRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Seats auto-assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/journey/{journeyKey}": {
      "post": {
        "tags": [
          "booking/seats"
        ],
        "summary": "Auto assigns seats to all passengers that do not have them for a specific journey.\nIf seatedNearPrimary is empty, all passengers in the state booking will be requested for seat assignments.\nOtherwise, passengers with a passenger key specified in seatedNearPrimary will be requested instead.",
        "operationId": "nsk_v1_booking_seats_auto_primaryPassengerKey_journey_journeyKey_post",
        "parameters": [
          {
            "name": "primaryPassengerKey",
            "in": "path",
            "required": true,
            "description": "The key for the primary passenger.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The specific journey key to auto assign.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The auto assign seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoAssignRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Seats auto-assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/journey/{journeyKey}/quote": {
      "post": {
        "tags": [
          "booking/seats"
        ],
        "summary": "Retrieves the seat fee information of the auto-assigned seats of a passenger on a given journey.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_booking_seats_auto_primaryPassengerKey_journey_journeyKey_quote_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The key of the journey for the auto-assigned seat where the seat fee information will be\nbased.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "primaryPassengerKey",
            "in": "path",
            "required": true,
            "description": "The key of the primary passenger being seated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The seat fee quote request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoAssignSeatFeeQuoteRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfPassengerSeatFee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/segment/{segmentKey}": {
      "post": {
        "tags": [
          "booking/seats"
        ],
        "summary": "Auto assigns seats to all passengers that do not have them for a specific journey's segment.\nIf seatedNearPrimary is empty, all passengers in the state booking will be requested for seat assignments.\nOtherwise, passengers with a passenger key specified in seatedNearPrimary will be requested instead.",
        "operationId": "nsk_v1_booking_seats_auto_primaryPassengerKey_segment_segmentKey_post",
        "parameters": [
          {
            "name": "primaryPassengerKey",
            "in": "path",
            "required": true,
            "description": "The key for the primary passenger.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The specific segment key to auto assign.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The auto assign seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoAssignRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Seats auto-assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/seats/auto/{primaryPassengerKey}/segment/{segmentKey}/quote": {
      "post": {
        "tags": [
          "booking/seats"
        ],
        "summary": "Retrieves the seat fee information of the auto-assigned seats of a passenger on a given segment.",
        "description": "Although this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_booking_seats_auto_primaryPassengerKey_segment_segmentKey_quote_post",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The key of the segment for the auto-assigned seat where the seat fee information will be\nbased.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "primaryPassengerKey",
            "in": "path",
            "required": true,
            "description": "The key of the primary passenger being seated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The seat fee quote request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoAssignSeatFeeQuoteRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfPassengerSeatFee"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/{segmentKey}": {
      "delete": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Cancels the specific segment from the booking in state.",
        "description": "Calling this method will alter the existing journeyKey. If you are cancelling the only segment in a journey,\nthis method will behave the same as calling DELETE on /api/nsk/v1/booking/journeys/{journeyKey}.\nIf there are segments remaining after the delete, the Location response header will be set with\nthe location of the modified journey with its new key.\n            ",
        "operationId": "nsk_v1_booking_segments_segmentKey_delete",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The key of the specific segment to be canceled.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/{segmentKey}/classOfService": {
      "delete": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Restores a segment to the class of service prior to an upgrade or downgrade.",
        "description": "This does not truly delete the old class of service. Instead, it restores the original class of service before\nan upgrade or downgrade occurred.\n            ",
        "operationId": "nsk_v1_booking_segments_segmentKey_classOfService_delete",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "overSell",
            "in": "query",
            "description": "Indicates the intent to restore the class of service even if there are no available AUs.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/{segmentKey}/passengers/{passengerKey}": {
      "get": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Gets a specific passenger segment from the booking in state.",
        "operationId": "nsk_v1_booking_segments_segmentKey_passengers_passengerKey_get",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerSegment"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/{segmentKey}/passengers/{passengerKey}/tickets": {
      "post": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Creates a ticket on a passenger segment on the booking in state.",
        "operationId": "nsk_v1_booking_segments_segmentKey_passengers_passengerKey_tickets_post",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Details to create the ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Updates a ticket on a passenger segment on the booking in state.",
        "operationId": "nsk_v1_booking_segments_segmentKey_passengers_passengerKey_tickets_put",
        "parameters": [
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Details to update the ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/classOfService/{classModifyKey}": {
      "put": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Modifies the class of service for the current booking in state to effect a segment upgrade or downgrade.",
        "operationId": "nsk_v1_booking_segments_classOfService_classModifyKey_put",
        "parameters": [
          {
            "name": "classModifyKey",
            "in": "path",
            "required": true,
            "description": "The class modify key from class of service availability.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The class modify request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassModifyBaseRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/segments/classOfService/availability": {
      "get": {
        "tags": [
          "booking/segments"
        ],
        "summary": "Gets class of service availability for the booking in state.",
        "operationId": "nsk_v1_booking_segments_classOfService_availability_get",
        "parameters": [
          {
            "name": "isUpgrade",
            "in": "query",
            "description": "Indicates an upgrade class of service request.\nWhen set to false, indicates a downgrade class of service request.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "collectedCurrencyCode",
            "in": "query",
            "description": "Collected currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "feePricingMode",
            "in": "query",
            "description": "Fee pricing mode. \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FeePricingMode"
            },
            "x-position": 3
          },
          {
            "name": "includeUnavailable",
            "in": "query",
            "description": "Indicates that classes of service with no availability should be returned.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfClassAvailability"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/ssrs": {
      "get": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Retrieves the current SSRs added to the booking in state.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_ssrs_get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerSsr"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/ssrs": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Adds SSRs to the booking in state.",
        "description": "Adding an SSR by journey automatically adds the SSR to every segment.\nRequires a booking in state.\n            ",
        "operationId": "nsk_v3_booking_ssrs_post",
        "requestBody": {
          "x-name": "request",
          "description": "The SSR by keys request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsrByKeysRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/ssrs/{ssrKey}": {
      "get": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Retrieves the current SSR by key.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_ssrs_ssrKey_get",
        "parameters": [
          {
            "name": "ssrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerSsr"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Modify the ssr note.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_ssrs_ssrKey_put",
        "parameters": [
          {
            "name": "ssrKey",
            "in": "path",
            "required": true,
            "description": "Unique Ssr key identifier.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "note",
          "description": "The updated note.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Deletes by the SSR passenger key provided by metadata.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v1_booking_ssrs_ssrKey_delete",
        "parameters": [
          {
            "name": "ssrKey",
            "in": "path",
            "required": true,
            "description": "Unique Ssr passenger identifier.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/booking/ssrs/{ssrKey}": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Add an SSR to the booking in state.",
        "description": "Adding an SSR by journey automatically adds the SSR to every segment.\nRequires a booking in state.\n            ",
        "operationId": "nsk_v3_booking_ssrs_ssrKey_post",
        "parameters": [
          {
            "name": "ssrKey",
            "in": "path",
            "required": true,
            "description": "The SSR key to add.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The single SSR by key request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSsrByKeyRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/ssrs/availability": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Get the ssr's available to add to the booking in state.",
        "description": "Requires a booking in state.\nBy default, all ssr availability for the booking is returned.\n            ",
        "operationId": "nsk_v2_booking_ssrs_availability_post",
        "requestBody": {
          "x-name": "request",
          "description": "Optional request filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsrAvailabilityRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSsrAvailability"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/ssrs/bundles/resell": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Resells any cancelled SSR bundle to the provided journey on the booking.",
        "operationId": "nsk_v1_booking_ssrs_bundles_resell_post",
        "requestBody": {
          "x-name": "request",
          "description": "The bundle resell request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundleResellRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/ssrs/manual": {
      "delete": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Deletes the SSR by the request criteria.",
        "description": "Requires a booking in state.\nThis is an alternate way of deleting an SSR. Deleting by ID is recommended (see /api/booking/ssrs).\nThis method is useful if the UI is not querying availability and not using dynamic SSR information.\n            ",
        "operationId": "nsk_v1_booking_ssrs_manual_delete",
        "requestBody": {
          "x-name": "request",
          "description": "Unique Ssr passenger information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassengerSsrKey"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/ssrs/manual": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Adds SSRs to the booking in state.",
        "description": "Adding an SSR by journey automatically adds the SSR to every segment.\nRequires a booking in state.\nThis is an alternate way of creating an SSR. Creating by ID is recommended (see /api/booking/ssrs).\nThis method is useful if the UI is not querying availability and not using dynamic SSR information.\n            ",
        "operationId": "nsk_v2_booking_ssrs_manual_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsrsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/ssrs/resell": {
      "post": {
        "tags": [
          "booking/ssrs"
        ],
        "summary": "Resells any cancelled ssrs to the provided journey on the booking.",
        "operationId": "nsk_v1_booking_ssrs_resell_post",
        "requestBody": {
          "x-name": "request",
          "description": "The resell ssr request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResellSsrRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The updated booking.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/booking/status": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Gets the status of the booking commit and returns the booking.",
        "description": "There are certain booking data that are not saved to state, such as payment\nattachments. This endpoint will return the booking data so that non persisted\ninformation is returned when and only when the status code is 200. This is the\nonly time the data will be available.\n            ",
        "operationId": "nsk_v2_booking_status_get",
        "responses": {
          "200": {
            "description": "Ok, booking has processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "202": {
            "description": "Accepted, booking is still processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/systemCode": {
      "put": {
        "tags": [
          "booking"
        ],
        "summary": "Updates the system code of the state booking.",
        "operationId": "nsk_v1_booking_systemCode_put",
        "requestBody": {
          "x-name": "systemCode",
          "description": "The updated system code.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "booking"
        ],
        "summary": "Removes the system code of the state booking.",
        "operationId": "nsk_v1_booking_systemCode_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/booking/validation": {
      "get": {
        "tags": [
          "booking"
        ],
        "summary": "Evaluates the booking in state prior to commit or payment processing.",
        "description": "The response indicates the forecasted status that will be applied to the booking during commit and if a held\nseat warning should be issued.\n            ",
        "operationId": "nsk_v1_booking_validation_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBookingValidationResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the booking from the New Skies server based on the retrieve booking request parameters and any configured\nbooking retrieve strategies. If the booking exists and the search criteria is allowed by one of the configured\nbooking retrieve strategies, the booking will be returned, but not loaded into the web session.",
        "description": "This endpoint will perform validation using a pre-configured booking retrieve strategy.  Custom strategies can\nbe configured in Utilities, and are configurable based on application name.\nTo set-up a custom strategy, go to Utilities -> Resource Management.  From the \"Resource Management\" screen, go\nto Root -> Web -> dotREZ folder.  Right click on the dotREZ folder and select \"Add Content\".  On the \"Add Resource\"\nscreen, set the \"Content Name\" to \"BookingStrategyManagementConfig\".  Choose \"XML\" as the \"Type\".  The \"Content\nData\"\nwill be in JSON, and should look like this:\n\n    {\n    \"strategies\" :\n    [{\n    \"applicationName\" : \"dotREZApi\",\n    \"allowedStrategies\" : [\n    \"firstAndLastName\",\n    \"email\"\n    ]\n    }, {\n    \"applicationName\" : \"Web\",\n    \"allowedStrategies\" : [\n    \"email\"\n    ]\n    }, {\n    \"applicationName\" : \"\",\n    \"allowedStrategies\" : [\n    \"lastName\"\n    ]\n    }]\n    }\n\nThe application name can be set when creating a new token.  If no application name is given for a token create\nrequest, the API will use whatever value is defined in the \"dotrez-nsk-common.json\" configuration file under the\n\"systemOptions\" -> \"fallbackApplicationName\".  If no strategies are configured and no \"fallbackApplicationName\" is\nconfigured, the default strategy will be a booking retrieve based on PNR, first name, and last name.\nIf the same strategy should be used for multiple applications, the last entry in the example above can be set by\nsetting an empty string as the application name, and then listing the allowed strategies to be used.  Application\nspecific strategies can still be defined, but if no application specific strategy is found, a list of strategies\nassociated with the blank application name will be used (if one exists in the configuration file).\nThe list of strategies currently includes the following options:\n\n    \n        firstAndLastName\n    \n    \n        email\n    \n    \n        originAndDepartureDate\n    \n    \n        lastName\n    \n    \n        customerNumber\n    \n\nMore strategies may be added in the future.\n            ",
        "operationId": "nsk_v2_bookings_get",
        "parameters": [
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address of a contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 266,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "One of the passengers customer numbers applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets a itinerary history stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the history entry.\n             \nEnumeration values: 0 = Unknown, 1 = ConvertedHistory, 2 = FlightTimeChange, 3 = FlightDesignatorChange, 4 = AssignedSeat, 5 = RemoveSeat, 6 = AddedFlight, 7 = DeletedFlight, 8 = DeletedPassenger, 9 = NameChange, 10 = GroupNameChange, 11 = CancelledTicketing, 12 = ScheduleChange, 13 = AddedPayment, 14 = ServiceFee, 15 = QueuedPnr, 16 = UnqueuedPnr, 17 = DeletedComment, 18 = Divided, 19 = CheckedIn, 20 = CheckedOut, 21 = FareOverride, 22 = AddedBaggage, 23 = ChangedBaggageWeight, 24 = CheckedBaggage, 25 = RemovedBaggage, 26 = BoardedPassenger, 27 = UnboardedPassenger, 28 = ManualAuthorization, 29 = ManualDecline, 30 = UndoCancel, 31 = ItinerarySent, 32 = ContactChange, 33 = SsrAdded, 34 = FlightMoved, 35 = VerifiedDocument, 36 = RemovedVerifiedDocument, 37 = Promotion, 38 = BookingComment, 39 = CancelledSchedule, 40 = CancelServiceFee, 41 = OverrideServiceFee, 42 = AddedRecordLocator, 43 = DeletedRecordLocator, 44 = UpgradeClassOfService, 45 = DowngradeClassOfService, 46 = StandbyPriorityChange, 47 = AssignedTicketNumber, 48 = DeletedTicketNumber, 49 = ConfirmSegmentStatusCodeChange, 50 = CodeshareFlightChanged, 51 = PdsCancel, 52 = PdsPending, 53 = PdsConfirm, 54 = PdsFinalized, 55 = PdsDeclined, 56 = PdsException, 57 = PdsCancelRefused, 58 = PdsCancelUnsuccessful, 59 = Apps, 60 = InhibitedOverride, 61 = PrintedBagTag, 62 = SelfPrintedBagTag, 63 = PrintedBoardingPass, 64 = AddCustomerId, 65 = DeleteCustomerId, 66 = HoldCreated, 67 = HoldRemoved, 68 = HoldChanged, 69 = OverrideCoupon, 70 = PdsSynchronized, 71 = PdsItemremoved, 72 = Reprice, 73 = ChannelOverride, 74 = EmdCreated, 75 = EmdRemoved, 76 = EmdChanged, 77 = ServiceBundle, 78 = PublishedFareOverride, 79 = FareClassRealignment",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/BookingHistoryEvent"
            },
            "x-position": 2
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/bagTagPrint": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the current bag tag print history for a booking, stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_bagTagPrint_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "isBagTagSelfPrinted",
            "in": "query",
            "description": "Whether the bag tag is self printed.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBagTagPrintHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Creates a bag tag print history for a booking, stateless.",
        "description": "Also updates bag's status from Added to AddedPrinted if Self-Tagging Baggage is enabled.\nIn order to see the status of a bag, check bags on a passenger segment.\n            ",
        "operationId": "nsk_v1_bookings_bookingKey_history_bagTagPrint_post",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The bag tag print history request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BagTagPrintHistoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/flightMove": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets a flight move history stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_flightMove_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFlightMoveHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/holdDateChange": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the hold date change history records for a booking.",
        "operationId": "nsk_v1_bookings_bookingKey_history_holdDateChange_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the hold date change history entry.\n             \nEnumeration values: 66 = Created, 67 = Removed, 68 = Changed",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/HoldDateChangeEvent"
            },
            "x-position": 2
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfHoldDateChangeHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/itinerarySent": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the itinerary sent history records for a booking.",
        "operationId": "nsk_v1_bookings_bookingKey_history_itinerarySent_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfItinerarySentHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/message": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets a booking's message history, stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_message_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The list of booking message history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingMessageHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/notification": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the booking notification history, stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_notification_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The list of booking notification history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingNotificationHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/seatAssignment": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets a seat assignment history stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_seatAssignment_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the seat assignment history entry.\n             \nEnumeration values: 4 = AssignedSeat, 5 = RemoveSeat",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/SeatAssignmentEvent"
            },
            "x-position": 2
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSeatAssignmentHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/history/segmentChange": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets a segment change history stateless.",
        "operationId": "nsk_v1_bookings_bookingKey_history_segmentChange_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Event",
            "in": "query",
            "description": "The event that triggered the seat assignment history entry.\n             \nEnumeration values: 6 = AddedFlight, 7 = DeletedFlight",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/SegmentChangeEvent"
            },
            "x-position": 2
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key of the last booking history item returned.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size for the response.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSegmentChangeHistoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/{bookingKey}/queue": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Adds a booking to a booking queue.",
        "operationId": "nsk_v2_bookings_bookingKey_queue_post",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The booking queue request v2.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Removes a booking from a booking queue.",
        "operationId": "nsk_v2_bookings_bookingKey_queue_delete",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The booking queue delete request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueDeleteRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{bookingKey}/queue/history": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the booking queue history for a specific booking.",
        "operationId": "nsk_v1_bookings_bookingKey_queue_history_post",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The booking queue history request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueHistoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingQueueHistory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves a booking itinerary stateless.",
        "operationId": "nsk_v1_bookings_recordLocator_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/account": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the booking account and collections based on the record locator.",
        "description": "This endpoint allows agents to see all of the different payment account transactions for the booking.\nSee related endpoint for non agents: /booking/payments/bookingCredit\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_account_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Creates the booking account based on the record locator and\ndata in the request.",
        "operationId": "nsk_v1_bookings_recordLocator_account_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create account request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/account/collection": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Creates a booking account collection and transaction based on the record\nlocator and data in the request.",
        "description": "This endpoint will create a new account collection and a transaction if no collection exists or\nno matching collection is found.  An account collection is unique based on the transaction code\nand the expiration date.  If a matching collection is found, a transaction for that collection\nis generated and the account collection will be updated.\nSee /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction codes.\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_account_collection_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create account collection request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCollectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/account/collection/{accountCollectionKey}/transactions": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the booking account collection transactions based on the record\nlocator, the account collection key, and the request data.",
        "operationId": "nsk_v1_bookings_recordLocator_account_collection_accountCollectionKey_transactions_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 5
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Creates a booking account collection transaction based on the record locator,\nthe account collection key, and data in the request.",
        "description": "This endpoint will add a transaction to an existing account collection.\nIf there are no account collections, or the account collection key does\nnot match an existing collection, the request will fail.\nTo add a new credit, see /api/nsk/v1/bookings/{recordLocator}/account/collection.\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_account_collection_accountCollectionKey_transactions_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create transaction requests.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/account/status": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Updates the booking account status.",
        "operationId": "nsk_v1_bookings_recordLocator_account_status_put",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "The allowed account status. \nEnumeration values: 0 = Open, 1 = Closed, 2 = AgencyInactive, 3 = Unknown",
            "schema": {
              "$ref": "#/components/schemas/AccountStatus"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/account/transactions": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves all of the transactions for all of the collections for the booking.",
        "operationId": "nsk_v1_bookings_recordLocator_account_transactions_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/children": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets children record locators of a booking not in state.",
        "description": "A booking gets children bookings as a result of a booking divide operation.\nThis endpoint returns a list of children booking record locators.\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_children_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfString"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/bookings/{recordLocator}/comments": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Adds a comment to a booking not in state.",
        "description": "Requires agent permissions.\nNote: To add comments and log added comments to GDS history please use POST or PUT /api/nsk/v3/booking and set\nSendToBookingSource to true\nGDS comments cannot be logged statelessly.\n            ",
        "operationId": "nsk_v3_bookings_recordLocator_comments_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "comments",
          "description": "The comments to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BookingsCommentRequest"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/email": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Sends itinerary notification via email.",
        "description": "This method will always send itinerary notifications via email,\nregardless of the chosen distributionOption on the contact.\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_email_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Created status if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/fareOverride/journey/{journeyKey}": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Replaces an existing fare price with an amount specified.",
        "operationId": "nsk_v1_bookings_recordLocator_fareOverride_journey_journeyKey_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journeyKey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The fare override request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FareOverrideRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/fees/{passengerFeeKey}/confirm": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Confirms the passenger fee for a given booking.",
        "operationId": "nsk_v1_bookings_recordLocator_fees_passengerFeeKey_confirm_put",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerFeeKey",
            "in": "path",
            "required": true,
            "description": "The passenger fee key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/journey": {
      "put": {
        "tags": [
          "bookings"
        ],
        "summary": "Moves a journey on a stateless booking to a different journey.",
        "operationId": "nsk_v1_bookings_recordLocator_journey_put",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "moveJourneyRequest",
          "description": "The move journey request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveJourneyRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/{recordLocator}/notification": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Sends itinerary notification.",
        "description": "Itinerary will be sent using the method set on the contact's distributionOption field.\n            ",
        "operationId": "nsk_v2_bookings_recordLocator_notification_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator of the booking.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "201": {
            "description": "HTTP Created status if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/passengers/{passengerKey}/seats/{unitKey}": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Agent only.\nAdds a seat assignment to a specific passenger on a booking.",
        "description": "Agent only.\nThis endpoint actively checks whether the passenger has a seat. If the passenger does\nhave a seat, it will delete the current seat the passenger occupies and add the requested\none. This may result in slightly slower response times.\n            ",
        "operationId": "nsk_v1_bookings_recordLocator_passengers_passengerKey_seats_unitKey_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "The unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The add seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUnitStatelessConfig"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Agent only.\nDeletes a seat assignment from a specific passenger on a booking.",
        "description": "Agent only.",
        "operationId": "nsk_v1_bookings_recordLocator_passengers_passengerKey_seats_unitKey_delete",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "passengerKey",
            "in": "path",
            "required": true,
            "description": "The passenger key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "unitKey",
            "in": "path",
            "required": true,
            "description": "The unique unit key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The delete seat request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUnitStatelessConfig"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/{recordLocator}/queues/{queueCode}": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the details for the booking queues of a specific booking.",
        "operationId": "nsk_v1_bookings_recordLocator_queues_queueCode_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "queueCode",
            "in": "path",
            "required": true,
            "description": "The queue code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The booking queue request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingQueue"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Removes the checkin status of passengers for a specific journey stateless.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_journey_journeyKey_delete",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking record locator to look up the journey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/bookings/checkin/{recordLocator}/journey/{journeyKey}": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Checks in a collection of passengers to a specific journey stateless.",
        "operationId": "nsk_v3_bookings_checkin_recordLocator_journey_journeyKey_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking record locator to look up the journey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key of the journey to check into.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequestv3"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Ok if checkin was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}/requirements": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the checkin pre-validation requirements for a specific journey.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_journey_journeyKey_requirements_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator of the booking.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key to be pre validate checkin with.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The checkin validation requirements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCheckinRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/journey/{journeyKey}/status": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the passengers lift status stateless for a specific journey based on the record locator.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_journey_journeyKey_status_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator in reference to the journey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key in reference.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger lift statuses for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfCheckinPassengerLiftStatus"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Removes the checkin status of passengers for a specific journey's segment stateless.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_segment_segmentKey_delete",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking record locator to look up the journeys segment.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/bookings/checkin/{recordLocator}/segment/{segmentKey}": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Checks in a collection of passengers to a specific journeys segment stateless.",
        "operationId": "nsk_v3_bookings_checkin_recordLocator_segment_segmentKey_post",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The booking record locator to look up the journeys segment.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key of the segment to check into.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The checkin passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckinPassengersRequestv3"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Ok if checkin was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}/requirements": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the checkin pre-validation requirements for a specific bookings journeys segment.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_segment_segmentKey_requirements_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator of the booking.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key to pre validate checkin with.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The checkin validation requirements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCheckinRequirements"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/checkin/{recordLocator}/segment/{segmentKey}/status": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Gets the passengers lift status stateless for a specific segment based on the record locator.",
        "operationId": "nsk_v1_bookings_checkin_recordLocator_segment_segmentKey_status_get",
        "parameters": [
          {
            "name": "recordLocator",
            "in": "path",
            "required": true,
            "description": "The record locator in reference to the journey.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key in reference.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of passenger lift statuses for the journey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndIListOfCheckinPassengerLiftStatus"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/queues/{bookingQueueKey}": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Removes a booking from the specified booking queue item.",
        "operationId": "nsk_v1_bookings_queues_bookingQueueKey_delete",
        "parameters": [
          {
            "name": "bookingQueueKey",
            "in": "path",
            "required": true,
            "description": "The unique key of the booking queue to dequeue from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request for the dequeue operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueDeleteByKeyRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/queues/{queueCode}/items": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the booking queue items associated with the queue code.",
        "operationId": "nsk_v1_bookings_queues_queueCode_items_get",
        "parameters": [
          {
            "name": "queueCode",
            "in": "path",
            "required": true,
            "description": "The queue code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "SubQueueCode",
            "in": "query",
            "description": "The sub queue code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "The start date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 4
          },
          {
            "name": "QueueEventType",
            "in": "query",
            "description": "The queue event type.\n             \nEnumeration values: 0 = Default, 1 = BookingBalanceDue, 2 = BookingNegativeBalance, 3 = BookingCustomerComment, 4 = DeclinedPaymentInitial, 5 = DeclinedPaymentChange, 6 = FareOverride, 7 = ScheduleTimeChange, 8 = ScheduleTimeChangeMisconnect, 9 = ScheduleCancellation, 10 = FlightDesignatorChange, 11 = ReaccommodationMove, 12 = GdsCancelWithPendingPayment, 13 = InvalidPriceStatusOverride, 14 = FareRestrictionOverride, 15 = HeldBookings, 16 = InvalidPriceStatus, 17 = Watchlist, 18 = NonFlightServiceFee, 19 = NotAllTicketNumbersReceived, 20 = BookingSegmentOversold, 21 = ReaccommodationCancel, 22 = ExternalSsrAutoConfirmed, 23 = OpCarrierSegUpdate, 24 = OpCarrierSsrUpdate, 25 = OpCarrierOtherUpdate, 26 = NameChangeNotAllowed, 27 = InboundAscNotProcessed, 28 = OpCarrierInformationChange, 29 = BookingComponentUpdate, 30 = GroupBookings, 31 = BankDirectPnrOutOfBalance, 32 = NoSeatAssigned, 33 = SeatNumberChange, 34 = SsrNotSupportedOnNewSeat, 35 = FewerSeatPreferencesMetOnNewSeat, 36 = AosUnableToConfirmCancel, 37 = ETicketIssue, 38 = ETicketFollowup, 39 = InvoluntaryFlyAhead, 40 = ManualClearanceOnOutage, 41 = UnbalancedPoints, 42 = OpCarrierTimeChange, 43 = OaCarrierTimeChange, 44 = VoluntaryFlightChange, 45 = InvoluntaryFlightChange, 46 = HoldCancellationFailed, 47 = ScheduleTimeChangeWithDynamicQueueCode, 48 = ReaccommodationMoveWithDynamicQueueCode, 49 = ItineraryIntegrity, 50 = ReducePartyNotProcessed, 51 = CheckedPassengerUpdate, 52 = MustBeSeatGroupViolation, 57 = NameChangeWithinRule, 58 = IncompletePassengerEMDCoupon, 59 = ASVCUpdateFailed, 60 = FailedFareClassRealignment, 61 = ScheduleTimeChangeMisconnectBelowMinimum, 62 = ScheduleTimeChangeMisconnectAboveMaximum, 63 = OpCarrierMisconnect, 64 = InventoryQueuing, 65 = SelfServiceAsm, 66 = SelfServiceDelay, 67 = SelfServiceFlightCancellation, 68 = SelfServiceIrop, 69 = SelfServiceScheduleChange, 70 = SelfServiceTimeChange, 71 = AosAddOrCancelNotSuccessful, 72 = MissingGdsFareFamily, 73 = ChangeCabinQueue",
            "schema": {
              "$ref": "#/components/schemas/QueueEventType"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfRetrieveBookingQueueResponseItem"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/quote": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves a itinerary quote based on the request.",
        "description": "Although this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.\nItinerary is a stateless booking and not tied to the logged in user.\n            ",
        "operationId": "nsk_v2_bookings_quote_post",
        "requestBody": {
          "x-name": "request",
          "description": "The itinerary quote request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItineraryQuoteRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Itinerary returned OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfItineraryQuote"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByAgency": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by agency.",
        "operationId": "nsk_v2_bookings_searchByAgency_get",
        "parameters": [
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Whether or not to do a phonetic search of the last name.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByAgent": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by agent.",
        "operationId": "nsk_v2_bookings_searchByAgent_get",
        "parameters": [
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0
            },
            "x-position": 1
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Whether or not to do a phonetic search.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByAgentCode": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by the agent code.",
        "operationId": "nsk_v2_bookings_searchByAgentCode_get",
        "parameters": [
          {
            "name": "AgentCode",
            "in": "query",
            "description": "The agent code (name) that created the booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "DomainCode",
            "in": "query",
            "description": "The domain code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 5,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Whether or not to do a phonetic search.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 13
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByBagTag": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by baggage tag.",
        "operationId": "nsk_v2_bookings_searchByBagTag_get",
        "parameters": [
          {
            "name": "BagTag",
            "in": "query",
            "description": "One of the OS tag number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartUtc",
            "in": "query",
            "description": "The OS tag start date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "EndUtc",
            "in": "query",
            "description": "The OS tag end date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByContact": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by contact.",
        "operationId": "nsk_v2_bookings_searchByContact_get",
        "parameters": [
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PhoneNumber",
            "in": "query",
            "description": "One of the applied phone numbers to a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address of a contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 266,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByContactCustomerNumber": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by contact customer number.",
        "operationId": "nsk_v2_bookings_searchByContactCustomerNumber_get",
        "parameters": [
          {
            "name": "ContactCustomerNumber",
            "in": "query",
            "description": "One of the contacts customer number applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByCreditCard": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by credit card number.",
        "operationId": "nsk_v2_bookings_searchByCreditCard_get",
        "parameters": [
          {
            "name": "CreditCardNumber",
            "in": "query",
            "description": "The digits of one of the credit card number applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 34,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByCustomerNumber": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by customer number.",
        "operationId": "nsk_v2_bookings_searchByCustomerNumber_get",
        "parameters": [
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "One of the contacts customer number applied.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByDate": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by date.",
        "operationId": "nsk_v2_bookings_searchByDate_get",
        "parameters": [
          {
            "name": "StartDateUtc",
            "in": "query",
            "description": "The booking date start search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EndDateUtc",
            "in": "query",
            "description": "The booking date end search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByDocument": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by document.",
        "operationId": "nsk_v2_bookings_searchByDocument_get",
        "parameters": [
          {
            "name": "Document.DocumentNumber",
            "in": "query",
            "description": "One of the passengers applied travel document number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 35,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Document.DocumentTypeCode",
            "in": "query",
            "description": "One of the passengers applied travel document type code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByEmail": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by email.",
        "operationId": "nsk_v2_bookings_searchByEmail_get",
        "parameters": [
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address of a contact.\n            ",
            "schema": {
              "type": "string",
              "format": "email",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Whether or not to do a phonetic search.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByLastName": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by last name.",
        "operationId": "nsk_v2_bookings_searchByLastName_get",
        "parameters": [
          {
            "name": "LastName",
            "in": "query",
            "description": "The last name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The first name of a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Whether or not to do a phonetic search.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByPhone": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by phone.",
        "operationId": "nsk_v2_bookings_searchByPhone_get",
        "parameters": [
          {
            "name": "PhoneNumber",
            "in": "query",
            "description": "One of the applied phone numbers to a passenger or contact.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Filters.PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Filters.LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Filters.FlightNumber",
            "in": "query",
            "description": "Filter by the flight number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Filters.DepartureDate",
            "in": "query",
            "description": "The first journeys departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Filters.Destination",
            "in": "query",
            "description": "Filter by the destination code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Filters.Origin",
            "in": "query",
            "description": "Filter by the departure code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Filters.SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Filters.OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "Filters.SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByRecordLocator": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by record locator.",
        "operationId": "nsk_v2_bookings_searchByRecordLocator_get",
        "parameters": [
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/bookings/searchByReferenceNumber": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by reference number. The reference number is used as identifier by\nNew Skies Rail customers for purposes of ticketing and check in.",
        "operationId": "nsk_v2_bookings_searchByReferenceNumber_get",
        "parameters": [
          {
            "name": "ReferenceNumber",
            "in": "query",
            "description": "The reference number, used as an identifier by New Skies Rail customers  for purposes\nof ticketing and check in.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "The organization code associated with the agent who created the booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Whether or not to search the booking archive.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "The booking response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/bookings/searchByThirdPartyRecordLocator": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Find booking by a third party record locator.",
        "operationId": "nsk_v3_bookings_searchByThirdPartyRecordLocator_get",
        "parameters": [
          {
            "name": "SystemCode",
            "in": "query",
            "description": "The system code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AgentId",
            "in": "query",
            "description": "The agent identifier.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "OrganizationCode represents the organization associated with the agent who created\nthe booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "Record locator being requested.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return for the request.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last booking index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "SourceOrganization",
            "in": "query",
            "description": "Filter by the organization associated with the booking. For example the\ntravel agency associated with this booking.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "OrganizationGroupCode",
            "in": "query",
            "description": "Filter by the organization group code to find.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "The booking response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bookings/watchList/{bookingKey}": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Retrieves the watch list for a specific booking.",
        "operationId": "nsk_v1_bookings_watchList_bookingKey_get",
        "parameters": [
          {
            "name": "bookingKey",
            "in": "path",
            "required": true,
            "description": "The booking key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfWatchListResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bundles/applications/{bundleApplicationKey}/details": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieves a specific bundle application's details.",
        "description": "See api/nsk/v1/resources/bundles/applications to retrieve the collection of\nbundle application resources.\n            ",
        "operationId": "nsk_v1_bundles_applications_bundleApplicationKey_details_get",
        "parameters": [
          {
            "name": "bundleApplicationKey",
            "in": "path",
            "required": true,
            "description": "The bundle application key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBundleApplicationDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bundles/rules/{bundleRuleCode}/details": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieves the list of bundle applications associated with\nthe bundle rule.",
        "description": "See api/nsk/v1/resources/bundles/rules to retrieve the collection of\nbundle rule resources.\n            ",
        "operationId": "nsk_v1_bundles_rules_bundleRuleCode_details_get",
        "parameters": [
          {
            "name": "bundleRuleCode",
            "in": "path",
            "required": true,
            "description": "The bundle rule code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleApplication"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/bundles/sets/{bundleSetCode}/details": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieves the list of bundle codes associated with the bundle set.",
        "description": "See api/nsk/v1/resources/bundles/sets to retrieve the collection of\nbundle set resources.\n            ",
        "operationId": "nsk_v1_bundles_sets_bundleSetCode_details_get",
        "parameters": [
          {
            "name": "bundleSetCode",
            "in": "path",
            "required": true,
            "description": "The bundle set code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBundleSetDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/collection/{accountCollectionKey}/transactions": {
      "get": {
        "tags": [
          "collection"
        ],
        "summary": "Retrieves the credit transactions based on the account collection key and\nthe request data.",
        "operationId": "nsk_v1_collection_accountCollectionKey_transactions_get",
        "parameters": [
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/contacts/searchByPhoneNumber": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Gets the latest contact in a booking with a specific phone number.",
        "operationId": "nsk_v1_contacts_searchByPhoneNumber_get",
        "parameters": [
          {
            "name": "PhoneNumber",
            "in": "query",
            "description": "The phone number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 4,
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfContact"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/currency/converter": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Calculates currency conversions.",
        "operationId": "nsk_v1_currency_converter_get",
        "parameters": [
          {
            "name": "FromCurrencyCode",
            "in": "query",
            "description": "The currency code that the amount is currently in.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ToCurrencyCode",
            "in": "query",
            "description": "The currency code we want the amount converted to.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Amount",
            "in": "query",
            "description": "The amount to be converted. This will be in the FromCurrencyCode currency.\n            ",
            "schema": {
              "type": "number",
              "format": "decimal",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCurrencyConversion"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/eTickets/{eTicketNumber}": {
      "get": {
        "tags": [
          "eTickets"
        ],
        "summary": "Retrieves the passenger's e-ticket and its details by providing the ticket number,\nhosted carrier code and the alternate carrier code from the e-ticket database\nif the ticket is OA validated (issued by the other airline not by the hosted carrier).",
        "operationId": "nsk_v2_eTickets_eTicketNumber_get",
        "parameters": [
          {
            "name": "eTicketNumber",
            "in": "path",
            "required": true,
            "description": "The e-ticket number.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "HostedCarrierCode",
            "in": "query",
            "description": "The hosted carrier code. If not provided, the hosted carrier code will be retrieved internally.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "AlternateCarrierCode",
            "in": "query",
            "description": "The alternate carrier code. This is required if the ticket is issued by another airline.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfETicketResponsev2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/eTickets/{eTicketNumber}/coupons": {
      "get": {
        "tags": [
          "eTickets"
        ],
        "summary": "Retrieves all coupons associated with the e-ticket.",
        "operationId": "nsk_v1_eTickets_eTicketNumber_coupons_get",
        "parameters": [
          {
            "name": "eTicketNumber",
            "in": "path",
            "required": true,
            "description": "The e-ticket number.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "HostedCarrierCode",
            "in": "query",
            "description": "The hosted carrier code. If not provided, the hosted carrier code will be retrieved internally.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "AlternateCarrierCode",
            "in": "query",
            "description": "The alternate carrier code. This is required if the ticket is issued by another airline.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfETicketCoupon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/eTickets/{eTicketNumber}/coupons/{couponNumber}": {
      "get": {
        "tags": [
          "eTickets"
        ],
        "summary": "Retrieves a single coupon associated with the e-ticket.",
        "operationId": "nsk_v1_eTickets_eTicketNumber_coupons_couponNumber_get",
        "parameters": [
          {
            "name": "eTicketNumber",
            "in": "path",
            "required": true,
            "description": "The e-ticket number.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "couponNumber",
            "in": "path",
            "required": true,
            "description": "The e-ticket coupon number.",
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "HostedCarrierCode",
            "in": "query",
            "description": "The hosted carrier code. If not provided, the hosted carrier code will be retrieved internally.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "AlternateCarrierCode",
            "in": "query",
            "description": "The alternate carrier code. This is required if the ticket is issued by another airline.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfETicketCoupon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/eTickets/{eTicketNumber}/coupons/{couponNumber}": {
      "put": {
        "tags": [
          "eTickets"
        ],
        "summary": "Updates a coupon contained in an e-ticket.",
        "operationId": "nsk_v2_eTickets_eTicketNumber_coupons_couponNumber_put",
        "parameters": [
          {
            "name": "eTicketNumber",
            "in": "path",
            "required": true,
            "description": "The e-ticket number to update.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "couponNumber",
            "in": "path",
            "required": true,
            "description": "The coupon number to update",
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The e-ticket coupon update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateETicketCouponRequestBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUpdateETicketCouponResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/fareRules/{fareAvailabilityKey}": {
      "get": {
        "tags": [
          "fareRules"
        ],
        "summary": "Gets the fare rules from the server based on a fare availability key.",
        "description": "Note that this defaults to returning the fare rules in html format. The html format may not be entirely culture\nsensitive,\nso setting the convertToHtml flag to false will allow users some flexibility when converting the content and the\nfare rules\nwill be returned as an rtf string.\n            ",
        "operationId": "nsk_v1_fareRules_fareAvailabilityKey_get",
        "parameters": [
          {
            "name": "fareAvailabilityKey",
            "in": "path",
            "required": true,
            "description": "The unique fare availability key to get rules for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "convertToHtml",
            "in": "query",
            "description": "Whether to convert to html. Defaults to true.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The fare rules.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFareRule"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/fareRules/category50/journeys/{journeyKey}/segments/{segmentKey}": {
      "post": {
        "tags": [
          "fareRules"
        ],
        "summary": "Get the category 50 fare rule information after an availability call.",
        "description": "This is functionally a GET but POST is used to reduce URL length overhead.\n            ",
        "operationId": "nsk_v1_fareRules_category50_journeys_journeyKey_segments_segmentKey_post",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "segmentKey",
            "in": "path",
            "required": true,
            "description": "The segment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The category 50 request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category50Request"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCategory50Response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/graph/{queryName}": {
      "post": {
        "tags": [
          "graph"
        ],
        "summary": "Invokes a graph query configured in utilities.",
        "description": "When a graph query is configured on the server under Resource Management it allows your payload sizes to be even\nsmaller.\n            ",
        "operationId": "nsk_v1_graph_queryName_post",
        "parameters": [
          {
            "name": "queryName",
            "in": "path",
            "required": true,
            "description": "The query name matching your resource management configuration.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cachedResults",
            "in": "query",
            "description": "True to return cached results.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "variables",
          "description": "The json matching your json variables in your graph query.",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The graph json response.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Performs the dotREZ NSK API health check.",
        "description": "    This endpoint does not require a token.\n    \n        If the health check returns an overall status of \"Ok\", the expected HTTP status code response would be a\n        \"200 - Ok\".\n    \n    \n        If the health check returns an overall status of \"Warning\", the expected HTTP status code response would be\n        a \"299\".  This is a custom code not typically mapped as per industry\n        standards, and was done intentionally to indicate a warning response from the health endpoint.\n    \n    \n        If the health check returns an overall status of \"Error\", the expected HTTP status code response would be\n        a \"500 - InternalServerError\".\n    \n\n            ",
        "operationId": "nsk_v1_health_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentHealth"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentHealth"
                }
              }
            }
          },
          "299": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentHealth"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/manifest": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets the manifest trip information response list for the specified\nmanifest trip information search request.",
        "operationId": "nsk_v2_manifest_get",
        "parameters": [
          {
            "name": "Origin",
            "in": "query",
            "description": "The departure station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The arrival station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Identifier",
            "in": "query",
            "description": "The transportation identifier, such as a flight number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CarrierCode",
            "in": "query",
            "description": "The carrier code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "FlightType",
            "in": "query",
            "description": "The flight type.\n             \nEnumeration values: 0 = All, 1 = NonStop, 2 = Through, 3 = Direct, 4 = Connect",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/OperationsFlightType"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The manifest trip information search results model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTripInformationResponsev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/manifest/{legKey}": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets the manifest for the specified leg.",
        "operationId": "nsk_v1_manifest_legKey_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The manifest leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The manifest model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfManifestLight"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/manifest/{legKey}/bookings": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets the manifest bookings data for the specified leg.",
        "operationId": "nsk_v1_manifest_legKey_bookings_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The manifest leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The manifest model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIDictionaryOfStringAndManifestBookings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/manifest/{legKey}/passengerDetails": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets the passenger details for the specified leg.",
        "operationId": "nsk_v2_manifest_legKey_passengerDetails_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The passenger details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerDetailsv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/manifest/{legKey}/passengerSeatAssignments": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets a list of seat assignment reports for the specified leg.",
        "operationId": "nsk_v1_manifest_legKey_passengerSeatAssignments_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of seat assignment reports.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerSeatAssignment"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/manifest/{legKey}/ssrs": {
      "get": {
        "tags": [
          "manifest"
        ],
        "summary": "Gets the manifest SSRs for the specified leg.",
        "operationId": "nsk_v1_manifest_legKey_ssrs_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The manifest leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "includeNonOriginSsrs",
            "in": "query",
            "description": "Include SSRs associated to other legs or segments from the requested leg.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The manifest model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfManifestSsr"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Retrieves a collection of messages based on search criteria.",
        "operationId": "nsk_v1_messages_get",
        "parameters": [
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The index of the last set of records retrieved when paging.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "MessageTypeCode",
            "in": "query",
            "description": "The message type code to search for.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "SearchStartDate",
            "in": "query",
            "description": "The start of created date range to search for.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SearchEndDate",
            "in": "query",
            "description": "The end of created date range to search for.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of records to return when paging.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "The search query.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "SearchType",
            "in": "query",
            "description": "The type of search to be performed.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "$ref": "#/components/schemas/SearchType"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "The message items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfMessageBase"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Adds a new message item.",
        "operationId": "nsk_v1_messages_post",
        "requestBody": {
          "x-name": "request",
          "description": "The message queue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageBase"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The message queue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Deletes a collection of message items.",
        "description": "This endpoint does not perform additional verification that the messages were deleted.\nAs long as there are no errors or exceptions, the delete operation is considered successful.\nA separate call to the GET `/api/nsk/v1/messages` endpoint can be made to verify that all the\nspecified messages do not exist anymore.\n            ",
        "operationId": "nsk_v1_messages_delete",
        "requestBody": {
          "x-name": "messageKeys",
          "description": "The collection of message keys to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/messages/{messageKey}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Retrieves a specific message item.",
        "operationId": "nsk_v1_messages_messageKey_get",
        "parameters": [
          {
            "name": "messageKey",
            "in": "path",
            "required": true,
            "description": "The key of the message to be retrieved.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The message item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfMessageBase"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Deletes a message item.",
        "operationId": "nsk_v1_messages_messageKey_delete",
        "parameters": [
          {
            "name": "messageKey",
            "in": "path",
            "required": true,
            "description": "The key of the message to delete.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/messages/teletype": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Adds a new generic teletype message item.",
        "operationId": "nsk_v1_messages_teletype_post",
        "requestBody": {
          "x-name": "request",
          "description": "The generic teletype message request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericTeletypeMessageRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The message queue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/oneTimeTravelNotifications": {
      "post": {
        "tags": [
          "oneTimeTravelNotifications"
        ],
        "summary": "Creates a one time travel notification.",
        "description": "To get or delete a one time notification, you will need to store the key that is on the location header.\n            ",
        "operationId": "nsk_v1_oneTimeTravelNotifications_post",
        "requestBody": {
          "x-name": "request",
          "description": "The passenger travel notification create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeNotificationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/oneTimeTravelNotifications/{oneTimeTravelNotificationKey}": {
      "get": {
        "tags": [
          "oneTimeTravelNotifications"
        ],
        "summary": "Gets a one time travel notification.",
        "operationId": "nsk_v1_oneTimeTravelNotifications_oneTimeTravelNotificationKey_get",
        "parameters": [
          {
            "name": "oneTimeTravelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The one time travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOneTimeTravelNotification"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "oneTimeTravelNotifications"
        ],
        "summary": "Deletes a one time travel notification.",
        "operationId": "nsk_v1_oneTimeTravelNotifications_oneTimeTravelNotificationKey_delete",
        "parameters": [
          {
            "name": "oneTimeTravelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The one time travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizationGroups/{organizationGroupCode}": {
      "post": {
        "tags": [
          "organizationGroups"
        ],
        "summary": "Creates a new organization group.",
        "operationId": "nsk_v1_organizationGroups_organizationGroupCode_post",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationGroupDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organizationGroups"
        ],
        "summary": "Modifies an organization group by updating the group name or adding an organization to the organization group.",
        "operationId": "nsk_v1_organizationGroups_organizationGroupCode_put",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationGroupDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizationGroups"
        ],
        "summary": "Deletes an organization group.\nThis should not be used if the organization group needs to exist.",
        "operationId": "nsk_v1_organizationGroups_organizationGroupCode_delete",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizationGroups/{organizationGroupCode}/organizations": {
      "put": {
        "tags": [
          "organizationGroups"
        ],
        "summary": "Updates an organization group by removing all organizations",
        "operationId": "nsk_v1_organizationGroups_organizationGroupCode_organizations_put",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationGroupDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizationGroups/{organizationGroupCode}/organizations/{organizationCode}": {
      "put": {
        "tags": [
          "organizationGroups"
        ],
        "summary": "Updates an organization group by removing an organization",
        "operationId": "nsk_v1_organizationGroups_organizationGroupCode_organizations_organizationCode_put",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationGroupDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations/groups": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Retrieves the organization groups.",
        "operationId": "nsk_v1_organizations_groups_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfOrganizationGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations/groups/{organizationGroupCode}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Retrieves the details of an organization group.",
        "operationId": "nsk_v1_organizations_groups_organizationGroupCode_get",
        "parameters": [
          {
            "name": "organizationGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationGroupDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Create a new organization.",
        "description": "Requires agent permissions.\nThe organization code is a generic code for all of the organization types. Each individual type has its own code\nand validation.\nIf the organization status is not pending the organization code should follow these validation rules based on type:\n\n    Third Party: 3 to 10 characters in length with alphanumeric values.\n    Travel Agency: 7 to 10 characters in length with numeric values.\n    Carrier: 2 to 3 characters in length with alphanumeric values.\n\nIf no organization code is provided then one will be generated and returned on the header.\n            ",
        "operationId": "nsk_v1_organizations2_post",
        "requestBody": {
          "x-name": "createRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/organizations2": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Searches for organizations.",
        "operationId": "nsk_v2_organizations2_get",
        "parameters": [
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "The organization code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Organization type.\n             \nEnumeration values: 0 = Default, 1 = Master, 2 = Carrier, 3 = TravelAgency, 4 = ThirdParty",
            "schema": {
              "$ref": "#/components/schemas/OrganizationType"
            },
            "x-position": 2
          },
          {
            "name": "Status",
            "in": "query",
            "description": "The organization status.\n             \nEnumeration values: 0 = Default, 1 = Active, 2 = Cancelled, 3 = Pending",
            "schema": {
              "$ref": "#/components/schemas/OrganizationStatus"
            },
            "x-position": 3
          },
          {
            "name": "ParentOrganizationCode",
            "in": "query",
            "description": "The parent organization code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CompanyName",
            "in": "query",
            "description": "The organization company name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "City",
            "in": "query",
            "description": "The organization company city.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "PostalCode",
            "in": "query",
            "description": "The organization company postal code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "PagedItemIndex",
            "in": "query",
            "description": "Used to specify the index for skipping values when paging.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the maximum results to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "MatchCriteria.OrganizationCode",
            "in": "query",
            "description": "The type of string search for organization code.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 10
          },
          {
            "name": "MatchCriteria.ParentOrganizationCode",
            "in": "query",
            "description": "The  type of string search for parent organization code.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 11
          },
          {
            "name": "MatchCriteria.CompanyName",
            "in": "query",
            "description": "The  type of string search for organization company name.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 12
          },
          {
            "name": "MatchCriteria.City",
            "in": "query",
            "description": "The  type of string search for organization company city.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 13
          },
          {
            "name": "MatchCriteria.PostalCode",
            "in": "query",
            "description": "The  type of string search for organization company postal code.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The organization records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfOrganizationRecord"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Retrieves the organization.",
        "operationId": "nsk_v1_organizations2_organizationCode_get",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationv2"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organizations2"
        ],
        "summary": "Updates an organization.",
        "description": "Requires agent permissions.\nThe organization code is a generic code for all of the organization types. Each individual type has its own code\nand validation.\nIf the organization status is not pending the organization code should follow these validation rules based on type:\n\n    Third Party: 3 to 10 characters in length with alphanumeric values.\n    Travel Agency: 7 to 10 characters in length with numeric values.\n    Carrier: 2 to 3 characters in length with alphanumeric values.\n\n            ",
        "operationId": "nsk_v1_organizations2_organizationCode_put",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "organizations2"
        ],
        "summary": "Updates an organization.",
        "description": "Requires agent permissions.\nThe organization code is a generic code for all of the organization types. Each individual type has its own code\nand validation.\nIf the organization status is not pending the organization code should follow these validation rules based on type:\n\n    Third Party: 3 to 10 characters in length with alphanumeric values.\n    Travel Agency: 7 to 10 characters in length with numeric values.\n    Carrier: 2 to 3 characters in length with alphanumeric values.\n\n            ",
        "operationId": "nsk_v1_organizations2_organizationCode_patch",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "createRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfOrganizationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/account": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Retrieves the organization account and collections based on the organization code.",
        "operationId": "nsk_v1_organizations2_organizationCode_account_get",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Creates an organization account based on the organization code.",
        "operationId": "nsk_v1_organizations2_organizationCode_account_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create organization account request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationAccountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/account/childAccountTransactions": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Adjust the available amount of a child account.",
        "description": "The known list of parent-child relations are as follows:\n- Dependent accounts are not supported.\n- A parent's account of type credit may have children of type supplemental or credit.\n- A parent's account of type prepaid may have children of type prepaid.\n- No other combination of parent-child relations are supported.\n            ",
        "operationId": "nsk_v1_organizations2_organizationCode_account_childAccountTransactions_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The account reference number for the child organization.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The child account transaction request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChildAccountTransactionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organizations2"
        ],
        "summary": "Adjust the credit limit of a child account.",
        "description": "The known list of parent-child relations are as follows:\n- Dependent accounts are not supported.\n- A parent's account of type credit may have children of type supplemental or credit.\n- A parent's account of type prepaid may have children of type prepaid.\n- No other combination of parent-child relations are supported.\n            ",
        "operationId": "nsk_v1_organizations2_organizationCode_account_childAccountTransactions_put",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The account reference number for the child organization.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The child account transaction request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChildAccountTransactionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/account/status": {
      "put": {
        "tags": [
          "organizations2"
        ],
        "summary": "Updates the organization account status.",
        "operationId": "nsk_v1_organizations2_organizationCode_account_status_put",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "The allowed account status. \nEnumeration values: 0 = Open, 1 = Closed, 2 = AgencyInactive, 3 = Unknown",
            "schema": {
              "$ref": "#/components/schemas/AccountStatus"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/account/transactions": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Retrieves the organization account transactions based on the organization code\nand data in the request.",
        "operationId": "nsk_v1_organizations2_organizationCode_account_transactions_get",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Creates account transactions based on data in the request and the\norganization code.",
        "operationId": "nsk_v1_organizations2_organizationCode_account_transactions_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "description": "The organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The transaction request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationTransactionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/commissionRates": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Create a commission rate.",
        "operationId": "nsk_v1_organizations2_organizationCode_commissionRates_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCommissionRate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/commissionRates/{commissionRateCode}": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Get a commission rate.",
        "operationId": "nsk_v1_organizations2_organizationCode_commissionRates_commissionRateCode_get",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "commissionRateCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationCommissionRate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations2"
        ],
        "summary": "Delete a commission rate.",
        "operationId": "nsk_v1_organizations2_organizationCode_commissionRates_commissionRateCode_delete",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "commissionRateCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/company/phoneNumbers": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Create a company phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_company_phoneNumbers_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/company/phoneNumbers/{phoneNumberType}": {
      "put": {
        "tags": [
          "organizations2"
        ],
        "summary": "Updates a company phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_company_phoneNumbers_phoneNumberType_put",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": " \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations2"
        ],
        "summary": "Deletes a company phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_company_phoneNumbers_phoneNumberType_delete",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": " \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/contact/phoneNumbers": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Create a contact phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_contact_phoneNumbers_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/contact/phoneNumbers/{phoneNumberType}": {
      "put": {
        "tags": [
          "organizations2"
        ],
        "summary": "Updates a contact phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_contact_phoneNumbers_phoneNumberType_put",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": " \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations2"
        ],
        "summary": "Deletes a contact phone number.",
        "operationId": "nsk_v1_organizations2_organizationCode_contact_phoneNumbers_phoneNumberType_delete",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "phoneNumberType",
            "in": "path",
            "required": true,
            "description": " \nEnumeration values: 0 = Other, 1 = Home, 2 = Work, 3 = Mobile, 4 = Fax",
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/externalAccounts": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Create an external account.",
        "operationId": "nsk_v1_organizations2_organizationCode_externalAccounts_post",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationExternalAccountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/{organizationCode}/externalAccounts/{externalAccountKey}": {
      "get": {
        "tags": [
          "organizations2"
        ],
        "summary": "Get an external account.",
        "operationId": "nsk_v1_organizations2_organizationCode_externalAccounts_externalAccountKey_get",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "externalAccountKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationExternalAccountv2"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations2"
        ],
        "summary": "Delete an external account.",
        "operationId": "nsk_v1_organizations2_organizationCode_externalAccounts_externalAccountKey_delete",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "externalAccountKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/organizations2/register": {
      "post": {
        "tags": [
          "organizations2"
        ],
        "summary": "Requests to register a new organization.",
        "description": "Note: This is only a request. An agent will need to approve the action.\n            ",
        "operationId": "nsk_v1_organizations2_register_post",
        "requestBody": {
          "x-name": "registerRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRegisterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons": {
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new person record (used by agents).",
        "operationId": "nsk_v1_persons_post",
        "requestBody": {
          "x-name": "request",
          "description": "The person create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Location (via header) where to get created person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/persons": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Search person records.",
        "operationId": "nsk_v2_persons_get",
        "parameters": [
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The index of the last paged item.  This can be found on the\nresponse from the previous set of paged results.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Username",
            "in": "query",
            "description": "The person user name to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The person's first name to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The person's last name to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "FirstNameMatching",
            "in": "query",
            "description": "The matching criteria for the person's first name.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 5
          },
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "The person's customer number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "PhoneNumber",
            "in": "query",
            "description": "The phone number to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "EmailAddress",
            "in": "query",
            "description": "The email address to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "ProgramNumber",
            "in": "query",
            "description": "The program number to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "ProgramCode",
            "in": "query",
            "description": "The program code to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "Type",
            "in": "query",
            "description": "The person type to search by.\n             \nEnumeration values: 0 = None, 1 = Customer, 2 = Agent",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/PersonType"
            },
            "x-position": 11
          },
          {
            "name": "NationalIdNumber",
            "in": "query",
            "description": "The national ID number to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "NationalIdNumberMatching",
            "in": "query",
            "description": "The matching criteria for the national ID number.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 13
          },
          {
            "name": "ReturnCount",
            "in": "query",
            "description": "The number of results to return.\n            ",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 14
          },
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Include active person records only.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 15
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of person records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonRecordsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Retrieves a specific person by key.",
        "operationId": "nsk_v1_persons_personKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPerson"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates the person record basic information.",
        "operationId": "nsk_v1_persons_personKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The person edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches the person records basic information.",
        "description": "Only need to send in the data that is being requested to be updated.",
        "operationId": "nsk_v1_persons_personKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The person patch request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a person by setting the record to terminated.",
        "operationId": "nsk_v1_persons_personKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/account": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Retrieves the person account and credits based on the person key.",
        "operationId": "nsk_v1_persons_personKey_account_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates the person account based on the person key and\ndata in the request.",
        "operationId": "nsk_v1_persons_personKey_account_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create account request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/account/collection": {
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates an account collection based on the person key and data in the request.",
        "description": "This endpoint will create a new account collection and a transaction if no account\ntransaction exists or no matching collection is found.  An account collection is unique\nbased on the transaction code and the expiration date.  If a matching account collection\nis found, a transaction for that collection is generated and the account collection will\nbe updated.\nSee /api/nsk/v1/resources/accountTransactionCodes for a list of available account transaction\ncodes.\n            ",
        "operationId": "nsk_v1_persons_personKey_account_collection_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create account collection request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCollectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/account/collection/{accountCollectionKey}/transactions": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Retrieves the person account collection transactions based on the person key,\nthe account collection key, and data in the request.",
        "operationId": "nsk_v1_persons_personKey_account_collection_accountCollectionKey_transactions_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 5
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates an account collection transaction based on the person key, the\naccount collection key, and data in the request.",
        "description": "This endpoint will add a transaction to an existing account collection.\nIf there are no account collections, or the account collection key does\nnot match an existing collection, the request will fail.\nTo add a new account collection, see /api/nsk/v1/persons/{personKey}/account/collection.\n            ",
        "operationId": "nsk_v1_persons_personKey_account_collection_accountCollectionKey_transactions_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The create transaction request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/account/status": {
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates the person account status.",
        "operationId": "nsk_v1_persons_personKey_account_status_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "description": "The new account status. \nEnumeration values: 0 = Open, 1 = Closed, 2 = AgencyInactive, 3 = Unknown",
            "schema": {
              "$ref": "#/components/schemas/AccountStatus"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/account/transactions": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Retrieves all transactions for every collection.",
        "operationId": "nsk_v1_persons_personKey_account_transactions_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/addresses": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of addresses for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/addresses/{personAddressKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_personAddressKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_personAddressKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_personAddressKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_addresses_personAddressKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/affiliations": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets all affiliations for a specific person.",
        "operationId": "nsk_v1_persons_personKey_affiliations_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new affiliation for a specific person.",
        "operationId": "nsk_v1_persons_personKey_affiliations_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/affiliations/{personAffiliationKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific affiliation for a specific person.",
        "operationId": "nsk_v1_persons_personKey_affiliations_personAffiliationKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific affiliation for a specific person.",
        "operationId": "nsk_v1_persons_personKey_affiliations_personAffiliationKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific affiliation for a specific person.",
        "operationId": "nsk_v1_persons_personKey_affiliations_personAffiliationKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/aliases": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of aliases for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of aliases.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new alias for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/aliases/{personAliasKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific alias for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_personAliasKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The alias.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific alias for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_personAliasKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific alias for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_personAliasKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific alias for a specific person.",
        "operationId": "nsk_v1_persons_personKey_aliases_personAliasKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/comments": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of comments for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of comments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonComment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new comment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/comments/{personCommentKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific comment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_personCommentKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonComment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific comment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_personCommentKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific comment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_personCommentKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific comment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_comments_personCommentKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/emails": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of email addresses for a specific person.",
        "operationId": "nsk_v1_persons_personKey_emails_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of email addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new email address for a specific person.",
        "description": "The \"type\" property for the request is a single character.  See the \"/resources/EmailTypes\"\nendpoint for valid email type codes.\n            ",
        "operationId": "nsk_v1_persons_personKey_emails_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/emails/{personEmailAddressKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific email address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_emails_personEmailAddressKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific email address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_emails_personEmailAddressKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific email address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_emails_personEmailAddressKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfEmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific email address for a specific person.",
        "operationId": "nsk_v1_persons_personKey_emails_personEmailAddressKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/information": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets all information from the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new information on the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/information/{personInformationKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific information from the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_personInformationKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific information on the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_personInformationKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific information on the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_personInformationKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific information on the logged in user's person.",
        "operationId": "nsk_v1_persons_personKey_information_personInformationKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/merge": {
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a person by merging the PNRs associated, account information and optionally the customer programs.",
        "description": "If new name is not given the name of the person to be updated will be retained.\n            ",
        "operationId": "nsk_v1_persons_personKey_merge_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person to be updated and merged on to.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestBase",
          "description": "The person merge request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonMergeRequestBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/phoneNumbers": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of phone numbers for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of phone numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new phone number for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/phoneNumbers/{personPhoneNumberKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific phone number for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_personPhoneNumberKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The phone number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific phone number for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_personPhoneNumberKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific phone number for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_personPhoneNumberKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific phone number for a specific person.",
        "operationId": "nsk_v1_persons_personKey_phoneNumbers_personPhoneNumberKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/preferences": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets all preferences for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new preference for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/preferences/{personPreferenceKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific preference for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_personPreferenceKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The preference.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific preference for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_personPreferenceKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific preference for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_personPreferenceKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific preference for a specific person.",
        "operationId": "nsk_v1_persons_personKey_preferences_personPreferenceKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/programs": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of programs for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of programs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new program for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/programs/{personProgramKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific program for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_personProgramKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The program.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific program for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_personProgramKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific program for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_personProgramKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific program for a specific person.",
        "operationId": "nsk_v1_persons_personKey_programs_personProgramKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/storedPayments": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of stored payments for a specific person.",
        "operationId": "nsk_v1_persons_personKey_storedPayments_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of stored payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new stored payment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_storedPayments_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/storedPayments/{personStoredPaymentKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific stored payment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_storedPayments_personStoredPaymentKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The stored payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific stored payment for a specific person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v1_persons_personKey_storedPayments_personStoredPaymentKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific stored payment for a specific person.",
        "operationId": "nsk_v1_persons_personKey_storedPayments_personStoredPaymentKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/persons/{personKey}/storedPayments/{personStoredPaymentKey}": {
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific stored payment for a specific person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v2_persons_personKey_storedPayments_personStoredPaymentKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelDocuments": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets the collection of travel documents for a specific person.",
        "operationId": "nsk_v1_persons_personKey_travelDocuments_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of travel documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a new travel document for a specific person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v1_persons_personKey_travelDocuments_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonTravelDocumentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelDocuments/{personTravelDocumentKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a specific travel document for a specific person.",
        "operationId": "nsk_v1_persons_personKey_travelDocuments_personTravelDocumentKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a specific travel document for a specific person.",
        "operationId": "nsk_v1_persons_personKey_travelDocuments_personTravelDocumentKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/persons/{personKey}/travelDocuments/{personTravelDocumentKey}": {
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a specific travel document for a specific person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_persons_personKey_travelDocuments_personTravelDocumentKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a specific travel document for a specific person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_persons_personKey_travelDocuments_personTravelDocumentKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets person travel notifications for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications/{travelNotificationKey}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "persons"
        ],
        "summary": "Patches a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_patch",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The delta mapper travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications/{travelNotificationKey}/events": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets notification events for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_events_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a notification event for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_events_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification event create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications/{travelNotificationKey}/events/{eventType}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a notification event for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_events_eventType_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a notification event from a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_events_eventType_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The notification event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications/{travelNotificationKey}/timedEvents": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets notification timed events for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_timedEvents_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Creates a notification timed event for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_timedEvents_post",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification timed even create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/persons/{personKey}/travelNotifications/{travelNotificationKey}/timedEvents/{timedEventType}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Gets a notification timed event for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates a notification timed event for a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_put",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The updated notification timed event request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a notification timed event from a person travel notification for a person.",
        "operationId": "nsk_v1_persons_personKey_travelNotifications_travelNotificationKey_timedEvents_timedEventType_delete",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "description": "The person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/promotions": {
      "get": {
        "tags": [
          "promotions"
        ],
        "summary": "Gets promotions based on data in the request.",
        "operationId": "nsk_v1_promotions_get",
        "parameters": [
          {
            "name": "PromotionCode",
            "in": "query",
            "description": "The promotion code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 8,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "The organization code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EffectiveDate",
            "in": "query",
            "description": "The effective date of the promotion.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The requested culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PromotionCodeMatching",
            "in": "query",
            "description": "The matching criteria for the promotion code, by default if not set the criteria will be an exact match.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 5
          },
          {
            "name": "OrganizationCodeMatching",
            "in": "query",
            "description": "The matching criteria for the organization code, by default if not set the criteria will be an exact match.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of promotions, or null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPromotionBase"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/promotions/{promotionCode}": {
      "get": {
        "tags": [
          "promotions"
        ],
        "summary": "Gets a promotion based on the promotion code.",
        "operationId": "nsk_v1_promotions_promotionCode_get",
        "parameters": [
          {
            "name": "promotionCode",
            "in": "path",
            "required": true,
            "description": "The promotion code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The promotion, or null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPromotion"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/promotions/{promotionCode}/validate": {
      "get": {
        "tags": [
          "promotions"
        ],
        "summary": "Evaluates a promotion code and optional organization code to determine if\nthe associated promotion is valid or not.",
        "description": "This validates the promotion code based on the logged-in user if the\norganization code is not provided.\n            ",
        "operationId": "nsk_v1_promotions_promotionCode_validate_get",
        "parameters": [
          {
            "name": "promotionCode",
            "in": "path",
            "required": true,
            "description": "The promotion code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "organizationCode",
            "in": "query",
            "description": "The optional organization code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "True if the promotion code is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/queues/bookings": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "Gets the list of queues available.",
        "description": "This action requires a session token.\n            ",
        "operationId": "nsk_v2_queues_bookings_get",
        "parameters": [
          {
            "name": "QueueName",
            "in": "query",
            "description": "Queue name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "QueueCode",
            "in": "query",
            "description": "Queue code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "QueueCategoryCode",
            "in": "query",
            "description": "Queue category code.\nPlease note that this should be a char and not a string.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The default page size.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastPageIndex",
            "in": "query",
            "description": "Used to specify the index of the last set of records retrieved\nwhen paging is performed. This is optional.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfQueueResults"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/queues/bookings/{bookingQueueCode}/items/{bookingQueueItemKey}": {
      "put": {
        "tags": [
          "queues"
        ],
        "summary": "Moves to a different queue.",
        "description": "The booking queue proxy and service model do not currently support getting the queue code\nthe item was moved to. Therefore, it is not possible at this time to provide a link to\naccess the item on a different queue or a configurable response containing the queue object.\nAdditionally, the proxy and service model do not allow for getting a particular item within a\nqueue.\n            ",
        "operationId": "nsk_v1_queues_bookings_bookingQueueCode_items_bookingQueueItemKey_put",
        "parameters": [
          {
            "name": "bookingQueueCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "bookingQueueItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveBookingQueueItemBase"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "queues"
        ],
        "summary": "Removes booking queue items from the specified queue.",
        "operationId": "nsk_v1_queues_bookings_bookingQueueCode_items_bookingQueueItemKey_delete",
        "parameters": [
          {
            "name": "bookingQueueCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "bookingQueueItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBookingQueueItemBaseRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Http response message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/queues/bookings/{bookingQueueCode}/next": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "Gets the next item in the booking queue.",
        "description": "This will not delete the item from the queue.\nThis action requires a session token.\n            ",
        "operationId": "nsk_v2_queues_bookings_bookingQueueCode_next_get",
        "parameters": [
          {
            "name": "bookingQueueCode",
            "in": "path",
            "required": true,
            "description": "booking queue code to get next item from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "SubQueueCode",
            "in": "query",
            "description": "The optional sub queue code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Begin priority date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End priority date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Password",
            "in": "query",
            "description": "The Password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBookingQueueItemBase"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/queues/bookings/items/{bookingQueueItemKey}": {
      "post": {
        "tags": [
          "queues"
        ],
        "summary": "Places the booking queue item back on the queue.",
        "description": "This is solely to return existing booking queue items that have been dequeued (not deleted)\nvia GET `/api/nsk/v2/queues/bookings/{bookingQueueCode}/next`.\n            ",
        "operationId": "nsk_v2_queues_bookings_items_bookingQueueItemKey_post",
        "parameters": [
          {
            "name": "bookingQueueItemKey",
            "in": "path",
            "required": true,
            "description": "The booking queue item key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object, with password needed to access the queue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingQueueReleaseRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/queues/travel": {
      "post": {
        "tags": [
          "queues"
        ],
        "summary": "Creates a new travel queue entry.",
        "description": "This action requires a session token.\n            ",
        "operationId": "nsk_v1_queues_travel_post",
        "requestBody": {
          "x-name": "item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelQueueItemRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/queues/travel/{travelQueueCode}/next": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "Pops the next item in the travel queue.",
        "description": "This will delete the item from the queue.\nThis action requires a session token.\n            ",
        "operationId": "nsk_v1_queues_travel_travelQueueCode_next_get",
        "parameters": [
          {
            "name": "travelQueueCode",
            "in": "path",
            "required": true,
            "description": "Travel queue code to get next item from.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "subQueueCode",
            "in": "query",
            "description": "Sub queue code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDequeueTravelSummary"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AccountTransactionCodes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of account transaction code resources.",
        "operationId": "nsk_v1_resources_AccountTransactionCodes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfAccountTransactionCode"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AccountTransactionCodes/{transactionCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific account transaction code resource.",
        "operationId": "nsk_v1_resources_AccountTransactionCodes_transactionCode_get",
        "parameters": [
          {
            "name": "transactionCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAccountTransactionCode"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/addOns/locations": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the commerce locations.",
        "operationId": "nsk_v1_resources_addOns_locations_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Type",
            "in": "query",
            "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).\n             \nEnumeration values: 0 = Default, 1 = Insurance, 2 = Activity, 3 = Hotel, 4 = Car",
            "schema": {
              "$ref": "#/components/schemas/ProductTypeCode"
            },
            "x-position": 2
          },
          {
            "name": "VendorCode",
            "in": "query",
            "description": "The specific vendor code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCommerceLocation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/addOns/parameters": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the parameters.",
        "operationId": "nsk_v1_resources_addOns_parameters_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Type",
            "in": "query",
            "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).\n             \nEnumeration values: 0 = Default, 1 = Insurance, 2 = Activity, 3 = Hotel, 4 = Car",
            "schema": {
              "$ref": "#/components/schemas/ProductTypeCode"
            },
            "x-position": 2
          },
          {
            "name": "VendorCode",
            "in": "query",
            "description": "The specific vendor code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfDynamicParameter"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/addOns/participanttypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the participant types.",
        "operationId": "nsk_v1_resources_addOns_participanttypes_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Type",
            "in": "query",
            "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).\n             \nEnumeration values: 0 = Default, 1 = Insurance, 2 = Activity, 3 = Hotel, 4 = Car",
            "schema": {
              "$ref": "#/components/schemas/ProductTypeCode"
            },
            "x-position": 2
          },
          {
            "name": "VendorCode",
            "in": "query",
            "description": "The specific vendor code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfParticipantType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/addOns/sources": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the sources.",
        "operationId": "nsk_v1_resources_addOns_sources_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/addOns/sources/{sourceCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the sources by code.",
        "operationId": "nsk_v1_resources_addOns_sources_sourceCode_get",
        "parameters": [
          {
            "name": "sourceCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/addOns/vendors": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the travel commerce vendors.",
        "operationId": "nsk_v2_resources_addOns_vendors_get",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "description": "The type of search performed (Default = 0, Insurance = 1, Activity = 2, Hotel = 3, Auto = 4).\n             \nEnumeration values: 0 = Default, 1 = Insurance, 2 = Activity, 3 = Hotel, 4 = Car",
            "schema": {
              "$ref": "#/components/schemas/ProductTypeCode"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfVendorv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AddressTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of address type resources.",
        "operationId": "nsk_v1_resources_AddressTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfAddressType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AddressTypes/{addressTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific address type resource.",
        "operationId": "nsk_v1_resources_AddressTypes_addressTypeCode_get",
        "parameters": [
          {
            "name": "addressTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAddressType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AgentSettingTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of agent setting type resources.",
        "operationId": "nsk_v1_resources_AgentSettingTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfAgentSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/AgentSettingTypes/{agentSettingTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific agent setting type resource.",
        "operationId": "nsk_v1_resources_AgentSettingTypes_agentSettingTypeCode_get",
        "parameters": [
          {
            "name": "agentSettingTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique agent setting type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAgentSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Areas": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of area resources.",
        "operationId": "nsk_v1_resources_Areas_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfArea"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Areas/{areaCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific area resource.",
        "description": "See `/api/nsk/v1/resources/areas/{areaCode}/zones` to retrieve the list of geographical zones associated with a\nspecific area.\n            ",
        "operationId": "nsk_v1_resources_Areas_areaCode_get",
        "parameters": [
          {
            "name": "areaCode",
            "in": "path",
            "required": true,
            "description": "The unique area code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The unique culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfArea"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Areas/{areaCode}/zones": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of zones resources.",
        "operationId": "nsk_v1_resources_Areas_areaCode_zones_get",
        "parameters": [
          {
            "name": "areaCode",
            "in": "path",
            "required": true,
            "description": "The unique code of the area to which the zones belong.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfZonev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Areas/{areaCode}/zones/{zoneCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific zone resource.",
        "operationId": "nsk_v1_resources_Areas_areaCode_zones_zoneCode_get",
        "parameters": [
          {
            "name": "areaCode",
            "in": "path",
            "required": true,
            "description": "The unique code of the area to which the zone belongs.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "zoneCode",
            "in": "path",
            "required": true,
            "description": "The unique zone code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfZonev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/BaggageTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of baggage type resources.",
        "operationId": "nsk_v1_resources_BaggageTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBaggageType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/BaggageTypes/{baggageTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific baggage type resource.",
        "operationId": "nsk_v1_resources_BaggageTypes_baggageTypeCode_get",
        "parameters": [
          {
            "name": "baggageTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique baggage type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBaggageType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of bundle configuration resources.",
        "operationId": "nsk_v1_resources_bundles_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles/{bundleCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific bundle configuration based on the bundle code.",
        "operationId": "nsk_v1_resources_bundles_bundleCode_get",
        "parameters": [
          {
            "name": "bundleCode",
            "in": "path",
            "required": true,
            "description": "The bundle code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBundleConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles/applications": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of bundle application resources.",
        "description": "See api/nsk/v1/bundles/application/{bundleApplicationKey}/details to retrieve additional\nbundle application details.  The application details consist of three lists: carrier codes,\nproduct classes, and classes of service.\n            ",
        "operationId": "nsk_v1_resources_bundles_applications_get",
        "parameters": [
          {
            "name": "BundleRuleCode",
            "in": "query",
            "description": "The bundle rule code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleApplication"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles/rules": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of bundle rule resources.",
        "description": "See api/nsk/v1/bundles/rule/{bundleRuleCode}/details to retrieve a list of bundle\napplications associated with a specific bundle rule.\nBundle rules are used to control where and how bundle applications are used.\n            ",
        "operationId": "nsk_v1_resources_bundles_rules_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles/sets": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of bundle set resources.",
        "description": "See api/nsk/v1/bundles/set/{bundleSetCode}/details to retrieve a list of bundle\ncodes associated with a specific bundle set.\n            ",
        "operationId": "nsk_v1_resources_bundles_sets_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/bundles/ssrs": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of bundle ssr configurations associated with\nthe bundle code.",
        "operationId": "nsk_v1_resources_bundles_ssrs_get",
        "parameters": [
          {
            "name": "BundleCode",
            "in": "query",
            "description": "The bundle code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The specific culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBundleSsrConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/carriers": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of carrier resources.",
        "operationId": "nsk_v1_resources_carriers_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCarrier"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/carriers/{carrierCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a single carrier.",
        "operationId": "nsk_v1_resources_carriers_carrierCode_get",
        "parameters": [
          {
            "name": "carrierCode",
            "in": "path",
            "required": true,
            "description": "The unique carrier code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eTag",
            "in": "query",
            "description": "The eTag.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCarrier"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Cities": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of city resources.",
        "operationId": "nsk_v1_resources_Cities_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCity"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Cities/{cityCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific city resource.",
        "operationId": "nsk_v1_resources_Cities_cityCode_get",
        "parameters": [
          {
            "name": "cityCode",
            "in": "path",
            "required": true,
            "description": "The unique city code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCity"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ClassOfServices": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of class of service resources.",
        "operationId": "nsk_v1_resources_ClassOfServices_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfClassOfService"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ClassOfServices/{classOfServiceCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the resource.",
        "operationId": "nsk_v1_resources_ClassOfServices_classOfServiceCode_get",
        "parameters": [
          {
            "name": "classOfServiceCode",
            "in": "path",
            "required": true,
            "description": "The unique class of service code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfClassOfService"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/CommissionRates": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of commission rate resources.",
        "operationId": "nsk_v1_resources_CommissionRates_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCommissionRate"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/CommissionRates/{commissionRateCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific commission rate resource.",
        "operationId": "nsk_v1_resources_CommissionRates_commissionRateCode_get",
        "parameters": [
          {
            "name": "commissionRateCode",
            "in": "path",
            "required": true,
            "description": "The unique commission rate code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCommissionRate"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ContactTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of contact type resources.",
        "operationId": "nsk_v1_resources_ContactTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfContactType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ContactTypes/{contactTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific contact type resource.",
        "operationId": "nsk_v1_resources_ContactTypes_contactTypeCode_get",
        "parameters": [
          {
            "name": "contactTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique contact type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfContactType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/contents": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Searches the contents based on the search criteria provided.",
        "operationId": "nsk_v1_resources_contents_get",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Name of the content.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Specific content type.\n             \nEnumeration values: 0 = GeneralReference, 1 = News, 2 = ConsoleHelp, 3 = FareRuleReference, 4 = ReviewWithCustomer, 8 = Image, 9 = PromotionReference, 10 = SubscriptionReference",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ContentType"
            },
            "x-position": 2
          },
          {
            "name": "ContainerId",
            "in": "query",
            "description": "Unique id of the container.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The default page size.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastContentId",
            "in": "query",
            "description": "Used to specify the last item of the page of the last set of records retrieved\nwhen paging was performed. This is optional.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Search content succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIEnumerableOfResourceContentResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/contents/{contentId}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a resource setting and its related information.",
        "description": "This is a post to easily allow special path characters.\nSee /resources/settings/data to avoid manually parsing the data.\n            ",
        "operationId": "nsk_v1_resources_contents_contentId_get",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "description": "The content id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          },
          {
            "name": "convertRtfToHtml",
            "in": "query",
            "description": "The bool to determine whether or not to convert RTF to HTML data.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eTag",
            "in": "query",
            "description": "ETag for caching.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfResourceContentItem"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/contents/{contentId}/data": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves resource setting data based on the accept content type.",
        "description": "This is a post to easily allow special path characters.\nIf the data returned is not in HTML format and convertRtfToHtml is set to true,\nthe content requested was of an incompatible data type.\n            ",
        "operationId": "nsk_v1_resources_contents_contentId_data_get",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "description": "The content id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 1
          },
          {
            "name": "convertRtfToHtml",
            "in": "query",
            "description": "The bool to determine whether or not to convert RTF to HTML data.",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eTag",
            "in": "query",
            "description": "ETag for caching.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "An HTTP response with a list of Domains that match the given parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/countries": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of country resources.",
        "operationId": "nsk_v2_resources_countries_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCountryv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/countries/{countryCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific country resource.",
        "operationId": "nsk_v2_resources_countries_countryCode_get",
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "required": true,
            "description": "The unique country code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCountryv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/cultures": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the resources.",
        "operationId": "nsk_v1_resources_cultures_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCulture"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/cultures/{cultureCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the resource.",
        "operationId": "nsk_v1_resources_cultures_cultureCode_get",
        "parameters": [
          {
            "name": "cultureCode",
            "in": "path",
            "required": true,
            "description": "The unique culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "forCultureCode",
            "in": "query",
            "description": "The for culture.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCulture"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/currencies": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of currency resources.",
        "operationId": "nsk_v2_resources_currencies_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCurrencyv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/currencies/{currencyCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific currency resource.",
        "operationId": "nsk_v2_resources_currencies_currencyCode_get",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "description": "The unique currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCurrencyv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/CustomerPrograms": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of customer program resources.",
        "operationId": "nsk_v1_resources_CustomerPrograms_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfCustomerProgram"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/CustomerPrograms/{programCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific customer program resource.",
        "operationId": "nsk_v1_resources_CustomerPrograms_programCode_get",
        "parameters": [
          {
            "name": "programCode",
            "in": "path",
            "required": true,
            "description": "The unique program code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCustomerProgram"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/CustomerPrograms/{programCode}/levels/{programLevelCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific program level.",
        "operationId": "nsk_v1_resources_CustomerPrograms_programCode_levels_programLevelCode_get",
        "parameters": [
          {
            "name": "programCode",
            "in": "path",
            "required": true,
            "description": "The unique program code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "programLevelCode",
            "in": "path",
            "required": true,
            "description": "The unique program level code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The customer program level.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCustomerProgramLevel"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Delays": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of delay resources.",
        "operationId": "nsk_v1_resources_Delays_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfDelay"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Delays/{delayCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific delay resource.",
        "operationId": "nsk_v1_resources_Delays_delayCode_get",
        "parameters": [
          {
            "name": "delayCode",
            "in": "path",
            "required": true,
            "description": "The unique delay code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDelay"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Departments": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of department resources.",
        "operationId": "nsk_v1_resources_Departments_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfDepartment"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Departments/{departmentCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific department resource.",
        "operationId": "nsk_v1_resources_Departments_departmentCode_get",
        "parameters": [
          {
            "name": "departmentCode",
            "in": "path",
            "required": true,
            "description": "The unique department code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDepartment"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/distributionOptions": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the localizations.",
        "operationId": "nsk_v1_resources_distributionOptions_get",
        "parameters": [
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEnumResource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/DocumentTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of document type resources.",
        "operationId": "nsk_v1_resources_DocumentTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfDocumentType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/DocumentTypes/{documentTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific document type resource.",
        "operationId": "nsk_v1_resources_DocumentTypes_documentTypeCode_get",
        "parameters": [
          {
            "name": "documentTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique document type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDocumentType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Domains": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of domain resources.",
        "operationId": "nsk_v1_resources_Domains_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Domains/{domainCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific domain resource.",
        "operationId": "nsk_v1_resources_Domains_domainCode_get",
        "parameters": [
          {
            "name": "domainCode",
            "in": "path",
            "required": true,
            "description": "The unique domain code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDomain"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/EmailTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of email type resources.",
        "operationId": "nsk_v1_resources_EmailTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEmailType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/EmailTypes/{emailTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific email type resource.",
        "operationId": "nsk_v1_resources_EmailTypes_emailTypeCode_get",
        "parameters": [
          {
            "name": "emailTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique email type code. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfEmailType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ExternalRates": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of external rate resources.",
        "operationId": "nsk_v1_resources_ExternalRates_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfExternalRate"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ExternalRates/{rateId}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific external rate resource.",
        "operationId": "nsk_v1_resources_ExternalRates_rateId_get",
        "parameters": [
          {
            "name": "rateId",
            "in": "path",
            "required": true,
            "description": "The unique rate ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfExternalRate"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ExternalSystems": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of external system resources.",
        "operationId": "nsk_v1_resources_ExternalSystems_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfExternalSystem"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/externalSystems/{systemCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a single external system resource.",
        "operationId": "nsk_v2_resources_externalSystems_systemCode_get",
        "parameters": [
          {
            "name": "systemCode",
            "in": "path",
            "required": true,
            "description": "The unique external system code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfExternalSystem"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/fareDiscounts": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a collection of fare discount resources.",
        "operationId": "nsk_v1_resources_fareDiscounts_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFareDiscount"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/fareDiscounts/{fareDiscountCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific fare discount resource.",
        "operationId": "nsk_v1_resources_fareDiscounts_fareDiscountCode_get",
        "parameters": [
          {
            "name": "fareDiscountCode",
            "in": "path",
            "required": true,
            "description": "The unique fare discount code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFareDiscount"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/fareSurcharges": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a collection of fare surcharge resources.",
        "operationId": "nsk_v1_resources_fareSurcharges_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFareSurcharge"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/fareSurcharges/{fareSurchargeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific fare surcharge resource.",
        "operationId": "nsk_v1_resources_fareSurcharges_fareSurchargeCode_get",
        "parameters": [
          {
            "name": "fareSurchargeCode",
            "in": "path",
            "required": true,
            "description": "The unique fare surcharge code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFareSurcharge"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/FareTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of fare type resources.",
        "operationId": "nsk_v1_resources_FareTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFareType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/FareTypes/{fareTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific fare type resource.",
        "operationId": "nsk_v1_resources_FareTypes_fareTypeCode_get",
        "parameters": [
          {
            "name": "fareTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique fare type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFareType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Fees": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of fee resources.",
        "operationId": "nsk_v1_resources_Fees_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFee"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Fees/{feeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific fee resource.",
        "operationId": "nsk_v1_resources_Fees_feeCode_get",
        "parameters": [
          {
            "name": "feeCode",
            "in": "path",
            "required": true,
            "description": "The unique fee code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFee"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/fees/{feeCode}/details": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets the fee options.",
        "description": "Note, this endpoint is not cached like other resource endpoints.\nThe NSK enumeration \"TSI.GroundTimeBeforeDepartureFromConnectionWithin\" is synonymous with\n\"TravelSegmentIndicator.DepartureWithinStopoverTime\".\nThe NSK enumeration \"TSI.GroundTimeBeforeDepartureFromConnectionExceeds\" is synonymous with\n\"TravelSegmentIndicator.DepartureExceedsStopoverTime\".\n            ",
        "operationId": "nsk_v1_resources_fees_feeCode_details_get",
        "parameters": [
          {
            "name": "feeCode",
            "in": "path",
            "required": true,
            "description": "The unique fee code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The fare rules.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfFeeDetail"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/genders": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the localizations.",
        "operationId": "nsk_v1_resources_genders_get",
        "parameters": [
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEnumResource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/HotCardReasons": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of hot card reason resources.",
        "operationId": "nsk_v1_resources_HotCardReasons_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfHotCardReason"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/HotCardReasons/{hotCardReasonCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific hot card reason resource.",
        "operationId": "nsk_v1_resources_HotCardReasons_hotCardReasonCode_get",
        "parameters": [
          {
            "name": "hotCardReasonCode",
            "in": "path",
            "required": true,
            "description": "The unique hot card reason.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfHotCardReason"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/IssuanceReasons": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of issuance reason resources.",
        "operationId": "nsk_v1_resources_IssuanceReasons_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfIssuanceReason"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/IssuanceReasons/{issuanceReasonCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific issuance reason resource.",
        "operationId": "nsk_v1_resources_IssuanceReasons_issuanceReasonCode_get",
        "parameters": [
          {
            "name": "issuanceReasonCode",
            "in": "path",
            "required": true,
            "description": "The unique issuance reason code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIssuanceReason"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Locations": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of location resources.",
        "operationId": "nsk_v1_resources_Locations_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfLocation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Locations/{locationCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific location resource.",
        "operationId": "nsk_v1_resources_Locations_locationCode_get",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLocation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Macs": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of mac resources.",
        "operationId": "nsk_v1_resources_Macs_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfMac"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Macs/{macCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific mac resource.",
        "operationId": "nsk_v1_resources_Macs_macCode_get",
        "parameters": [
          {
            "name": "macCode",
            "in": "path",
            "required": true,
            "description": "The unique mac code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfMac"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/markets": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of market resources.",
        "operationId": "nsk_v2_resources_markets_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfMarketv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/markets/{locationCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific market resource.",
        "operationId": "nsk_v2_resources_markets_locationCode_get",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "required": true,
            "description": "The unique location code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfListOfMarket"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/markets/{locationCode}/{travelLocationCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the resource.",
        "operationId": "nsk_v2_resources_markets_locationCode_travelLocationCode_get",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelLocationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfMarket"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/MessageTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of message type resources.",
        "operationId": "nsk_v1_resources_MessageTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfMessageType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/MessageTypes/{messageTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific message type resource.",
        "operationId": "nsk_v1_resources_MessageTypes_messageTypeCode_get",
        "parameters": [
          {
            "name": "messageTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique message type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfMessageType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/organizationStatuses": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the localizations.",
        "operationId": "nsk_v1_resources_organizationStatuses_get",
        "parameters": [
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEnumResource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PassengerDiscounts": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of passenger discount resources.",
        "operationId": "nsk_v1_resources_PassengerDiscounts_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerDiscount"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PassengerDiscounts/{passengerDiscountCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific passenger discount resource.",
        "operationId": "nsk_v1_resources_PassengerDiscounts_passengerDiscountCode_get",
        "parameters": [
          {
            "name": "passengerDiscountCode",
            "in": "path",
            "required": true,
            "description": "The unique passenger discount code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerDiscount"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PassengerTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of passenger type resources.",
        "operationId": "nsk_v1_resources_PassengerTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPassengerType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PassengerTypes/{passengerTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific passenger type resource.",
        "operationId": "nsk_v1_resources_PassengerTypes_passengerTypeCode_get",
        "parameters": [
          {
            "name": "passengerTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique passenger type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PaymentMethods": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of payment method resources.",
        "operationId": "nsk_v1_resources_PaymentMethods_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "The currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPaymentMethod"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PaymentMethods/{paymentMethodCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific payment method resource.",
        "operationId": "nsk_v1_resources_PaymentMethods_paymentMethodCode_get",
        "parameters": [
          {
            "name": "paymentMethodCode",
            "in": "path",
            "required": true,
            "description": "The unique payment method code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "The specific currency code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentMethod"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PersonAttachmentTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of person attachment type resources.",
        "operationId": "nsk_v1_resources_PersonAttachmentTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAttachmentType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PersonAttachmentTypes/{personAttachmentTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific person attachment resource.",
        "operationId": "nsk_v1_resources_PersonAttachmentTypes_personAttachmentTypeCode_get",
        "parameters": [
          {
            "name": "personAttachmentTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique person attachment type code. Please note that this should be a char\nand not a string.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAttachmentType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PersonInformationTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of person information type resources.",
        "operationId": "nsk_v1_resources_PersonInformationTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonInformationType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PersonInformationTypes/{personInformationTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific person information type resource.",
        "operationId": "nsk_v1_resources_PersonInformationTypes_personInformationTypeCode_get",
        "parameters": [
          {
            "name": "personInformationTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique person information type code. Please note that this should be a char\nand not a string.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonInformationType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PhoneTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of phone number type resources.",
        "operationId": "nsk_v1_resources_PhoneTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPhoneType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PhoneTypes/{phoneTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific phone number type resource.",
        "operationId": "nsk_v1_resources_PhoneTypes_phoneTypeCode_get",
        "parameters": [
          {
            "name": "phoneTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique phone type. Please note that this should be a char and not a string.",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPhoneType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/postalCodes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of postal codes resources.",
        "operationId": "nsk_v1_resources_postalCodes_get",
        "parameters": [
          {
            "name": "CountryCode",
            "in": "query",
            "description": "The country code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 2,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ProvinceStateCode",
            "in": "query",
            "description": "The province state code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "City",
            "in": "query",
            "description": "The city.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The default page size.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "Used to specify the last item of the page of the last set of records retrieved\nwhen paging was performed. This is optional.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PostalCode",
            "in": "query",
            "description": "The postal code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 10,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfResourcePostalCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/postalCodes/{postalCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the postal code resource.",
        "operationId": "nsk_v1_resources_postalCodes_postalCode_get",
        "parameters": [
          {
            "name": "postalCode",
            "in": "path",
            "required": true,
            "description": "The unique postal code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPostalCode"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ProductClasses": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of product class resources.",
        "operationId": "nsk_v1_resources_ProductClasses_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfProductClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ProductClasses/{productClassCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific product class resource.",
        "operationId": "nsk_v1_resources_ProductClasses_productClassCode_get",
        "parameters": [
          {
            "name": "productClassCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfProductClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PromotionSettingTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of promotion setting type resources.",
        "operationId": "nsk_v1_resources_PromotionSettingTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPromotionSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/PromotionSettingTypes/{promotionSettingsTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific promotion setting type resource.",
        "operationId": "nsk_v1_resources_PromotionSettingTypes_promotionSettingsTypeCode_get",
        "parameters": [
          {
            "name": "promotionSettingsTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPromotionSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ProvinceStates": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of province state resources.",
        "operationId": "nsk_v1_resources_ProvinceStates_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfProvinceState"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ProvinceStates/{provinceStateCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific province state resource.",
        "operationId": "nsk_v1_resources_ProvinceStates_provinceStateCode_get",
        "parameters": [
          {
            "name": "provinceStateCode",
            "in": "path",
            "required": true,
            "description": "The unique province state code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfProvinceState"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/queue/categories": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets a response with a list of QueueCategories that match the given parameters.",
        "operationId": "nsk_v1_resources_queue_categories_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "An HTTP response with a list of QueueCategories that match the given parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfQueueCategory"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/queue/categories/{queueCategoryCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets a response with a single QueueCategory that match the given parameters.",
        "operationId": "nsk_v1_resources_queue_categories_queueCategoryCode_get",
        "parameters": [
          {
            "name": "queueCategoryCode",
            "in": "path",
            "required": true,
            "description": "Queue Category Code being requested. Please note that this should be a char and not a\nstring.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "[Optional] The culture code for the resources.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "An HTTP response with a single QueueCategory that match the given parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfQueueCategory"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/reminderTimes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of reminder time resource that contains valid times for all passenger travel notification\ntimed events.",
        "operationId": "nsk_v1_resources_reminderTimes_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfReminderTime"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/reminderTimes/{timedEventType}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific reminder time resource that contains valid times for a passenger travel notification timed\nevent.",
        "operationId": "nsk_v1_resources_reminderTimes_timedEventType_get",
        "parameters": [
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfReminderTime"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/roles": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the role resources.",
        "operationId": "nsk_v2_resources_roles_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfRolev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/roles/{roleCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a single role resource.",
        "operationId": "nsk_v2_resources_roles_roleCode_get",
        "parameters": [
          {
            "name": "roleCode",
            "in": "path",
            "required": true,
            "description": "The unique role code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfRolev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/roles/{roleCode}/settings": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the resource.",
        "operationId": "nsk_v1_resources_roles_roleCode_settings_get",
        "parameters": [
          {
            "name": "roleCode",
            "in": "path",
            "required": true,
            "description": "The unique role code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfListOfRoleSettingv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/RoleSettingTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of role setting resources.",
        "operationId": "nsk_v1_resources_RoleSettingTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfRoleSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/RoleSettingTypes/{roleSettingTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific role setting resource.",
        "operationId": "nsk_v1_resources_RoleSettingTypes_roleSettingTypeCode_get",
        "parameters": [
          {
            "name": "roleSettingTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique role setting type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfRoleSettingType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/searchTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the localizations.",
        "operationId": "nsk_v1_resources_searchTypes_get",
        "parameters": [
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfEnumResource"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/seatPropertyTypes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a list of seat property types.",
        "operationId": "nsk_v2_resources_seatPropertyTypes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSeatPropertyType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/resources/seatPropertyTypes/{seatPropertyTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a single seat property type resource.",
        "operationId": "nsk_v2_resources_seatPropertyTypes_seatPropertyTypeCode_get",
        "parameters": [
          {
            "name": "seatPropertyTypeCode",
            "in": "path",
            "required": true,
            "description": "The unique seat property type code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSeatPropertyType"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/settings": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a resource setting and its related information.",
        "description": "This is a post to easily allow special path characters.\nSee /resources/settings/data to avoid manually parsing the data.\n            ",
        "operationId": "nsk_v1_resources_settings_post",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "ETag for caching.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The resource settings request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfResourceCategoryItem"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/settings/data": {
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves resource setting data based on the accept content type.",
        "description": "This is a post to easily allow special path characters.\n            ",
        "operationId": "nsk_v1_resources_settings_data_post",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "ETag for caching.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The resource settings request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "415": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "An HTTP response with a list of Domains that match the given parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ShoppingAttributeGroups": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of shopping attribute group resources.",
        "operationId": "nsk_v1_resources_ShoppingAttributeGroups_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfShoppingAttributeGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ShoppingAttributeGroups/{shoppingAttributeGroupCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific shopping attribute group resource.",
        "operationId": "nsk_v1_resources_ShoppingAttributeGroups_shoppingAttributeGroupCode_get",
        "parameters": [
          {
            "name": "shoppingAttributeGroupCode",
            "in": "path",
            "required": true,
            "description": "The unique shopping attribute group code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfShoppingAttributeGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ShoppingAttributes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of shopping attribute resources.",
        "operationId": "nsk_v1_resources_ShoppingAttributes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfShoppingAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/ShoppingAttributes/{shoppingAttributeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific shopping attribute resource.",
        "operationId": "nsk_v1_resources_ShoppingAttributes_shoppingAttributeCode_get",
        "parameters": [
          {
            "name": "shoppingAttributeCode",
            "in": "path",
            "required": true,
            "description": "The unique shopping attribute code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfShoppingAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/singleSignOnProvider": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a list of available single sign on providers.",
        "operationId": "nsk_v1_resources_singleSignOnProvider_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSingleSignOnProvider"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/singleSignOnProvider/{providerName}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a specific single sign on provider.",
        "operationId": "nsk_v1_resources_singleSignOnProvider_providerName_get",
        "parameters": [
          {
            "name": "providerName",
            "in": "path",
            "required": true,
            "description": "The single sign on provider name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSingleSignOnProvider"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrGroups": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of ssr group resources.",
        "operationId": "nsk_v1_resources_SsrGroups_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSsrGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrGroups/{ssrGroupCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific ssr group resource.",
        "operationId": "nsk_v1_resources_SsrGroups_ssrGroupCode_get",
        "parameters": [
          {
            "name": "ssrGroupCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSsrGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrNests": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of ssr nest resources.",
        "operationId": "nsk_v1_resources_SsrNests_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSsrNest"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrNests/{ssrNestCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific ssr nest resource.",
        "operationId": "nsk_v1_resources_SsrNests_ssrNestCode_get",
        "parameters": [
          {
            "name": "ssrNestCode",
            "in": "path",
            "required": true,
            "description": "The unique ssr nest code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSsrNest"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrRestrictionResults": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of ssr restriction result resources.",
        "operationId": "nsk_v1_resources_SsrRestrictionResults_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSsrRestrictionResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/SsrRestrictionResults/{ssrRestrictionResultCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific ssr restriction result. resource.",
        "operationId": "nsk_v1_resources_SsrRestrictionResults_ssrRestrictionResultCode_get",
        "parameters": [
          {
            "name": "ssrRestrictionResultCode",
            "in": "path",
            "required": true,
            "description": "The unique ssr restriction result code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The unique culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSsrRestrictionResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Ssrs": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of ssr resources.",
        "operationId": "nsk_v1_resources_Ssrs_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSsr"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Ssrs/{ssrCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific ssr resource.",
        "operationId": "nsk_v1_resources_Ssrs_ssrCode_get",
        "parameters": [
          {
            "name": "ssrCode",
            "in": "path",
            "required": true,
            "description": "The unique ssr code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSsr"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/StandByPriorities": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of standby priority resources.",
        "operationId": "nsk_v1_resources_StandByPriorities_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfStandByPriority"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/StandByPriorities/{standByPriorityCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific standby priority resource.",
        "operationId": "nsk_v1_resources_StandByPriorities_standByPriorityCode_get",
        "parameters": [
          {
            "name": "standByPriorityCode",
            "in": "path",
            "required": true,
            "description": "The unique standby priority code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfStandByPriority"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/StationCategories": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of station category resources.",
        "operationId": "nsk_v1_resources_StationCategories_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfStationCategory"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/StationCategories/{stationCategoryCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific station category resource.",
        "operationId": "nsk_v1_resources_StationCategories_stationCategoryCode_get",
        "parameters": [
          {
            "name": "stationCategoryCode",
            "in": "path",
            "required": true,
            "description": "The unique station category code. Please note that this should be a char and not a\nstring.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfStationCategory"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Stations": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of station resources.",
        "operationId": "nsk_v1_resources_Stations_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfStation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Stations/{stationCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific station resource.",
        "operationId": "nsk_v1_resources_Stations_stationCode_get",
        "parameters": [
          {
            "name": "stationCode",
            "in": "path",
            "required": true,
            "description": "The unique station code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eTag",
            "in": "query",
            "description": "The eTag.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfStation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/stations/{stationCode}/details": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Get the station details.",
        "description": "Note this endpoint is not cached like other resource endpoints.\n            ",
        "operationId": "nsk_v1_resources_stations_stationCode_details_get",
        "parameters": [
          {
            "name": "stationCode",
            "in": "path",
            "required": true,
            "description": "The station code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfResourceEntriesOfStationDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/stations/category/{stationCategoryCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Gets a response with stations filtered by category.",
        "description": "This endpoint is resource intensive until cached.\n            ",
        "operationId": "nsk_v1_resources_stations_category_stationCategoryCode_get",
        "parameters": [
          {
            "name": "stationCategoryCode",
            "in": "path",
            "required": true,
            "description": "The unique station category code. Please note that this should be a char and not a\nstring.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1
            },
            "x-position": 1
          },
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfStation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Suffixes": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of suffix resources.",
        "operationId": "nsk_v1_resources_Suffixes_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSuffix"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Suffixes/{suffixCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific suffix resource.",
        "operationId": "nsk_v1_resources_Suffixes_suffixCode_get",
        "parameters": [
          {
            "name": "suffixCode",
            "in": "path",
            "required": true,
            "description": "The unique suffix code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture for the suffix.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSuffix"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/TimeZones": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of time zone resources.",
        "operationId": "nsk_v1_resources_TimeZones_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTimeZone"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/TimeZones/{timeZoneCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific time zone resource.",
        "operationId": "nsk_v1_resources_TimeZones_timeZoneCode_get",
        "parameters": [
          {
            "name": "timeZoneCode",
            "in": "path",
            "required": true,
            "description": "The unique time zone code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eTag",
            "in": "query",
            "description": "The eTag.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTimeZone"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Titles": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of title resources.",
        "operationId": "nsk_v1_resources_Titles_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTitle"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/Titles/{titleKey}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific title resource.",
        "operationId": "nsk_v1_resources_Titles_titleKey_get",
        "parameters": [
          {
            "name": "titleKey",
            "in": "path",
            "required": true,
            "description": "The unique title key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture for the title.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTitle"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/TravelClasses": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of travel class resources.",
        "operationId": "nsk_v1_resources_TravelClasses_get",
        "parameters": [
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "Flag indicating to return just active only or all.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 1
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code to be returned.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache token for this request. Data will not be returned if etag still matches.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "StartIndex",
            "in": "query",
            "description": "The start index value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "ItemCount",
            "in": "query",
            "description": "The item count value for this request.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTravelClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/TravelClasses/{travelClassCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific travel class resource.",
        "operationId": "nsk_v1_resources_TravelClasses_travelClassCode_get",
        "parameters": [
          {
            "name": "travelClassCode",
            "in": "path",
            "required": true,
            "description": "The unique travel class code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The specific culture code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/travelerNotifications": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a collection of traveler notification resource.",
        "operationId": "nsk_v1_resources_travelerNotifications_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTravelerNotification"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/travelerNotifications/{notificationTypeCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specified traveler notification resource.",
        "operationId": "nsk_v1_resources_travelerNotifications_notificationTypeCode_get",
        "parameters": [
          {
            "name": "notificationTypeCode",
            "in": "path",
            "required": true,
            "description": "Traveler notification type.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelerNotification"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/travelerNotifications/deliveryMethods": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the traveler notification delivery methods filtered by program code and level.",
        "description": "This endpoint will return the allowed traveler notification delivery methods based on the program code and level.\nAny delivery methods that have a required program and level where the passed in values do not meet that level or\nabove will be removed.\nIf the customer is not enrolled in the default loyalty program, leave the program code and level null and the\ndelivery methods will be filtered appropriately.\n            ",
        "operationId": "nsk_v1_resources_travelerNotifications_deliveryMethods_get",
        "parameters": [
          {
            "name": "programCode",
            "in": "query",
            "description": "The customer's default loyalty program code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "programLevel",
            "in": "query",
            "description": "The customer's program level of their default loyalty program.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of traveler notification delivery methods that are allowed based on the customer's default loyalty\nprogram and program level.\n            ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTravelerNotificationDeliveryMethod"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/travelerNotifications/deliveryMethodSettings": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the notification delivery method settings resource.",
        "description": "Contains information about the SMS, PUSH, and EMAIL notification delivery methods and their maximum number of\nallowed notifications.\n            ",
        "operationId": "nsk_v1_resources_travelerNotifications_deliveryMethodSettings_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The list of notification delivery method settings resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationDeliveryMethod"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/zones/{zoneCode}/subZones": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the collection of subzones.",
        "description": "This endpoint does not cache the resulting subzone resources.\n            ",
        "operationId": "nsk_v1_resources_zones_zoneCode_subZones_get",
        "parameters": [
          {
            "name": "zoneCode",
            "in": "path",
            "required": true,
            "description": "The unique code of the zone to which the subzones belong.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSubZonev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/resources/zones/{zoneCode}/subZones/{subZoneCode}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the specific subzone.",
        "description": "This endpoint does not retrieve the subzone resource from the cache.\n            ",
        "operationId": "nsk_v1_resources_zones_zoneCode_subZones_subZoneCode_get",
        "parameters": [
          {
            "name": "zoneCode",
            "in": "path",
            "required": true,
            "description": "The unique code of the zone to which the subzones belong.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "subZoneCode",
            "in": "path",
            "required": true,
            "description": "The unique subzone code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSubZonev2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/seatmaps/{journeyKey}": {
      "get": {
        "tags": [
          "seatmaps"
        ],
        "summary": "Gets the list of seat maps for a specified journey.",
        "operationId": "nsk_v4_seatmaps_journeyKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The Journey Key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "IncludePropertyLookup",
            "in": "query",
            "description": "Flag indicating to include seat property lookup on the response.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The list of available seat maps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfSeatMapStatelessAvailability"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/seatmaps/{legKey}": {
      "get": {
        "tags": [
          "seatmaps"
        ],
        "summary": "Gets the seat maps for a specified leg.",
        "operationId": "nsk_v1_seatmaps_legKey_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg Key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "IncludePropertyLookup",
            "in": "query",
            "description": "Flag indicating to include seat property lookup on the response.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The desired culture code.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The seat map for the given leg key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSeatMapStatelessAvailability"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the general settings.",
        "operationId": "nsk_v1_settings_booking_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfGeneralSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/checkin": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the checkin settings.",
        "operationId": "nsk_v1_settings_booking_checkin_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCheckInSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/contact": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the contact settings.",
        "operationId": "nsk_v1_settings_booking_contact_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfContactSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/customerAccount": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the custom account settings.",
        "operationId": "nsk_v1_settings_booking_customerAccount_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCustomerAccountSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/fee": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the fee settings.",
        "operationId": "nsk_v1_settings_booking_fee_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFeeSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/flightSearch": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the flight search settings.",
        "operationId": "nsk_v1_settings_booking_flightSearch_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfFlightSearchSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/general": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the non-role based general booking settings.",
        "operationId": "nsk_v1_settings_booking_general_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfGeneralBookingSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/passenger": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the passenger settings.",
        "operationId": "nsk_v1_settings_booking_passenger_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPassengerSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/settings/booking/payment": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the role based booking payment settings.",
        "operationId": "nsk_v2_settings_booking_payment_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBookingPaymentSettingsv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/booking/reserveFlights": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the reserve flight settings.",
        "operationId": "nsk_v1_settings_booking_reserveFlights_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfReserveFlightsSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/eTickets": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the non-role based e-ticket configuration.",
        "operationId": "nsk_v1_settings_eTickets_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfETicketConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/externalMessageControls": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the external message control settings.",
        "operationId": "nsk_v1_settings_externalMessageControls_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfExternalMessageControls"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/general/applicationLogon": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the logon settings.",
        "operationId": "nsk_v1_settings_general_applicationLogon_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLogonSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/general/codes": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the codes settings.",
        "operationId": "nsk_v1_settings_general_codes_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCodesSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/general/operations": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the operations settings.",
        "operationId": "nsk_v1_settings_general_operations_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOperationsSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/general/organization": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the organization settings.",
        "operationId": "nsk_v1_settings_general_organization_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfOrganizationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/general/session": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the session settings.",
        "operationId": "nsk_v1_settings_general_session_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSessionSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/itinerary": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the itinerary settings.",
        "operationId": "nsk_v1_settings_itinerary_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfItinerarySettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/loyalty": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the non-role based loyalty settings.",
        "operationId": "nsk_v1_settings_loyalty_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfLoyaltySettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/payment": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get the non role based payment settings.",
        "operationId": "nsk_v1_settings_payment_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPaymentSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/phoneNumberValidation": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the non-role based phone number validation settings.",
        "operationId": "nsk_v1_settings_phoneNumberValidation_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPhoneNumberValidationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/settings/premiumServices": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the premium services settings.",
        "operationId": "nsk_v2_settings_premiumServices_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPremiumServicesSettingsv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/settings/skySpeed": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the SkySpeed settings.",
        "operationId": "nsk_v2_settings_skySpeed_get",
        "parameters": [
          {
            "name": "ETag",
            "in": "query",
            "description": "The cache eTag for this request.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "Gets or sets the role code for this request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 1,
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSkySpeedSettingsv2"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/travelerNotification": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets the traveler notification settings.",
        "operationId": "nsk_v1_settings_travelerNotification_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTravelerNotificationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/user/agencyCreation": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the agency creation settings.",
        "operationId": "nsk_v1_settings_user_agencyCreation_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAgencyCreationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/settings/user/customerCreation": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieves the customer creation settings.",
        "operationId": "nsk_v1_settings_user_customerCreation_get",
        "parameters": [
          {
            "name": "eTag",
            "in": "query",
            "description": "The unique etag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "304": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfCustomerCreationSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/token": {
      "get": {
        "tags": [
          "token"
        ],
        "summary": "Get the information about the current token.",
        "operationId": "nsk_v1_token_get",
        "responses": {
          "200": {
            "description": "The generated token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNskSessionContext"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Creates the general access token that will grant access to the API.",
        "description": "Security Note:\nThis endpoint has the ability to log in as any role assigned to a user\nor that is allowed through impersonation settings. A user may still log\ninto a role that is not assigned to them if the impersonation settings\nallow it.\n            ",
        "operationId": "nsk_v1_token_post",
        "requestBody": {
          "x-name": "request",
          "description": "The nsk token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NskTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTokenResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "token"
        ],
        "summary": "Given a non-null request, upgrades the current session's logged in user.\nOtherwise, keeps the active token alive.",
        "description": "Security Note:\nThis endpoint has the ability to log in as any role assigned to a user\nor that is allowed through impersonation settings. A user may still log\ninto a role that is not assigned to them if the impersonation settings\nallow it.\n            ",
        "operationId": "nsk_v1_token_put",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "token"
        ],
        "summary": "Abandons the active token.",
        "operationId": "nsk_v1_token_delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/token/culture": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Sets the culture code for the lifetime of the token.",
        "description": "Note there is middleware that looks for \"Culture\" on every request in the headers or query string parameters.\nThese can be used if you want to set the culture for a single request only.\n            ",
        "operationId": "nsk_v1_token_culture_post",
        "parameters": [
          {
            "name": "defaultCultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/token/serverTransfer": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Transfers the server context from NewSkies and returns a new token.",
        "description": "This endpoint returns a new token.  The new token must be applied in the\nauthorization header to access the transferred server context.\n            ",
        "operationId": "nsk_v1_token_serverTransfer_post",
        "requestBody": {
          "x-name": "request",
          "description": "The server transfer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerTransferRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The generated token for the transferred server context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/token/singleSignOn": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Creates the general access token that will grant access to the API.",
        "description": "In order to use single sign on, a single sign on token must first be\nassociated with a user.  Refer to the \"user/singleSignOnToken\" endpoints.\n            ",
        "operationId": "nsk_v1_token_singleSignOn_post",
        "requestBody": {
          "x-name": "credentials",
          "description": "The single sign on credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSignOnCredentials"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The generated token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTokenResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "token"
        ],
        "summary": "Given a non-null request, upgrades the current session's logged in user.\nOtherwise, keeps the active token alive.",
        "description": "In order to use single sign on, a single sign on token must first be\nassociated with a user.  Refer to the \"user/singleSignOnToken\" endpoints.\n            ",
        "operationId": "nsk_v1_token_singleSignOn_put",
        "requestBody": {
          "x-name": "credentials",
          "description": "The single sign on credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSignOnCredentials"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/token/user/person/singleSignOn": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Creates a new user, links it with a provider, then logs in as the new user.",
        "description": "Warning:\nThis endpoint currently only works with Facebook.\n\n    If this endpoint fails it could be because an SSO token is already\n    linked to a user or the SSO token is invalid.\n\n            ",
        "operationId": "nsk_v1_token_user_person_singleSignOn_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSignOnCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The generated token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/trip": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Creates a new booking with the provided journeys, contacts, passengers, and SSRs.",
        "operationId": "nsk_v4_trip_post",
        "requestBody": {
          "x-name": "request",
          "description": "The booking sell request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingSellRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/info": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Gets the search results for the trip information, based on the search criteria.",
        "operationId": "nsk_v2_trip_info_post",
        "requestBody": {
          "x-name": "request",
          "description": "The trip information request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripInformationQuery"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A trip information response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTripInformationResponsev2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/details": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Retrieves cabin and various details for the specified leg key.",
        "description": "The additional trip details include the leg cross references,\nthe cabin details (nest counts), and the checkin-lid.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_details_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The encoded leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTripDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status": {
      "patch": {
        "tags": [
          "trip"
        ],
        "summary": "Stateless operation for updating the trip information status for a specific flight.",
        "description": "A flight must be within three days of leaving to be able to make flight\nfollowing information changes.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_patch",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The trip information status request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripInformationStatusRequestBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/info/{legKey}/status": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Retrieves the trip status data for the specified leg key.",
        "operationId": "nsk_v2_trip_info_legKey_status_get",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The encoded leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfTripStatusv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/comments": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Stateless operation for creating operation comments in the trip information status for a specific flight.",
        "description": "A flight must be within three days of leaving to be able to make flight\nfollowing information changes.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_comments_post",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The trip operation comment create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripOperationCommentCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/comments/{commentKey}": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Stateless operation for updating the operation comments in the trip information status for a specific flight.",
        "description": "A flight must be within three days of leaving to be able to make flight\nfollowing information changes.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_comments_commentKey_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "commentKey",
            "in": "path",
            "required": true,
            "description": "The comment key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The trip operation comment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripOperationCommentEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/delays": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Stateless operation for creating operation delays in the trip information status for a specific flight.",
        "description": "A flight must be within three days of leaving to be able to make flight\nfollowing information changes.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_delays_post",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The trip operation delay request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripOperationDelayCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/delays/{delayKey}": {
      "patch": {
        "tags": [
          "trip"
        ],
        "summary": "Stateless operation for patching the operation delays in the trip information status for a specific flight.",
        "description": "A flight must be within three days of leaving to be able to make flight\nfollowing information changes.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_delays_delayKey_patch",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "delayKey",
            "in": "path",
            "required": true,
            "description": "The delay key of the flight being updated.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The trip operation delay request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTripOperationDelayEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/operationDetails/status/cancel": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Updates the leg status to cancel.",
        "operationId": "nsk_v1_trip_info_legKey_status_operationDetails_status_cancel_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/operationDetails/status/closeLeg": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Updates a leg status closed.",
        "description": "A leg status can be set to closed regardless of checkin configuration period of time set in settings.\nThis checkin restriction determines if a flight can be closed before a designated departure time.\nIt is recommended to set a leg status to close using the checkin restrictions.\nThere are a number of factors that can prevent the leg from being closed.\nThese include:\n\n    A PNRGOV message is required and has not been sent\n    A flight closure or APIS message is required and has not been sent\n    Passengers have a balance due\n    \n        Passengers have a balance due and not all passengers on the booking\n        have the same lift status.\n    \n\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_operationDetails_status_closeLeg_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "bypassCheckinRestrictions",
            "in": "query",
            "description": "This will allows updates regardless of checkin configuration period of time set in settings.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/operationDetails/status/closePendingLeg": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Updates a leg status to closed pending.",
        "operationId": "nsk_v1_trip_info_legKey_status_operationDetails_status_closePendingLeg_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/operationDetails/status/openLeg": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Updates a leg status to open.",
        "description": "A leg status can be set to open regardless of checkin configuration period of time set in settings.\nThis checkin restriction determines if a flight can be opened after a designated departure time.\nIt is recommended to set a leg status to open using the checkin restrictions.\n            ",
        "operationId": "nsk_v1_trip_info_legKey_status_operationDetails_status_openLeg_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "bypassCheckinRestrictions",
            "in": "query",
            "description": "This will allows updates regardless of checkin configuration period of time set in settings.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          },
          {
            "name": "convertNoShowToDefault",
            "in": "query",
            "description": "If true, converts no show passengers' liftStatus to default",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/info/{legKey}/status/operationDetails/status/restore": {
      "put": {
        "tags": [
          "trip"
        ],
        "summary": "Updates the leg status to normal.",
        "operationId": "nsk_v1_trip_info_legKey_status_operationDetails_status_restore_put",
        "parameters": [
          {
            "name": "legKey",
            "in": "path",
            "required": true,
            "description": "The leg key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/info/legs": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Searches for the inventory legs based on the search criteria.",
        "description": "This is functionally a GET but POST is used to reduce URL length overhead.\n            ",
        "operationId": "nsk_v2_trip_info_legs_post",
        "requestBody": {
          "x-name": "request",
          "description": "The trip information leg query.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripInformationLegQuery"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTripInformationLegv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/info/legs/simple": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Performs a simplified search for trip information by leg, based upon minimal,\nrequired data for the search criteria.",
        "operationId": "nsk_v2_trip_info_legs_simple_get",
        "parameters": [
          {
            "name": "Origin",
            "in": "query",
            "description": "The departure station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The arrival station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "StartTimeInterval",
            "in": "query",
            "description": "The starting time of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "duration",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "EndTimeInterval",
            "in": "query",
            "description": "The end time of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "duration",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Identifier",
            "in": "query",
            "description": "The transportation identifier, such as a flight number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "CarrierCode",
            "in": "query",
            "description": "The carrier code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TripInformationLegv2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/info/simple": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Performs a simplified search for trip information based upon minimal, required data for\nthe search criteria.",
        "operationId": "nsk_v2_trip_info_simple_get",
        "parameters": [
          {
            "name": "NumberOfJourneys",
            "in": "query",
            "description": "When set to null, there will be no limit to the number of journeys to be returned.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The departure station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The arrival station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "StartTimeInterval",
            "in": "query",
            "description": "The starting time of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "duration",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "EndTimeInterval",
            "in": "query",
            "description": "The end time of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "duration",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date of the trip information search.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Identifier",
            "in": "query",
            "description": "The transportation identifier, such as a flight number.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "CarrierCode",
            "in": "query",
            "description": "The carrier code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "FlightType",
            "in": "query",
            "description": "The flight type.\n             \nEnumeration values: 0 = All, 1 = NonStop, 2 = Through, 3 = Direct, 4 = Connect",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/OperationsFlightType"
            },
            "x-position": 10
          }
        ],
        "responses": {
          "200": {
            "description": "The trip information response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTripInformationResponsev2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/move": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Moves a journey on the booking in state.",
        "operationId": "nsk_v2_trip_move_post",
        "requestBody": {
          "x-name": "request",
          "description": "Move request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/trip/move/availability": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Searches for move availability with the full availability search request. This request will allow for total control\nover\nthe configuration. If a property is not set, the default settings (AvailabilitySettings) is used in its place.",
        "description": "Note, this is a post request even though it is only getting information. This is due to the complicated data needed\nin the post data.\n            ",
        "operationId": "nsk_v3_trip_move_availability_post",
        "requestBody": {
          "x-name": "request",
          "description": "The availability move request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityMoveRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The availability response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v3/trip/move/availability/{journeyKey}": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Searches for availability with the simple move request. The simple search request covers the bare minimum search\ncriteria and lets default settings (AvailabilitySettings) configure the rest.",
        "operationId": "nsk_v3_trip_move_availability_journeyKey_get",
        "parameters": [
          {
            "name": "journeyKey",
            "in": "path",
            "required": true,
            "description": "The journey key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PassengerMoveType",
            "in": "query",
            "description": "The passenger move type.\n             \nEnumeration values: 0 = None, 1 = Irop, 2 = Diversion, 4 = FlightClose, 5 = FlyAhead, 6 = SplitJourney, 7 = SelfServiceRebooking",
            "schema": {
              "$ref": "#/components/schemas/MovePassengerJourneyType"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The availability response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/trip/move/availability/selfService": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Self-service search for move availability.",
        "description": "If no BeginDate is provided, it will default to the journey\ndeparture date.\nIf no EndDate is provided, it will default to the begin date + 1\nday.\n            ",
        "operationId": "nsk_v2_trip_move_availability_selfService_get",
        "parameters": [
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The begin date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The availability response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/move/irop": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Performs an IROP move for the booking in state.\nThis endpoint adds additional IROP move functionality for agents. See `/api/nsk/v2/trip/move` for\nIROP functionality not restricted to agents only.",
        "operationId": "nsk_v1_trip_move_irop_post",
        "requestBody": {
          "x-name": "request",
          "description": "IROP move request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IropMoveRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/passengers": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Creates a new booking with the provided passengers.",
        "description": "This endpoint is not for updating passengers on an existing booking.\nFor that purpose, use the \"booking/passengers/{passengerKey}\" endpoints for PUT and PATCH.\n            ",
        "operationId": "nsk_v1_trip_passengers_post",
        "requestBody": {
          "x-name": "passengerRequests",
          "description": "The passengers to be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassengerRequest"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/passiveSegments": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Creates a passive segment and creates a booking if it doesn't already exist.",
        "description": "This endpoint creates a new journey with the passive segment on it. A passive segment cannot\nbe updated, however get and delete work like all other journeys.\n            ",
        "operationId": "nsk_v1_trip_passiveSegments_post",
        "requestBody": {
          "x-name": "request",
          "description": "The passive segment request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassiveSegmentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/trip/rebook/availability": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Rebook search with the current booking defaults.",
        "description": "Requires a booking in state.\nAlthough this endpoint behaves like a GET, POST is used to reduce the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v4_trip_rebook_availability_post",
        "requestBody": {
          "x-name": "request",
          "description": "The rebook request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityRebookRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/trip/rebook/availability/simple": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Simple rebook search with the current booking defaults.",
        "description": "Requires a booking in state.\n            ",
        "operationId": "nsk_v4_trip_rebook_availability_simple_get",
        "parameters": [
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The return date if this is a round trip request.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "LoyaltyFilter",
            "in": "query",
            "description": "The loyalty fare filter.\n             \nEnumeration values: 0 = MonetaryOnly, 1 = PointsOnly, 2 = PointsAndMonetary, 3 = PreserveCurrent",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/LoyaltyFilter"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/schedule": {
      "get": {
        "tags": [
          "trip"
        ],
        "summary": "Retrieves the schedule of flights for a market.",
        "operationId": "nsk_v1_trip_schedule_get",
        "parameters": [
          {
            "name": "Origin",
            "in": "query",
            "description": "The origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "The destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The begin date to search for.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The end date to search for.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 4
          },
          {
            "name": "Type",
            "in": "query",
            "description": "The flight type filter.\n             \nEnumeration values: 0 = None, 1 = NonStop, 2 = Through, 3 = Direct, 4 = Connect, 5 = All",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/FlightType"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfScheduleDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/schedule/adHoc": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Creates an ad hoc flight.",
        "operationId": "nsk_v1_trip_schedule_adHoc_post",
        "requestBody": {
          "x-name": "request",
          "description": "The commit itinerary variation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitItineraryVariationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfItineraryVariation"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v4/trip/sell": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Sells the list of journeys and creates a booking if it doesn't already exist.",
        "operationId": "nsk_v4_trip_sell_post",
        "requestBody": {
          "x-name": "request",
          "description": "The trip sell request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TripSellRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "If successful created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfBooking"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/trip/standby/availability": {
      "post": {
        "tags": [
          "trip"
        ],
        "summary": "Retrieves same-day standby availability relevant to the current state booking.",
        "description": "This endpoint only provisions same-day standby availability. The existing, standard flight availability\nendpoints should still be used for other standby availability search scenarios.\nAlthough this endpoint behaves like a GET, POST reduces the limitations resulting from URL length issues.\n            ",
        "operationId": "nsk_v1_trip_standby_availability_post",
        "requestBody": {
          "x-name": "request",
          "description": "The standby availability request to use in the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityStandbyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAvailabilityv2"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieves the current logged in user.",
        "operationId": "nsk_v1_user_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUser"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates a user and person (used by anonymous to create non agent logins).",
        "description": "This endpoint will create a user based off the system configured customer creation parameters. The associated\nperson has to be of type customer or an exception will be thrown. To change these default settings please configure\nutilities.\n            ",
        "operationId": "nsk_v1_user_post",
        "requestBody": {
          "x-name": "request",
          "description": "The user customer create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCustomerCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates the current logged in user.",
        "operationId": "nsk_v1_user_put",
        "requestBody": {
          "x-name": "request",
          "description": "The user edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Patches the current logged in user.",
        "operationId": "nsk_v1_user_patch",
        "requestBody": {
          "x-name": "request",
          "description": "The user patch request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/bookings": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Searches the logged in user booking upcoming and past bookings.",
        "operationId": "nsk_v1_user_bookings_get",
        "parameters": [
          {
            "name": "AssociatedFirstName",
            "in": "query",
            "description": "An associated passenger/contact first name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AssociatedLastName",
            "in": "query",
            "description": "An associated passenger/contact last name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Flag indicating to search using the phonetic option.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "TripIdentifier",
            "in": "query",
            "description": "Filter by trip identifier.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "Filter by origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "Filter by destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Flag indicating to search archived bookings.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "TripDate",
            "in": "query",
            "description": "Filter by trip date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Filter by starting search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Filter by ending search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "SearchByCustomerNumber",
            "in": "query",
            "description": "Flag indicating to search by the users customer number instead of user identifier.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "ReturnCount",
            "in": "query",
            "description": "The number of results to be returned.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0
            },
            "x-position": 12
          },
          {
            "name": "LastBookingKey",
            "in": "query",
            "description": "The last booking key (used for paging).\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 13
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/bookingsByPassenger": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Searches the logged in user booking upcoming and past bookings.",
        "description": "This is similar to the user booking endpoint but returns more focused trip information.\nThis endpoint will only return data where a booking's passenger customer number matches the current logged in user.\nBookings made by the user where the passenger customer number is not assigned are ignored.\nThe BeginDate will default to today, and the EndDate defaults to one month from today unless a value is provided.\n            ",
        "operationId": "nsk_v1_user_bookingsByPassenger_get",
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "Booking start search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Booking end search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingTripResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/impersonate": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets the logged in users current session roles state.",
        "operationId": "nsk_v1_user_impersonate_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The current session roles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNskRoles"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Impersonates a new role for the logged in user.",
        "operationId": "nsk_v1_user_impersonate_post",
        "requestBody": {
          "x-name": "request",
          "description": "The user impersonate request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserImpersonateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "202": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Resets the logged in users role.",
        "operationId": "nsk_v1_user_impersonate_delete",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/user/password/change": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Changes the logged in user's password.",
        "description": "Validates that the current password is correct before proceeding.\n            ",
        "operationId": "nsk_v2_user_password_change_post",
        "requestBody": {
          "x-name": "request",
          "description": "The change password request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePasswordRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Retrieves the current logged in person.",
        "operationId": "nsk_v1_user_person_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPerson"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates the current logged in person record basic information.",
        "operationId": "nsk_v1_user_person_put",
        "requestBody": {
          "x-name": "request",
          "description": "The person edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches the current logged in person records basic information.",
        "operationId": "nsk_v1_user_person_patch",
        "requestBody": {
          "x-name": "request",
          "description": "The person patch request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/account": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Retrieves the currently logged in person's account and collections.",
        "operationId": "nsk_v1_user_person_account_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/account/collection/{accountCollectionKey}/transactions": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Retrieves the currently logged in person's account collection transactions.",
        "operationId": "nsk_v1_user_person_account_collection_accountCollectionKey_transactions_get",
        "parameters": [
          {
            "name": "accountCollectionKey",
            "in": "path",
            "required": true,
            "description": "The account collection key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/account/transactions": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Retrieves all transactions for all collections for the currently logged in person.",
        "operationId": "nsk_v1_user_person_account_transactions_get",
        "parameters": [
          {
            "name": "StartTime",
            "in": "query",
            "description": "The starting date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "The end date and time of the date range to search in.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "SortByNewest",
            "in": "query",
            "description": "Optional filter to sort results by newest.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 3
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Used to specify the number of records to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Represents the index of the requested paged item.\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/addresses": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all addresses from the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new address on the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/addresses/{personAddressKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific address from the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_personAddressKey_get",
        "parameters": [
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific address on the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_personAddressKey_put",
        "parameters": [
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific address on the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_personAddressKey_patch",
        "parameters": [
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific address on the logged in users person.",
        "operationId": "nsk_v1_user_person_addresses_personAddressKey_delete",
        "parameters": [
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/affiliations": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all affiliations from the logged in users person.",
        "operationId": "nsk_v1_user_person_affiliations_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new affiliation on the logged in users person.",
        "operationId": "nsk_v1_user_person_affiliations_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/affiliations/{personAffiliationKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific affiliation from the logged in users person.",
        "operationId": "nsk_v1_user_person_affiliations_personAffiliationKey_get",
        "parameters": [
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific affiliation on the logged in users person.",
        "operationId": "nsk_v1_user_person_affiliations_personAffiliationKey_put",
        "parameters": [
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific affiliation on the logged in users person.",
        "operationId": "nsk_v1_user_person_affiliations_personAffiliationKey_delete",
        "parameters": [
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/aliases": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all aliases from the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of aliases.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new alias on the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/aliases/{personAliasKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific alias from the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_personAliasKey_get",
        "parameters": [
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific alias on the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_personAliasKey_put",
        "parameters": [
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific alias on the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_personAliasKey_patch",
        "parameters": [
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific alias on the logged in users person.",
        "operationId": "nsk_v1_user_person_aliases_personAliasKey_delete",
        "parameters": [
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/comments": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all comments from the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of comments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonComment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new comment on the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/comments/{personCommentKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific comment from the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_personCommentKey_get",
        "parameters": [
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonComment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific comment on the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_personCommentKey_put",
        "parameters": [
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific comment on the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_personCommentKey_patch",
        "parameters": [
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific comment on the logged in users person.",
        "operationId": "nsk_v1_user_person_comments_personCommentKey_delete",
        "parameters": [
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/emails": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all email addresses from the logged in user's person.",
        "operationId": "nsk_v1_user_person_emails_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of email addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new email address on the logged in user's person.",
        "description": "The \"type\" property for the request is a single character.  See the \"/resources/EmailTypes\"\nendpoint for valid email type codes.\n            ",
        "operationId": "nsk_v1_user_person_emails_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/emails/{personEmailAddressKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific email address from the logged in user's person.",
        "operationId": "nsk_v1_user_person_emails_personEmailAddressKey_get",
        "parameters": [
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific email address on the logged in user's person.",
        "operationId": "nsk_v1_user_person_emails_personEmailAddressKey_put",
        "parameters": [
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific email address on the logged in user's person.",
        "operationId": "nsk_v1_user_person_emails_personEmailAddressKey_patch",
        "parameters": [
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfEmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific email address on the logged in user's person.",
        "operationId": "nsk_v1_user_person_emails_personEmailAddressKey_delete",
        "parameters": [
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/information": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all information from the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new information on the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/information/{personInformationKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific information from the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_personInformationKey_get",
        "parameters": [
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific information on the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_personInformationKey_put",
        "parameters": [
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific information on the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_personInformationKey_patch",
        "parameters": [
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific information on the logged in user's person.",
        "operationId": "nsk_v1_user_person_information_personInformationKey_delete",
        "parameters": [
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/phoneNumbers": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all phone numbers from the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of phone numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new phone number on the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/phoneNumbers/{personPhoneNumberKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific phone number from the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_personPhoneNumberKey_get",
        "parameters": [
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The phone number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific phone number on the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_personPhoneNumberKey_put",
        "parameters": [
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific phone number on the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_personPhoneNumberKey_patch",
        "parameters": [
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific phone number on the logged in users person.",
        "operationId": "nsk_v1_user_person_phoneNumbers_personPhoneNumberKey_delete",
        "parameters": [
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/preferences": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all preferences from the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new preference on the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/preferences/{personPreferenceKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific preference from the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_personPreferenceKey_get",
        "parameters": [
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The preference.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific preference on the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_personPreferenceKey_put",
        "parameters": [
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific preference on the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_personPreferenceKey_patch",
        "parameters": [
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific preference on the logged in users person.",
        "operationId": "nsk_v1_user_person_preferences_personPreferenceKey_delete",
        "parameters": [
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/programs": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all programs from the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of programs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new program on the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/programs/{personProgramKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific program from the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_personProgramKey_get",
        "parameters": [
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The program.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific program on the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_personProgramKey_put",
        "parameters": [
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific program on the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_personProgramKey_patch",
        "parameters": [
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific program on the logged in users person.",
        "operationId": "nsk_v1_user_person_programs_personProgramKey_delete",
        "parameters": [
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/storedPayments": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all stored payments from the logged in users person.",
        "operationId": "nsk_v1_user_person_storedPayments_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of stored payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new stored payment on the logged in users person.",
        "operationId": "nsk_v1_user_person_storedPayments_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/storedPayments/{personStoredPaymentKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific stored payment from the logged in users person.",
        "operationId": "nsk_v1_user_person_storedPayments_personStoredPaymentKey_get",
        "parameters": [
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The stored payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific stored payment on the logged in users person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v1_user_person_storedPayments_personStoredPaymentKey_put",
        "parameters": [
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific stored payment on the logged in users person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v1_user_person_storedPayments_personStoredPaymentKey_patch",
        "parameters": [
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific stored payment on the logged in users person.",
        "operationId": "nsk_v1_user_person_storedPayments_personStoredPaymentKey_delete",
        "parameters": [
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelDocuments": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets all travel documents from the logged in users person.",
        "operationId": "nsk_v1_user_person_travelDocuments_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of travel documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a new travel document on the logged in users person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v1_user_person_travelDocuments_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonTravelDocumentRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelDocuments/{personTravelDocumentKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a specific travel document from the logged in users person.",
        "operationId": "nsk_v1_user_person_travelDocuments_personTravelDocumentKey_get",
        "parameters": [
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a specific travel document on the logged in users person.",
        "operationId": "nsk_v1_user_person_travelDocuments_personTravelDocumentKey_delete",
        "parameters": [
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/user/person/travelDocuments/{personTravelDocumentKey}": {
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a specific travel document on the logged in users person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_user_person_travelDocuments_personTravelDocumentKey_put",
        "parameters": [
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a specific travel document on the logged in users person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_user_person_travelDocuments_personTravelDocumentKey_patch",
        "parameters": [
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets person travel notifications for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_post",
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications/{travelNotificationKey}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_get",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_put",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user/person"
        ],
        "summary": "Patches a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_patch",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The delta mapper travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_delete",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications/{travelNotificationKey}/events": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets notification events for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_events_get",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a notification event for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_events_post",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification event create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications/{travelNotificationKey}/events/{eventType}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a notification event for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_events_eventType_get",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a notification event from a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_events_eventType_delete",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The notification event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications/{travelNotificationKey}/timedEvents": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets notification timed events for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_timedEvents_get",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user/person"
        ],
        "summary": "Creates a notification timed event for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_timedEvents_post",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification timed even create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/person/travelNotifications/{travelNotificationKey}/timedEvents/{timedEventType}": {
      "get": {
        "tags": [
          "user/person"
        ],
        "summary": "Gets a notification timed event for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_get",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user/person"
        ],
        "summary": "Updates a notification timed event for a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_put",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The updated notification timed event request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user/person"
        ],
        "summary": "Deletes a notification timed event from a person travel notification for the logged in user's person.",
        "operationId": "nsk_v1_user_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_delete",
        "parameters": [
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/preferences/skySpeedSettings": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieves the default SkySpeed settings user preferences of the currently logged in user.",
        "operationId": "nsk_v1_user_preferences_skySpeedSettings_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSkySpeedSettingsUserPreferences"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates the default SkySpeed settings user preferences of the currently logged in user.",
        "description": "If the SkySpeed settings of the current user is disabled and an update is made,\nthe settings will automatically be enabled and updated.\n\nIf given, each string property is validated if it exists and is active.\n\nThe collection currency setting can only be CollectionCurrencySetting.None if the collection currency code is\nnull or empty.\n\nA bad request will be returned if the collection currency code and collection currency setting are:\n\n    - Collection Currency Code is not null or empty and the Collection Currency Setting is set to\n    CollectionCurrency.None.\n    - Collection Currency Code is null or empty and the Collection Currency Setting is set to\n    CollectionCurrency.Both (Any value except for CollectionCurrencySetting.None).\n\n            ",
        "operationId": "nsk_v1_user_preferences_skySpeedSettings_put",
        "requestBody": {
          "x-name": "request",
          "description": "The SkySpeed settings user preferences.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SkySpeedSettingsUserPreferences"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/roles": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets all roles from the logged in user.",
        "operationId": "nsk_v1_user_roles_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfUserRole"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates a new role on the logged in user.",
        "operationId": "nsk_v1_user_roles_post",
        "requestBody": {
          "x-name": "request",
          "description": "The new role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/roles/{userRoleKey}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a specific role from the logged in user.",
        "operationId": "nsk_v1_user_roles_userRoleKey_get",
        "parameters": [
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUserRole"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates a specific role on the logged in user.",
        "operationId": "nsk_v1_user_roles_userRoleKey_put",
        "parameters": [
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Patches a specific role on the logged in user.",
        "operationId": "nsk_v1_user_roles_userRoleKey_patch",
        "parameters": [
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfUserRolePatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a specific role on the logged in user.",
        "operationId": "nsk_v1_user_roles_userRoleKey_delete",
        "parameters": [
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/singleSignOnToken": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets all of the single sign on tokens associated with a specific user.",
        "operationId": "nsk_v1_user_singleSignOnToken_get",
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "A collection of single sign on tokens associated with the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfUserSingleSignOnToken"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/user/singleSignOnToken/{providerKey}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a single sign on token associated with a specific user.",
        "operationId": "nsk_v1_user_singleSignOnToken_providerKey_get",
        "parameters": [
          {
            "name": "providerKey",
            "in": "path",
            "required": true,
            "description": "The single sign on provider key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "A single sign on token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUserSingleSignOnToken"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Links the requested token with the logged-in user.",
        "operationId": "nsk_v1_user_singleSignOnToken_providerKey_post",
        "parameters": [
          {
            "name": "providerKey",
            "in": "path",
            "required": true,
            "description": "The single sign on provider key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "tokenRequest",
          "description": "The single sign on token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSignOnTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates an existing token associated with the logged-in user.",
        "operationId": "nsk_v1_user_singleSignOnToken_providerKey_put",
        "parameters": [
          {
            "name": "providerKey",
            "in": "path",
            "required": true,
            "description": "The single sign on provider key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "tokenRequest",
          "description": "The single sign on token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSignOnTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Patches an existing token associated with the logged-in user.",
        "operationId": "nsk_v1_user_singleSignOnToken_providerKey_patch",
        "parameters": [
          {
            "name": "providerKey",
            "in": "path",
            "required": true,
            "description": "The single sign on provider key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "tokenRequest",
          "description": "The single sign on token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfSingleSignOnTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a token associated with the single sign on provider from the logged-in user.",
        "operationId": "nsk_v1_user_singleSignOnToken_providerKey_delete",
        "parameters": [
          {
            "name": "providerKey",
            "in": "path",
            "required": true,
            "description": "The single sign on provider key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new user and person (used by agents to create other users).",
        "description": "This method is used by agents to create other users (either agents or customers).\nUse this method when you want to create both a user and a person at the same time.\n            ",
        "operationId": "nsk_v1_users_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Search user records.",
        "operationId": "nsk_v2_users_get",
        "parameters": [
          {
            "name": "OrganizationCode",
            "in": "query",
            "description": "The organization code to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LocationGroupCode",
            "in": "query",
            "description": "The location group code to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "DomainCode",
            "in": "query",
            "description": "The domain code to search in.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Username",
            "in": "query",
            "description": "The unique username to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "UsernameMatching",
            "in": "query",
            "description": "The matching criteria for the username.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 5
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "The agent's first name to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "FirstNameMatching",
            "in": "query",
            "description": "The matching criteria for the agent's first name.\n             \nEnumeration values: 0 = StartsWith, 1 = EndsWith, 2 = Contains, 3 = ExactMatch",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/MatchCriteria"
            },
            "x-position": 7
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "The agent's last name to search by.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "RoleCode",
            "in": "query",
            "description": "The role code to search with.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "Status",
            "in": "query",
            "description": "The agent status to search by.\n             \nEnumeration values: 0 = Default, 1 = Active, 2 = Pending, 3 = Suspended, 4 = Terminated",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/UserStatus"
            },
            "x-position": 10
          },
          {
            "name": "ReturnCount",
            "in": "query",
            "description": "The number of results to return.\n            ",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "LastIndex",
            "in": "query",
            "description": "The last user index (used for paging).\n            ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 9223372036854775807.0,
              "minimum": 0.0,
              "nullable": true
            },
            "x-position": 12
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of user records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfUserRecord"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new user for a person (used by agents to create other users).",
        "description": "This method is used by agents to create other users (either agents or customers) and connect them with an existing\nperson.\nUse this method when a person already exists and you want to create a user for them.\n            ",
        "operationId": "nsk_v2_users_post",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieves the a specific user.",
        "operationId": "nsk_v1_users_userKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUser"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates the specific user.",
        "operationId": "nsk_v1_users_userKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The user edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches the current logged in user.",
        "operationId": "nsk_v1_users_userKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The user patch request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete the user.",
        "description": "This is a soft delete by setting the user record status to terminated.",
        "operationId": "nsk_v1_users_userKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "User key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/bookings": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Searches the specific user for upcoming and past bookings.",
        "operationId": "nsk_v1_users_userKey_bookings_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "AssociatedFirstName",
            "in": "query",
            "description": "An associated passenger/contact first name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "AssociatedLastName",
            "in": "query",
            "description": "An associated passenger/contact last name.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "PhoneticSearch",
            "in": "query",
            "description": "Flag indicating to search using the phonetic option.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "TripIdentifier",
            "in": "query",
            "description": "Filter by trip identifier.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "Filter by origin station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Destination",
            "in": "query",
            "description": "Filter by destination station code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "SearchArchive",
            "in": "query",
            "description": "Flag indicating to search archived bookings.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "TripDate",
            "in": "query",
            "description": "Filter by trip date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Filter by starting search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Filter by ending search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "SearchByCustomerNumber",
            "in": "query",
            "description": "Flag indicating to search by the users customer number instead of user identifier.\n            ",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "ReturnCount",
            "in": "query",
            "description": "The number of results to be returned.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0
            },
            "x-position": 13
          },
          {
            "name": "LastBookingKey",
            "in": "query",
            "description": "The last booking key (used for paging).\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 14
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/bookingsByPassenger": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Searches the specific user upcoming and past bookings by passenger.",
        "description": "This is similar to the user booking endpoint but returns more focused trip information.\nThis endpoint will only return data where a bookings passenger customer number matches the current logged in user.\nBookings made by the user but where the passenger customer are not assigned are ignored.\nThe BeginDate will default to today, and the EndDate defaults to one month from today unless a value is provided.\n            ",
        "operationId": "nsk_v1_users_userKey_bookingsByPassenger_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Booking start search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Booking end search date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfBookingTripResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/password/change": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Changes a specifics user's password.",
        "operationId": "nsk_v1_users_userKey_password_change_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The change password request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePasswordRequestBase"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/password/reset": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invokes the forgot password reset for a specific user.",
        "operationId": "nsk_v1_users_userKey_password_reset_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "202": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieves the a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user's person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPerson"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates the specific user's person record basic information.",
        "operationId": "nsk_v1_users_userKey_person_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The person edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches the specific user's person records basic information.",
        "operationId": "nsk_v1_users_userKey_person_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The person patch request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/addresses": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all addresses from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/addresses/{personAddressKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific address from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_personAddressKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAddress"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_personAddressKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_personAddressKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAddressEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_addresses_personAddressKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/affiliations": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all affiliations from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_affiliations_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new affiliation for the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_affiliations_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/affiliations/{personAffiliationKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific affiliation from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_affiliations_personAffiliationKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAffiliation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific affiliation for the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_affiliations_personAffiliationKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified affiliation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAffiliationRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific affiliation for the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_affiliations_personAffiliationKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAffiliationKey",
            "in": "path",
            "required": true,
            "description": "The unique person affiliation key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/aliases": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all aliases from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of aliases.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new alias on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/aliases/{personAliasKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific alias from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_personAliasKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonAlias"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific alias on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_personAliasKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific alias on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_personAliasKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonAliasRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific alias on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_aliases_personAliasKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personAliasKey",
            "in": "path",
            "required": true,
            "description": "The unique person alias key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/comments": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all comments from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of comments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonComment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new comment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/comments/{personCommentKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific comment from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_personCommentKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonComment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific comment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_personCommentKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific comment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_personCommentKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCommentRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific comment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_comments_personCommentKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personCommentKey",
            "in": "path",
            "required": true,
            "description": "The unique person comment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/emails": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all email addresses from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_emails_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of email addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new email address on the specific user's person.",
        "description": "The \"type\" property for the request is a single character.  See the \"/resources/EmailTypes\"\nendpoint for valid email type codes.\n            ",
        "operationId": "nsk_v1_users_userKey_person_emails_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/emails/{personEmailAddressKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific email address from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_emails_personEmailAddressKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific email address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_emails_personEmailAddressKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The specific user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific email address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_emails_personEmailAddressKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched email address.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfEmailEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific email address on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_emails_personEmailAddressKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personEmailAddressKey",
            "in": "path",
            "required": true,
            "description": "The unique person email address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/information": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all information from the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new information on the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/information/{personInformationKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific information from the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_personInformationKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonInformation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific information on the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_personInformationKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific information on the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_personInformationKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonInformationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific information on the logged in user's person.",
        "operationId": "nsk_v1_users_userKey_person_information_personInformationKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personInformationKey",
            "in": "path",
            "required": true,
            "description": "The unique person information key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/phoneNumbers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all phone numbers from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of phone numbers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new phone number on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/phoneNumbers/{personPhoneNumberKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific phone number from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_personPhoneNumberKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The phone number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPhoneNumber"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific phone number on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_personPhoneNumberKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific phone number on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_personPhoneNumberKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPhoneNumberRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific phone number on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_phoneNumbers_personPhoneNumberKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPhoneNumberKey",
            "in": "path",
            "required": true,
            "description": "The unique person phone number key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/preferences": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all preferences for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new preference for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/preferences/{personPreferenceKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific preference for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_personPreferenceKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The preference.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonPreference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific preference for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_personPreferenceKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific preference for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_personPreferenceKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched preference.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonPreferenceEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific preference for a specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_preferences_personPreferenceKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personPreferenceKey",
            "in": "path",
            "required": true,
            "description": "The unique person preference key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/programs": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all programs from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of programs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new program on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/programs/{personProgramKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific program from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_personProgramKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The program.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonCustomerProgram"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific program on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_personProgramKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific program on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_personProgramKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person program key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched program.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonCustomerProgramEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific program on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_programs_personProgramKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personProgramKey",
            "in": "path",
            "required": true,
            "description": "The unique person address key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/storedPayments": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all stored payments from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of stored payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new stored payment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/storedPayments/{personStoredPaymentKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific stored payment from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_personStoredPaymentKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The stored payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonStoredPayment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific stored payment on the specific user's person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_personStoredPaymentKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific stored payment on the specific user's person.",
        "description": "To update the account number please DELETE and POST a new stored payment.\n            ",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_personStoredPaymentKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched stored payment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfPersonStoredPaymentUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific stored payment on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_storedPayments_personStoredPaymentKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personStoredPaymentKey",
            "in": "path",
            "required": true,
            "description": "The unique person stored payment key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelDocuments": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all travel documents from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelDocuments_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of travel documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new travel document on the specific user's person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v1_users_userKey_person_travelDocuments_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonTravelDocumentRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelDocuments/{personTravelDocumentKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific travel document from the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelDocuments_personTravelDocumentKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The travel document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific travel document on the specific user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelDocuments_personTravelDocumentKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/users/{userKey}/person/travelDocuments/{personTravelDocumentKey}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific travel document on the specific user's person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_users_userKey_person_travelDocuments_personTravelDocumentKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific travel document on the specific user's person.\nNote: Gender and Date of Birth on the Travel Document will overwrite the values on the related person object.\nThis is by design due to New Skies validation on the Gender property, and on the Travel Document\nDate of Birth being trusted over the person record Date of Birth.",
        "operationId": "nsk_v2_users_userKey_person_travelDocuments_personTravelDocumentKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "personTravelDocumentKey",
            "in": "path",
            "required": true,
            "description": "The unique person travel document key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched travel document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelDocumentEditRequestv2"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets person travel notifications for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications/{travelNotificationKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The person travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPersonTravelNotification"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The delta mapper travel notification edit request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfTravelNotificationEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications/{travelNotificationKey}/events": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets notification events for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_events_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a notification event for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_events_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification event create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications/{travelNotificationKey}/events/{eventType}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a notification event for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_events_eventType_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a notification event from a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_events_eventType_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "description": "The notification event type. \nEnumeration values: 0 = DepartureDelay, 1 = ArrivalDelay, 2 = ScheduleChange, 3 = CheckIn, 4 = GateInformation",
            "schema": {
              "$ref": "#/components/schemas/NotificationEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications/{travelNotificationKey}/timedEvents": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets notification timed events for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_timedEvents_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a notification timed event for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_timedEvents_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The notification timed even create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/person/travelNotifications/{travelNotificationKey}/timedEvents/{timedEventType}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a notification timed event for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfNotificationTimedEvent"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a notification timed event for a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The updated notification timed event request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTimedEventEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a notification timed event from a person travel notification for a user's person.",
        "operationId": "nsk_v1_users_userKey_person_travelNotifications_travelNotificationKey_timedEvents_timedEventType_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "travelNotificationKey",
            "in": "path",
            "required": true,
            "description": "The travel notification key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "timedEventType",
            "in": "path",
            "required": true,
            "description": "The notification timed event type. \nEnumeration values: 0 = Departure, 1 = Arrival",
            "schema": {
              "$ref": "#/components/schemas/NotificationTimedEventType"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/preferences/skySpeedSettings": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieves the default SkySpeed settings user preferences of the specified user.",
        "operationId": "nsk_v1_users_userKey_preferences_skySpeedSettings_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfSkySpeedSettingsUserPreferences"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates the default SkySpeed settings user preferences of the specified user.",
        "description": "If the SkySpeed settings of the current user is disabled and an update is made,\nthe settings will automatically be enabled and updated.\n\nIf given, each string property is validated if it exists and is active.\n\nThe collection currency setting can only be CollectionCurrencySetting.None if the collection currency code is\nnull or empty.\n\nA bad request will be returned if the collection currency code and collection currency setting are:\n\n    - Collection Currency Code is not null or empty and the Collection Currency Setting is set to\n    CollectionCurrency.None.\n    - Collection Currency Code is null or empty and the Collection Currency Setting is set to\n    CollectionCurrency.Both (Any value except for CollectionCurrencySetting.None).\n\n            ",
        "operationId": "nsk_v1_users_userKey_preferences_skySpeedSettings_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The SkySpeed settings user preferences.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SkySpeedSettingsUserPreferences"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all roles for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The collection of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfUserRole"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a new role for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_post",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The new role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/{userKey}/roles/{userRoleKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets a specific role for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_userRoleKey_get",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUserRole"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a specific role for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_userRoleKey_put",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The modified role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleEditRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Patches a specific role for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_userRoleKey_patch",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The patched role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaMapperOfUserRolePatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a specific role for a specific user.",
        "operationId": "nsk_v1_users_userKey_roles_userRoleKey_delete",
        "parameters": [
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "description": "The unique user key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "userRoleKey",
            "in": "path",
            "required": true,
            "description": "The unique user role key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/users/byPerson/{personKey}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieves the a specific user by the person key.",
        "operationId": "nsk_v1_users_byPerson_personKey_get",
        "parameters": [
          {
            "name": "personKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "The user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfUser"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/utilities/stationLocalTime/{stationCode}": {
      "get": {
        "tags": [
          "utilities"
        ],
        "summary": "Retrieves the station local time.",
        "operationId": "nsk_v1_utilities_stationLocalTime_stationCode_get",
        "parameters": [
          {
            "name": "stationCode",
            "in": "path",
            "required": true,
            "description": "The station code to get the local time for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfDateTime"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/voucherIssuance": {
      "post": {
        "tags": [
          "voucherIssuance"
        ],
        "summary": "Creates vouchers based upon data in the request.",
        "description": "This endpoint requires agent permissions.\nNote that creating high volume voucher issuance results in a batch job which may not process immediately.\n            ",
        "operationId": "nsk_v1_voucherIssuance_post",
        "requestBody": {
          "x-name": "request",
          "description": "The voucher issuance request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherIssuanceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/voucherIssuance/{voucherIssuanceKey}": {
      "get": {
        "tags": [
          "voucherIssuance"
        ],
        "summary": "Gets a voucher issuance based upon the voucher issuance key.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_voucherIssuance_voucherIssuanceKey_get",
        "parameters": [
          {
            "name": "voucherIssuanceKey",
            "in": "path",
            "required": true,
            "description": "The voucher issuance key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVoucherIssuance"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/vouchers": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets vouchers based upon data in the request.",
        "description": "This endpoint requires agent permissions.\nIf given a date, one of the following properties are required:\n\n    - CustomerName.LastName\n    - CustomerNumber\n    - Agent\n    \t- Agent.Name\n    \t- Agent.Domain\n\nIf only the begin date is given, the default value of the end date will be the day after the begin date.\nIf only the end date is given, the begin date will be required.\n            ",
        "operationId": "nsk_v2_vouchers_get",
        "parameters": [
          {
            "name": "VoucherIssuanceKey",
            "in": "query",
            "description": "The unique voucher issuance key.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Market.Destination",
            "in": "query",
            "description": "Gets or sets the leg arrival station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Market.Origin",
            "in": "query",
            "description": "Gets or sets the leg departure station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Market.DepartureDate",
            "in": "query",
            "description": "The departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "Market.Identifier",
            "in": "query",
            "description": "The unique transportation identifier.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "Market.CarrierCode",
            "in": "query",
            "description": "The carrier code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "Market.OpSuffix",
            "in": "query",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "Agent.Name",
            "in": "query",
            "description": "The agent name associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "Agent.Domain",
            "in": "query",
            "description": "The domain code associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The ending date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The Page Size, Default 1000\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The LastPageKey, where to start paged query.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 13
          },
          {
            "name": "RecordLocator",
            "in": "query",
            "description": "The record locator associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 14
          },
          {
            "name": "CustomerName.FirstName",
            "in": "query",
            "description": "The first name associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 15
          },
          {
            "name": "CustomerName.LastName",
            "in": "query",
            "description": "The last name associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 16
          },
          {
            "name": "CustomerNumber",
            "in": "query",
            "description": "The customer number associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 20,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 17
          },
          {
            "name": "ActiveOnly",
            "in": "query",
            "description": "The flag to indicate if only active items should be returned.\n            ",
            "schema": {
              "type": "boolean"
            },
            "x-position": 18
          },
          {
            "name": "CultureCode",
            "in": "query",
            "description": "The culture code of the paged request.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 17,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 19
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPagedVouchersResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/vouchers/{voucherKey}": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets a specific voucher based upon the voucher key.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_vouchers_voucherKey_get",
        "parameters": [
          {
            "name": "voucherKey",
            "in": "path",
            "required": true,
            "description": "The voucher key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVoucher"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vouchers"
        ],
        "summary": "Changes the voucher status.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_vouchers_voucherKey_put",
        "parameters": [
          {
            "name": "voucherKey",
            "in": "path",
            "required": true,
            "description": "The voucher key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The voucher update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherUpdateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/vouchers/byAgent": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets a collection of vouchers based on the specified agent information.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v2_vouchers_byAgent_get",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "The agent name associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Domain",
            "in": "query",
            "description": "The domain code associated with the voucher.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The ending date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The Page Size, Default 1000\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The LastPageKey, where to start paged query.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPagedVouchersResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/vouchers/byDate": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Searches for vouchers issued within the given date range.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_vouchers_byDate_get",
        "parameters": [
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return.\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The key returned previously to get the next page of items.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "BeginDate",
            "in": "query",
            "description": "The starting date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The ending date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVouchersSummaryResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/vouchers/byIssuance/{voucherIssuanceKey}": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets vouchers associated with a voucher issuance.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v2_vouchers_byIssuance_voucherIssuanceKey_get",
        "parameters": [
          {
            "name": "voucherIssuanceKey",
            "in": "path",
            "required": true,
            "description": "The voucher issuance key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The Page Size, Default 1000\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The LastPageKey, where to start paged query.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPagedVouchersResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v2/vouchers/byMarket": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets a collection of vouchers based on the market information.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v2_vouchers_byMarket_get",
        "parameters": [
          {
            "name": "Destination",
            "in": "query",
            "description": "Gets or sets the leg arrival station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Origin",
            "in": "query",
            "description": "Gets or sets the leg departure station.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "DepartureDate",
            "in": "query",
            "description": "The departure date.\n            ",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "Identifier",
            "in": "query",
            "description": "The unique transportation identifier.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 4,
              "minLength": 0,
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CarrierCode",
            "in": "query",
            "description": "The carrier code.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 3,
              "minLength": 2,
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "OpSuffix",
            "in": "query",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "schema": {
              "type": "string",
              "maxLength": 1,
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The Page Size, Default 1000\n            ",
            "schema": {
              "type": "integer",
              "maximum": 5000.0,
              "minimum": 10.0,
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "LastPageKey",
            "in": "query",
            "description": "The LastPageKey, where to start paged query.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfPagedVouchersResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/vouchers/byReference/{voucherReferenceNumber}": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Gets a specific voucher based upon the voucher reference number.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_vouchers_byReference_voucherReferenceNumber_get",
        "parameters": [
          {
            "name": "voucherReferenceNumber",
            "in": "path",
            "required": true,
            "description": "The voucher reference number.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVoucher"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/vouchers/configuration": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Performs a shallow call to get all available voucher configurations.",
        "description": "This endpoint requires agent permissions.\nSince this performs a shallow call, some voucher configuration list properties come back empty. To get the complete\ndata, use GET `/api/nsk/v1/vouchers/configuration/{configurationCode}` which performs a deep call to get a specific\nvoucher configuration based on the configuration code.\n            ",
        "operationId": "nsk_v1_vouchers_configuration_get",
        "responses": {
          "200": {
            "description": "The collection of voucher configurations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfVoucherConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/vouchers/configuration/{configurationCode}": {
      "get": {
        "tags": [
          "vouchers"
        ],
        "summary": "Performs a deep call to get a specific voucher configuration based on the configuration code.",
        "description": "This endpoint requires agent permissions.\n            ",
        "operationId": "nsk_v1_vouchers_configuration_configurationCode_get",
        "parameters": [
          {
            "name": "configurationCode",
            "in": "path",
            "required": true,
            "description": "The code of the voucher configuration to retrieve.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The voucher configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfVoucherConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/watchList/{watchListKey}/persons": {
      "get": {
        "tags": [
          "watchList"
        ],
        "summary": "Searches for a collection of watch list persons.",
        "operationId": "nsk_v1_watchList_watchListKey_persons_get",
        "parameters": [
          {
            "name": "watchListKey",
            "in": "path",
            "required": true,
            "description": "The watch list key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "ReferenceNumber",
            "in": "query",
            "description": "The watch list reference number.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfIListOfWatchListPerson"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/nsk/v1/watchList/persons/{watchListPersonKey}": {
      "get": {
        "tags": [
          "watchList"
        ],
        "summary": "Gets a specific watch list person by key.",
        "operationId": "nsk_v1_watchList_persons_watchListPersonKey_get",
        "parameters": [
          {
            "name": "watchListPersonKey",
            "in": "path",
            "required": true,
            "description": "The watch list person key.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponseOfWatchListPerson"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IJsonResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IJsonResponseOfPricingConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PricingConfiguration"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PricingConfiguration": {
        "type": "object",
        "description": "Defines the pricing configuration model.\n            ",
        "additionalProperties": false,
        "properties": {
          "chargeCode": {
            "type": "string",
            "description": "The charge code to be used for all discount records that will be added.\n            ",
            "nullable": true
          },
          "maximumOptimizePercentage": {
            "type": "number",
            "description": "This is the largest sample size active in the service.\n            ",
            "format": "double"
          },
          "settings": {
            "type": "array",
            "description": "The recommendation's settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PricingSetting"
            }
          },
          "providers": {
            "type": "array",
            "description": "The recommendation's providers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PricingProvider"
            }
          }
        }
      },
      "PricingSetting": {
        "type": "object",
        "description": "Defines the pricing setting model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The setting code.\n            ",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The setting value.\n            ",
            "nullable": true
          }
        }
      },
      "PricingProvider": {
        "type": "object",
        "description": "Defines the pricing provider model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The session provider code.\n            ",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The session provider source.\n            ",
            "nullable": true
          },
          "inputParameters": {
            "type": "array",
            "description": "The recommendation session input parameters.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "products": {
            "type": "array",
            "description": "The recommendation session products.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PricingProduct"
            }
          }
        }
      },
      "PricingProduct": {
        "type": "object",
        "description": "Defines the pricing product model.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The pricing product code.\n            ",
            "maxLength": 36,
            "minLength": 0
          },
          "variation": {
            "type": "string",
            "description": "The pricing product variation.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The pricing product type.\n            ",
            "maxLength": 7,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Defines a unique error response.\n            ",
        "additionalProperties": false,
        "properties": {
          "exception": {
            "description": "The original exception that was thrown and all the exception details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Exception"
          },
          "rawMessage": {
            "type": "string",
            "description": "The original raw message set (non-localized).\n            ",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The unique error code.\n            ",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The error message.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The error type.\n            ",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "A unique identifier in numeric form. This is required for Splunk logging. If none is provided a number will be\ngenerated based on code and type.\n            ",
            "format": "int32",
            "maximum": 99999.0,
            "minimum": 0.0,
            "nullable": true
          },
          "details": {
            "type": "object",
            "description": "Dynamic detailed information about the error.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "ActivityId": {
            "type": "string",
            "description": "The unique activity ID for the request.\n            ",
            "nullable": true
          }
        }
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "InnerException": {
            "nullable": true,
            "$ref": "#/components/schemas/Exception"
          },
          "StackTrace": {
            "type": "string",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Message": {
        "type": "object",
        "description": "Defines a unique informational message.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique message code.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The message type.\n            ",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The message's value.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The message's status.\n            ",
            "$ref": "#/components/schemas/MessageStatus"
          },
          "details": {
            "type": "object",
            "description": "Dynamic detailed information about the message.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "MessageStatus": {
        "type": "integer",
        "description": "Defines the message status.\n            \n\n0 = General\n1 = Warning\n2 = Critical",
        "x-enumNames": [
          "General",
          "Warning",
          "Critical"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIListOfPriceOffer": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PriceOffer"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PriceOffer": {
        "type": "object",
        "description": "Defines the price offer model.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates the type of request that was sent.\n            ",
            "nullable": true
          },
          "productReference": {
            "type": "string",
            "description": "Used for data mapping for the requested product.\n            ",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Contains the optimized price from the APO service.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code for the optimized price.\n            ",
            "nullable": true
          },
          "probability": {
            "type": "integer",
            "description": "The probability computation for the result.\n            ",
            "format": "int32"
          },
          "offerCode": {
            "type": "string",
            "description": "The offer code which gave the optimized price.\n            ",
            "nullable": true
          },
          "acceptZero": {
            "type": "boolean",
            "description": "Indicates if the offer accepts a zero price.\n            "
          },
          "chargeCode": {
            "type": "string",
            "description": "Indicates the offer's charge code.\n            ",
            "nullable": true
          },
          "points": {
            "type": "integer",
            "description": "Contains the optimized points from the APO service.\n            ",
            "format": "int32"
          }
        }
      },
      "ApoPriceRequest": {
        "type": "object",
        "description": "Defines the recommend price request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The charge code to be used for all discount records that will be added.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "passengerType": {
            "type": "string",
            "description": "The passenger type.\n            ",
            "nullable": true
          },
          "externalBookingReference": {
            "type": "string",
            "description": "The booking reference associated by the selling system for this transaction.  This value is optional,\nas it is for data mapping purposes only.\n            ",
            "nullable": true
          },
          "stage": {
            "description": "Defines the stage of this transaction.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ApoPricingStage"
          },
          "inputParameters": {
            "type": "array",
            "description": "The collection of Input Parameters to be used for this session.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PriceInputParameters"
            }
          },
          "valueTypes": {
            "type": "array",
            "description": "Defines the price types to be generated by the system.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "products": {
            "type": "array",
            "description": "Contains the products that will be processed.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PriceRequestProduct"
            }
          }
        }
      },
      "ApoPricingStage": {
        "type": "integer",
        "description": "An enumeration to indicate the ancillary pricing options pricing stage.\n            \n\n0 = Look\n1 = Sell\n2 = Book",
        "x-enumNames": [
          "Look",
          "Sell",
          "Book"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PriceInputParameters": {
        "type": "object",
        "description": "Defines the price request model.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The input parameter's code.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "values": {
            "type": "array",
            "description": "The values associated with this input parameter.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PriceRequestProduct": {
        "type": "object",
        "description": "Defines the price request model.\n            ",
        "additionalProperties": false,
        "required": [
          "productReference",
          "source",
          "provider",
          "code"
        ],
        "properties": {
          "productReference": {
            "type": "string",
            "description": "The product reference, used for data mapping. \nThis is the RecommendedPriceRequestProduct.ProductKey field in APO\n            ",
            "minLength": 1
          },
          "source": {
            "type": "string",
            "description": "The product source. \n            ",
            "maxLength": 7,
            "minLength": 0
          },
          "provider": {
            "type": "string",
            "description": "The product provider. \n            ",
            "maxLength": 7,
            "minLength": 0
          },
          "code": {
            "type": "string",
            "description": "The pricing product code.\nThis is the RecommendedPriceRequestProduct.ProductCode field in APO\n            ",
            "maxLength": 36,
            "minLength": 0
          },
          "variation": {
            "type": "string",
            "description": "The pricing product variation. \nThis is the RecommendedPriceRequestProduct.ProductVariationCode field in APO\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The pricing product type. \nThis is the RecommendedPriceRequestProduct.ProductTypeCode field in APO\n            ",
            "maxLength": 7,
            "minLength": 0,
            "nullable": true
          },
          "originalPrice": {
            "type": "number",
            "description": "The product's original price. \n            ",
            "format": "decimal",
            "minimum": 0.0
          },
          "cost": {
            "type": "number",
            "description": "The product cost. \n            ",
            "format": "decimal"
          },
          "available": {
            "type": "integer",
            "description": "The available inventory for this product.\n            ",
            "format": "int32",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "The quantity of this product requested for this session.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "nullable": true
          },
          "segmentProductRatio": {
            "type": "integer",
            "description": "The segment ratio, if available. \n            ",
            "nullable": true
          },
          "inputParameters": {
            "type": "array",
            "description": "The input parameters associated with this product. \nThis is the RecommendedPriceRequestProduct.ProductAttributes field in APO\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PriceInputParameters"
            }
          }
        }
      },
      "IJsonResponseOfEnvironmentHealth": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EnvironmentHealth"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EnvironmentHealth": {
        "type": "object",
        "description": "Defines the environment health details.\n            ",
        "additionalProperties": false,
        "properties": {
          "component": {
            "type": "string",
            "description": "The name of the component.\n            ",
            "nullable": true
          },
          "componentType": {
            "type": "string",
            "description": "The type of component.\n            ",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "The optional details of the health check.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The current health of the component.\n            ",
            "$ref": "#/components/schemas/HealthStatus"
          },
          "nodes": {
            "type": "array",
            "description": "The collection of child health information objects associated with the current object.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HealthInformation"
            }
          }
        }
      },
      "HealthStatus": {
        "type": "integer",
        "description": "Defines the health status for a component.\n            \n\n0 = Unknown\n1 = Ok\n2 = Warning\n3 = Error",
        "x-enumNames": [
          "Unknown",
          "Ok",
          "Warning",
          "Error"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "HealthInformation": {
        "type": "object",
        "description": "Defines the health information details.\n            ",
        "additionalProperties": false,
        "properties": {
          "component": {
            "type": "string",
            "description": "The name of the component.\n            ",
            "nullable": true
          },
          "componentType": {
            "type": "string",
            "description": "The type of component.\n            ",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "The optional details of the health check.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The current health of the component.\n            ",
            "$ref": "#/components/schemas/HealthStatus"
          }
        }
      },
      "IJsonResponseOfListOfRedisEntry": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RedisEntry"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "RedisEntry": {
        "type": "object",
        "description": "Defines an entry in redis.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the entry.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponse": {
        "type": "object",
        "description": "Defines the JSON response contract for a not content type response.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data, this will always be null for errors responses and no content responses.\n            ",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfTokenResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TokenResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "description": "Defines the token response.\n            ",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The generated token.\n            ",
            "nullable": true
          },
          "idleTimeoutInMinutes": {
            "type": "integer",
            "description": "The number of minutes the token can be idle before it times out.\n            ",
            "format": "int32"
          }
        }
      },
      "TokenRequest": {
        "type": "object",
        "description": "Defines the request to gain access to the API.\n            ",
        "additionalProperties": false,
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "The optional name of the calling application.\n            ",
            "nullable": true
          }
        }
      },
      "GraphQlQuery": {
        "type": "object",
        "description": "Graph ql query object.\n            ",
        "additionalProperties": false,
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Graph query.\n            ",
            "minLength": 1
          },
          "variables": {
            "type": "string",
            "description": "Graph variables.\n            ",
            "nullable": true
          },
          "cachedResults": {
            "type": "boolean",
            "description": "Allow caching and the support of etags.\n            "
          },
          "name": {
            "type": "string",
            "description": "Name for the query\n            ",
            "nullable": true
          }
        }
      },
      "GraphQlQueryv2": {
        "type": "object",
        "description": "Graph ql query object.\n            ",
        "additionalProperties": false,
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Graph query.\n            ",
            "minLength": 1
          },
          "variables": {
            "description": "Graph variables.\n            ",
            "nullable": true
          },
          "cachedResults": {
            "type": "boolean",
            "description": "Allow caching and the support of etags.\n            "
          }
        }
      },
      "UpdateVerifiedTravelDocumentsRequest": {
        "type": "object",
        "description": "The model for a dotRez updated verified travel documents request.\n            ",
        "additionalProperties": false,
        "required": [
          "recordLocator",
          "segmentKey",
          "passengerKey",
          "verifiedTravelDocuments"
        ],
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator of the booking.\n            ",
            "minLength": 1
          },
          "segmentKey": {
            "type": "string",
            "description": "The segment key.\n            ",
            "minLength": 1
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "minLength": 1
          },
          "verifiedTravelDocuments": {
            "type": "array",
            "description": "The list of verified travel documents.\n            ",
            "items": {
              "$ref": "#/components/schemas/VerifiedTravelDocument"
            }
          }
        }
      },
      "VerifiedTravelDocument": {
        "type": "object",
        "description": "The model for a dotRez verified travel document.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode",
          "issuedByCode"
        ],
        "properties": {
          "documentTypeCode": {
            "type": "string",
            "description": "The unique travel document type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "issuedByCode": {
            "type": "string",
            "description": "The issuer code for the travel document (country code).\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "isInfant": {
            "type": "boolean",
            "description": "Flag for if this verified travel document is for an infant or not.\n            "
          }
        }
      },
      "IJsonResponseOfInventoryLegv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryLegv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "InventoryLegv2": {
        "type": "object",
        "description": "Defines the inventory leg v2.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique leg key.\n            ",
            "nullable": true
          },
          "legInformation": {
            "description": "The leg information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryLegInformation"
          },
          "operatingInformation": {
            "description": "The leg's market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperatingInformation"
          },
          "identifier": {
            "description": "The leg's transportation identifier information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "designator": {
            "description": "The leg's designator information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "departureTimeUtc": {
            "type": "string",
            "description": "The leg's departure time in UTC.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalTimeUtc": {
            "type": "string",
            "description": "The leg's arrival time in UTC.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "nests": {
            "type": "array",
            "description": "The leg nests.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InventoryLegNest"
            }
          },
          "legMoveControls": {
            "description": "The leg move controls.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegMoveControls"
          },
          "legSsrs": {
            "type": "array",
            "description": "The leg ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegSsr"
            }
          },
          "legCrossReferences": {
            "type": "array",
            "description": "The leg cross references.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegCrossReference"
            }
          }
        }
      },
      "InventoryLegInformation": {
        "type": "object",
        "description": "Represents the inventory leg information model.\n            ",
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "integer",
            "description": "The leg's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "legNumber": {
            "type": "integer",
            "description": "The leg number.\n            "
          },
          "capacity": {
            "type": "integer",
            "description": "The leg's capacity.\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type for the leg.\n            ",
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment type suffix for the leg.\n            ",
            "nullable": true
          },
          "equipmentChange": {
            "type": "boolean",
            "description": "Indicates if there is an equipment change\n            "
          },
          "managed": {
            "type": "boolean",
            "description": "Indicates if the leg is managed.\n            "
          },
          "status": {
            "description": "The leg's status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "prbcCode": {
            "type": "string",
            "description": "The passenger reservation booking configuration (PRBC) code.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The marketing code.\n            ",
            "nullable": true
          },
          "codeShareIndicator": {
            "description": "The code share indicator.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          }
        }
      },
      "LegStatus": {
        "type": "integer",
        "description": "Leg status enumeration.\n            \n\n0 = Normal\n1 = Closed\n2 = Canceled\n3 = Suspended\n5 = ClosedPending\n6 = BlockAllActivities\n7 = Mishap",
        "x-enumNames": [
          "Normal",
          "Closed",
          "Canceled",
          "Suspended",
          "ClosedPending",
          "BlockAllActivities",
          "Mishap"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          5,
          6,
          7
        ]
      },
      "CodeShareIndicator": {
        "type": "integer",
        "description": "Specifies the type of code share agreement.\n            \n\n0 = NonCodeShare\n1 = CodeShareCommercialDuplicate\n2 = SharedDesignatorOrWetLease\n3 = CodeShareHostOperatingCarrier\n4 = CodeShareCommercialDuplicateWithOverrideText\n5 = SharedDesignatorOrWetLeaseWithOverrideText",
        "x-enumNames": [
          "NonCodeShare",
          "CodeShareCommercialDuplicate",
          "SharedDesignatorOrWetLease",
          "CodeShareHostOperatingCarrier",
          "CodeShareCommercialDuplicateWithOverrideText",
          "SharedDesignatorOrWetLeaseWithOverrideText"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "OperatingInformation": {
        "type": "object",
        "description": "Represents the operating information model.\n            ",
        "additionalProperties": false,
        "properties": {
          "comment": {
            "type": "string",
            "description": "The operated by comment field.\n            ",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "opSuffix": {
            "type": "string",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          }
        }
      },
      "TransportationIdentifier": {
        "type": "object",
        "description": "Represents the transportation identifier model data.\n            ",
        "additionalProperties": false,
        "required": [
          "identifier",
          "carrierCode"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2
          },
          "opSuffix": {
            "type": "string",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          }
        }
      },
      "TransportationDesignator": {
        "type": "object",
        "description": "Model information about the traveling arrival and destination details.\n            ",
        "additionalProperties": false,
        "properties": {
          "destination": {
            "type": "string",
            "description": "Gets or sets the leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets the leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "arrival": {
            "type": "string",
            "description": "The arrival date and time local to the arrival station.\n            ",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "The departure date and time local to the departure station.\n            ",
            "format": "date-time"
          }
        }
      },
      "InventoryLegNest": {
        "type": "object",
        "description": "Represents the inventory leg nest model.\n            ",
        "additionalProperties": false,
        "properties": {
          "nestKey": {
            "type": "string",
            "description": "The unique identifier for the nest within a leg.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "type": {
            "description": "The nest type.\n            ",
            "$ref": "#/components/schemas/NestType"
          },
          "lid": {
            "type": "integer",
            "description": "The nest's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The nest's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "classes": {
            "type": "array",
            "description": "The collection of leg classes within the nest.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InventoryLegClass"
            }
          }
        }
      },
      "NestType": {
        "type": "integer",
        "description": "Nest type enumeration.\n            \n\n0 = Default\n1 = Net\n2 = Serial\n3 = OneBooking",
        "x-enumNames": [
          "Default",
          "Net",
          "Serial",
          "OneBooking"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "InventoryLegClass": {
        "type": "object",
        "description": "The inventory leg class model.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The class of service type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ClassOfServiceType"
          },
          "rank": {
            "type": "integer",
            "description": "The class of service rank.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "authorizedUnits": {
            "type": "integer",
            "description": "The class of service authorized unit count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "allotted": {
            "type": "integer",
            "description": "The class of service allotted count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "latestAdvancedReservation": {
            "type": "integer",
            "description": "The class of service's latest advanced purchase reservation.\nA value of zero indicates that there is no restriction.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "classKey": {
            "type": "string",
            "description": "The unique identifier for the leg class.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The class status.\n            ",
            "$ref": "#/components/schemas/ClassStatus"
          },
          "seatsSold": {
            "description": "The number of seats sold for the class of service\nof this leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatsSoldBase"
          }
        }
      },
      "ClassOfServiceType": {
        "type": "integer",
        "description": "The class of service type enumeration.\n            \n\n0 = Default\n1 = Normal\n2 = Discrete\n3 = NonNested\n4 = NegoAllotment\n5 = ProrataAllotment\n6 = OperatingBlockspace\n7 = MarketingBlockspace",
        "x-enumNames": [
          "Default",
          "Normal",
          "Discrete",
          "NonNested",
          "NegoAllotment",
          "ProrataAllotment",
          "OperatingBlockspace",
          "MarketingBlockspace"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "ClassStatus": {
        "type": "integer",
        "description": "Indicates whether a leg class may be used or not.\n            \n\n1 = Active\n2 = InActive\n3 = AvsOpen\n4 = AvsOnRequest\n5 = AvsClosed",
        "x-enumNames": [
          "Active",
          "InActive",
          "AvsOpen",
          "AvsOnRequest",
          "AvsClosed"
        ],
        "enum": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "SeatsSoldBase": {
        "type": "object",
        "description": "Represents the seats sold base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "integer",
            "description": "The number of seats sold.\n            "
          },
          "throughTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a through flight.\n            "
          },
          "nonStopTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a non-stop flight.\n            "
          },
          "connectTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a connecting flight.\n            "
          }
        }
      },
      "LegMoveControls": {
        "type": "object",
        "description": "The leg move control model information.\n            ",
        "additionalProperties": false,
        "properties": {
          "moveOutDays": {
            "type": "integer",
            "description": "The maximum number of days this leg can be moved out.\n            "
          },
          "moveBackDays": {
            "type": "integer",
            "description": "The maximum number of days this leg can be moved back.\n            "
          },
          "flyAhead": {
            "description": "The fly-ahead related information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FlyAheadControls"
          }
        }
      },
      "FlyAheadControls": {
        "type": "object",
        "description": "The leg fly-ahead control model information.\n            ",
        "additionalProperties": false,
        "properties": {
          "offerStatus": {
            "description": "The fly-ahead offer status for the leg.\n            ",
            "$ref": "#/components/schemas/FlyAheadOfferStatus"
          },
          "isCandidate": {
            "type": "boolean",
            "description": "True if the leg is available for use in fly-ahead candidates; false otherwise.\n            "
          },
          "departBeforeMinutes": {
            "type": "integer",
            "description": "The number of minutes before departure of the current journey that a\ncandidate journey is allowed to depart if that candidate journey\ncontains this leg.\n            ",
            "maximum": 30240.0,
            "minimum": 0.0
          },
          "departAfterMinutes": {
            "type": "integer",
            "description": "The number of minutes after departure of the current journey that a\ncandidate journey is allowed to depart if that candidate journey\ncontains this leg.\n            ",
            "maximum": 30240.0,
            "minimum": 0.0
          },
          "arrivalAfterMinutes": {
            "type": "integer",
            "description": "The number of minutes after arrival of the current journey that a\ncandidate journey is allowed to depart if that candidate journey\ncontains this leg.\n            ",
            "maximum": 30240.0,
            "minimum": 0.0
          },
          "soldThresholdPercent": {
            "type": "integer",
            "description": "The maximum resulting sold threshold percentage for the candidate\njourney if this leg is present in that candidate journey.  Min = 0,\nMax = 255, Default = 100.\n            ",
            "maximum": 255.0,
            "minimum": 0.0
          },
          "mustBeSameJourneyType": {
            "type": "boolean",
            "description": "Controls whether the candidate journey must be of the same journey type.\n            "
          }
        }
      },
      "FlyAheadOfferStatus": {
        "type": "integer",
        "description": "The fly ahead offer status enumeration.\n            \n\n0 = None\n1 = Involuntary\n2 = Voluntary\n3 = DisabledIfFirstLeg",
        "x-enumNames": [
          "None",
          "Involuntary",
          "Voluntary",
          "DisabledIfFirstLeg"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "LegSsr": {
        "type": "object",
        "description": "A model representing a leg ssr summary.\n            ",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "description": "The number of Ssrs available.\n            "
          },
          "ssrNestCode": {
            "type": "string",
            "description": "The SSR nest code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "lid": {
            "type": "integer",
            "description": "The maximum number of SSRs authorized to be sold on a nest.\n            "
          },
          "sold": {
            "type": "integer",
            "description": "The number of SSRs sold in the SSR nest.\n            "
          },
          "unitSold": {
            "type": "integer",
            "description": "The units of space sold for the SSR.\n            "
          }
        }
      },
      "LegCrossReference": {
        "type": "object",
        "description": "Represents the inventory leg cross reference data.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The key for the manifest leg.\n            ",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "The inventory leg cross reference number.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "marketInformation": {
            "description": "Information about the market arrival and destination details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "MarketInformation": {
        "type": "object",
        "description": "Model information about the market arrival and destination details.\n            ",
        "additionalProperties": false,
        "required": [
          "destination",
          "origin",
          "departureDate",
          "identifier"
        ],
        "properties": {
          "destination": {
            "type": "string",
            "description": "Gets or sets the leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets the leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "identifier": {
            "description": "Gets or sets the leg arrival station.\n            ",
            "$ref": "#/components/schemas/TransportationIdentifier"
          }
        }
      },
      "IJsonResponseOfBoardPassengerResponsev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardPassengerResponsev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardPassengerResponsev2": {
        "type": "object",
        "description": "Defines the response from boarding a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerName": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "recordLocator": {
            "type": "string",
            "description": "The booking record locator.\n            ",
            "nullable": true
          },
          "securityAuthorizationList": {
            "type": "array",
            "description": "The list of security authorization. Will be populated when there are negative APP directives during secure\nboarding.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SecurityAuthorizationInformation"
            }
          }
        }
      },
      "Name": {
        "type": "object",
        "description": "Defines a common name.\n            ",
        "additionalProperties": false,
        "properties": {
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "SecurityAuthorizationInformation": {
        "type": "object",
        "description": "The passenger's government security authorization information for boarding clearance and access to airport\nrestricted areas.\n            ",
        "additionalProperties": false,
        "properties": {
          "governmentMessageType": {
            "description": "The corresponding message type for this authorization.\n            ",
            "$ref": "#/components/schemas/GovernmentMessageType"
          },
          "authorizationStatus": {
            "type": "string",
            "description": "The clearance based on the program driver (APIS, APPS, SF/AQQ).\n            ",
            "nullable": true
          },
          "securityAuthorizationText": {
            "type": "array",
            "description": "List of government security authorization free text.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SecurityAuthorizationText"
            }
          },
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "forInfant": {
            "type": "boolean",
            "description": "Whether the passenger is an infant or not.\n            "
          },
          "programDescription": {
            "type": "string",
            "description": "Indicates the user friendly program description associated with the government message type.\nThis is added for display purposes for the UI. So that they will know what to display for the specific government\nmessage type.\n            ",
            "nullable": true
          },
          "driverName": {
            "type": "string",
            "description": "Indicates the driver name associated with the government message type.\nThis is added so that the UI will know, during override, what driver name to indicate in an override request.\n            ",
            "nullable": true
          },
          "checkinOverrideAllowed": {
            "type": "boolean",
            "description": "Indicates whether a check-in override is allowed.\n            "
          },
          "outageMode": {
            "type": "boolean",
            "description": "Indicates whether in outage mode or not.\n            "
          },
          "validOverrideResponseCodes": {
            "type": "array",
            "description": "List of all government response codes that can be entered during the override process.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AuthorizationStatusConfiguration"
            }
          },
          "isDepartureValue": {
            "type": "boolean",
            "description": "Used with APPS to represent if this clearance is associated with the departure country.\n            "
          },
          "checkinAllowed": {
            "type": "boolean",
            "description": "Determines whether this authorization allows the passenger to check-in.\n            "
          },
          "boardingAllowed": {
            "type": "boolean",
            "description": "Determines whether this authorization allows the passenger to board.\n            "
          },
          "authorizationStatusDescription": {
            "type": "string",
            "description": "This will contain the user-friendly description of the authorization status.\n            ",
            "nullable": true
          },
          "screeningType": {
            "description": "The government screening type.\n            ",
            "$ref": "#/components/schemas/GovernmentScreeningType"
          },
          "electronicTravelAuthorization": {
            "description": "The government generic electronic travel authorization value.\n            ",
            "$ref": "#/components/schemas/ElectronicTravelAuthorization"
          },
          "manuallyOverridden": {
            "type": "boolean",
            "description": "Determines whether that passenger's authorization is manually overridden.\n            "
          },
          "autoOutage": {
            "type": "boolean",
            "description": "Indicates if the authorization was automatically overridden due to outage.\n            "
          },
          "clearanceCountry": {
            "type": "string",
            "description": "This authorization status is from this country, if applicable. 2-character country code.\n            ",
            "nullable": true
          },
          "errorResponse": {
            "type": "boolean",
            "description": "An error was returned from the government.\n            "
          }
        }
      },
      "GovernmentMessageType": {
        "type": "integer",
        "description": "Defines the government message type.\n            \n\n0 = None\n1 = Aqq\n2 = SecureFlight\n3 = Apps\n4 = Apis\n5 = Iapp\n6 = Eub\n7 = Iatci\n8 = DocCheck\n9 = DocsOnly",
        "x-enumNames": [
          "None",
          "Aqq",
          "SecureFlight",
          "Apps",
          "Apis",
          "Iapp",
          "Eub",
          "Iatci",
          "DocCheck",
          "DocsOnly"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "SecurityAuthorizationText": {
        "type": "object",
        "description": "The passenger's government security authorization free text.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The code qualifier.\n            ",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Free text.\n            ",
            "nullable": true
          },
          "displayText": {
            "type": "boolean",
            "description": "Whether or not to display the free text.\n            "
          }
        }
      },
      "AuthorizationStatusConfiguration": {
        "type": "object",
        "description": "The government security authorization status configuration that corresponds to a government security message type.\nAuthorization status configuration is the object used when getting the config and the validOverrideResponseCodes.\nThe object for the passenger is government security authorization.\n            ",
        "additionalProperties": false,
        "properties": {
          "authorizationStatusCode": {
            "type": "string",
            "description": "The boarding directive returned from the government agency.\n            ",
            "nullable": true
          },
          "checkInAllowed": {
            "type": "boolean",
            "description": "Indicates whether this authorization allows the passenger to check-in.\n            "
          },
          "boardingPassPrintingAllowed": {
            "type": "boolean",
            "description": "Indicates whether this authorization allows the passenger to be issued or print a boarding pass.\n            "
          },
          "boardingAllowed": {
            "type": "boolean",
            "description": "Indicates whether this authorization allows the passenger to board.\n            "
          },
          "selfCheckInAllowed": {
            "type": "boolean",
            "description": "Indicates whether this authorization allows the passenger to check-in via the web, kiosk, mobile, etc.\n            "
          },
          "authorizationStatusDescription": {
            "type": "string",
            "description": "This will contain the user-friendly description of the Authorization Status.\nIt will be used during the override process as a list of valid Authorization Status Code.\n            ",
            "nullable": true
          },
          "screeningType": {
            "description": "The government screening type code.\n            ",
            "$ref": "#/components/schemas/GovernmentScreeningType"
          },
          "customFreeText": {
            "type": "string",
            "description": "Custom text including error messages the UI can display to the agent based on the Authorization Status Code.\n            ",
            "nullable": true
          },
          "electronicTravelAuthorization": {
            "description": "Government generic electronic travel authorization values. This is used by the UI to differentiate which exception\ntype to throw based on the authorization status code ESTA value.\n            ",
            "$ref": "#/components/schemas/ElectronicTravelAuthorization"
          },
          "boardingPassPrintText": {
            "type": "string",
            "description": "Holds custom boarding pass text like SSSS for Selectee or TSA Pre-check.\n            ",
            "nullable": true
          },
          "promptToVerifyId": {
            "type": "boolean",
            "description": "Indicates whether the UI should prompt to verify the passenger's Id.\n            "
          },
          "errorResponse": {
            "type": "boolean",
            "description": "Indicates whether an error was returned from the government like 4Z.\n            "
          },
          "incompleteDirective": {
            "type": "boolean",
            "description": "Indicates whether part of the authorization status is missing.\nFor example, \"0?\" is an incomplete secure flight authorization status.\n            "
          },
          "validOverrideAuthorizationCode": {
            "type": "boolean",
            "description": "Indicates whether this code should be included in the override prompt.\n            "
          },
          "validGatePassOverrideAuthorizationCode": {
            "type": "boolean",
            "description": "Indicates whether this code should be included in the override prompt for gate pass.\n            "
          },
          "checkInOverrideAllowed": {
            "type": "boolean",
            "description": "Will be set if in SF/iAPP outage mode or for APPS D, T or U directives.\n            "
          },
          "gatePassAllowed": {
            "type": "boolean",
            "description": "Indicates whether this authorization allows the passenger to have a gate pass.\n            "
          },
          "gatePassOverrideAllowed": {
            "type": "boolean",
            "description": "Indicates whether the gate pass authorization status can be manually overridden.\n            "
          },
          "canResubmitWithoutQualifiedChange": {
            "type": "boolean",
            "description": "Indicates whether it is allowed to resubmit this authorization without a qualified change during GetClearance for\naction. This does not indicate whether the authorization should be resubmitted.\n            "
          },
          "checkInOverrideAllowedMode": {
            "description": "Sets when a manual override can occur.\n            ",
            "$ref": "#/components/schemas/CheckinOverrideAllowedMode"
          }
        }
      },
      "GovernmentScreeningType": {
        "type": "integer",
        "description": "Defines the government security screening type.\n            \n\n0 = Normal\n1 = LowRisk\n2 = Enhanced\n3 = Inhibited",
        "x-enumNames": [
          "Normal",
          "LowRisk",
          "Enhanced",
          "Inhibited"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ElectronicTravelAuthorization": {
        "type": "integer",
        "description": "Defines the electronic travel authorization for the government boarding directive.\nFor US Secure Flight, this is the electronic system for travel authorization (ESTA) value.\n            \n\n0 = Denied\n1 = NotApplicable\n2 = OnFile\n3 = NotOnFile\n4 = DocumentRequired\n5 = Error\n6 = TimeOut",
        "x-enumNames": [
          "Denied",
          "NotApplicable",
          "OnFile",
          "NotOnFile",
          "DocumentRequired",
          "Error",
          "TimeOut"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "CheckinOverrideAllowedMode": {
        "type": "integer",
        "description": "Defines the check-in override allowed mode.\n            \n\n0 = Never\n1 = Outage\n2 = Normal\n3 = Always",
        "x-enumNames": [
          "Never",
          "Outage",
          "Normal",
          "Always"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "BoardPassengerBaseRequest": {
        "type": "object",
        "description": "Defines the base request to board a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "skipSecurityChecks": {
            "type": "boolean",
            "description": "Whether to skip security checks or not.\n            "
          },
          "overrideEstaRequirement": {
            "type": "boolean",
            "description": "Identifies if the Electronic System for Travel Authorization (ESTA) requirement is being overriden.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfBoardAllPassengerResponsev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardAllPassengerResponsev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardAllPassengerResponsev2": {
        "type": "object",
        "description": "Defines the response from boarding all passengers.\n            ",
        "additionalProperties": false,
        "properties": {
          "securityAuthorizationList": {
            "type": "array",
            "description": "The list of security authorization. Will be populated when there are negative APP directives during secure\nboarding.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SecurityAuthorizationInformation"
            }
          },
          "passengerName": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "recordLocator": {
            "type": "string",
            "description": "The booking record locator.\n            ",
            "nullable": true
          },
          "boarded": {
            "type": "boolean",
            "description": "Whether the passenger was boarded or not.\n            "
          }
        }
      },
      "IJsonResponseOfPassengerWeightBalanceSummary": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerWeightBalanceSummary"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerWeightBalanceSummary": {
        "type": "object",
        "description": "The passenger weight balance summary model.\n            ",
        "additionalProperties": false,
        "properties": {
          "travelSummary": {
            "description": "The travel summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelSummary"
          },
          "totalManifestCounts": {
            "description": "The manifest count totals.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestCounts"
          },
          "thruManifestedCount": {
            "type": "integer",
            "description": "The thru manifested count.\n            ",
            "format": "int32"
          },
          "baggageSummary": {
            "description": "The baggage summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageSummary"
          },
          "travelClasses": {
            "type": "array",
            "description": "The manifest count totals based on travel class.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestTravelClass"
            }
          },
          "zones": {
            "type": "array",
            "description": "The manifest count totals based on zone.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestZone"
            }
          },
          "bookedSegments": {
            "type": "array",
            "description": "The manifest count totals based on segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestBookedSegment"
            }
          }
        }
      },
      "TravelSummary": {
        "type": "object",
        "description": "Represents the travel summary information.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "Status of the flight summary.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "number": {
            "type": "string",
            "description": "Number of the flight.\n            ",
            "nullable": true
          },
          "scheduledDepartureTime": {
            "type": "string",
            "description": "Scheduled departure time.\n            ",
            "format": "date-time"
          },
          "scheduledArrivalTime": {
            "type": "string",
            "description": "Scheduled arrival time.\n            ",
            "format": "date-time"
          },
          "estimatedDepartureTime": {
            "type": "string",
            "description": "Estimated departure time.\n            ",
            "format": "date-time"
          },
          "estimatedArrivalTime": {
            "type": "string",
            "description": "Estimated arrival time.\n            ",
            "format": "date-time"
          },
          "actualDepartureTime": {
            "type": "string",
            "description": "Actual departure time.\n            ",
            "format": "date-time"
          },
          "actualArrivalTime": {
            "type": "string",
            "description": "Actual arrival time.\n            ",
            "format": "date-time"
          },
          "departureLtv": {
            "type": "integer",
            "description": "Departure LTV time offset in minutes.  To convert from Local time to UTC time you would\nneed to subtract this value for the current local time.\n            "
          },
          "arrivalLtv": {
            "type": "integer",
            "description": "Arrival LTV time offset in minutes.  To convert from Local time to UTC time you would\nneed to subtract this value for the current local time.\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "Equipment type.\n            ",
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "Equipment type suffix.\n            ",
            "nullable": true
          },
          "marketingConfigurationCode": {
            "type": "string",
            "description": "Marketing configuration code.\n            ",
            "nullable": true
          },
          "salesConfigurationCode": {
            "type": "string",
            "description": "Sales configuration code.\n            ",
            "nullable": true
          },
          "market": {
            "description": "InventoryLegKey about the flight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "ManifestCounts": {
        "type": "object",
        "description": "The manifest counts base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalManifested": {
            "type": "integer",
            "description": "The total manifested count.\n            ",
            "format": "int32"
          },
          "totalCheckIn": {
            "type": "integer",
            "description": "The total check-in count.\n            ",
            "format": "int32"
          },
          "totalNoShow": {
            "type": "integer",
            "description": "The total no show count.\n            ",
            "format": "int32"
          },
          "totalStandby": {
            "type": "integer",
            "description": "The total standby count.\n            ",
            "format": "int32"
          },
          "totalBoarded": {
            "type": "integer",
            "description": "The total boarded count.\n            ",
            "format": "int32"
          }
        }
      },
      "BaggageSummary": {
        "type": "object",
        "description": "The Baggage summary model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bagCount": {
            "type": "integer",
            "description": "The total bag counts.\n            ",
            "format": "int32"
          },
          "bagWeight": {
            "type": "integer",
            "description": "The total bag weights.\n            ",
            "format": "int32"
          },
          "weightType": {
            "description": "The weight unit type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "baggageDetails": {
            "type": "array",
            "description": "The collection of baggage details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BaggageDetails"
            }
          }
        }
      },
      "WeightType": {
        "type": "integer",
        "description": "Weight Type enumeration.\n            \n\n0 = Default\n1 = Pounds\n2 = Kilograms",
        "x-enumNames": [
          "Default",
          "Pounds",
          "Kilograms"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "BaggageDetails": {
        "type": "object",
        "description": "Defines the baggage model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bagCount": {
            "type": "integer",
            "description": "The total bag counts.\n            ",
            "format": "int32"
          },
          "bagWeight": {
            "type": "integer",
            "description": "The total bag weights.\n            ",
            "format": "int32"
          },
          "weightType": {
            "description": "The weight unit type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "baggageCode": {
            "type": "string",
            "description": "The baggage code.\n            ",
            "nullable": true
          }
        }
      },
      "ManifestTravelClass": {
        "type": "object",
        "description": "The manifest travel class model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The travel class code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "baggageSummary": {
            "description": "The baggage summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageSummary"
          },
          "passengersSummaries": {
            "type": "array",
            "description": "The passengers summary.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengersSummary"
            }
          }
        }
      },
      "PassengersSummary": {
        "type": "object",
        "description": "The passenger count summary model.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The passenger status.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "totalMaleCount": {
            "type": "integer",
            "description": "The total male count.\n            ",
            "format": "int32"
          },
          "totalFemaleCount": {
            "type": "integer",
            "description": "The total female count.\n            ",
            "format": "int32"
          },
          "totalChildCount": {
            "type": "integer",
            "description": "The total child count.\n            ",
            "format": "int32"
          },
          "totalInfantCount": {
            "type": "integer",
            "description": "The total infant count.\n            ",
            "format": "int32"
          }
        }
      },
      "LiftStatus": {
        "type": "integer",
        "description": "Lift status enumeration.\n            \n\n0 = Default\n1 = CheckedIn\n2 = Boarded\n3 = NoShow",
        "x-enumNames": [
          "Default",
          "CheckedIn",
          "Boarded",
          "NoShow"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ManifestZone": {
        "type": "object",
        "description": "The manifest zone model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "integer",
            "description": "The zone code.\n            "
          },
          "capacity": {
            "type": "integer",
            "description": "The zone capacity.\n            "
          },
          "baggageSummary": {
            "description": "The zone baggage summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageSummary"
          },
          "passengersSummaries": {
            "type": "array",
            "description": "The zone passengers summary.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengersSummary"
            }
          }
        }
      },
      "ManifestBookedSegment": {
        "type": "object",
        "description": "The manifest booked segment model.\n            ",
        "additionalProperties": false,
        "properties": {
          "counts": {
            "description": "The manifest counts base.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestCounts"
          },
          "baggageDetails": {
            "description": "The baggage details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageDetailsBase"
          },
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "travelClasses": {
            "type": "array",
            "description": "The travel class.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestTravelClass"
            }
          },
          "nonConnectingPassengers": {
            "description": "Passengers with no connections.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NonConnectingPassengers"
          },
          "connectingPassengers": {
            "type": "array",
            "description": "Passengers who have connecting segments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ConnectingPassengers"
            }
          }
        }
      },
      "BaggageDetailsBase": {
        "type": "object",
        "description": "The unit baggage base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bagCount": {
            "type": "integer",
            "description": "The total bag counts.\n            ",
            "format": "int32"
          },
          "bagWeight": {
            "type": "integer",
            "description": "The total bag weights.\n            ",
            "format": "int32"
          },
          "weightType": {
            "description": "The weight unit type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "NonConnectingPassengers": {
        "type": "object",
        "description": "The model for passengers with no connections.\n            ",
        "additionalProperties": false,
        "properties": {
          "counts": {
            "description": "No connection total counts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestCounts"
          },
          "baggageDetails": {
            "description": "No connection baggage unit counts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageDetailsBase"
          }
        }
      },
      "ConnectingPassengers": {
        "type": "object",
        "description": "Model representing passengers booked on a specified connecting segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "counts": {
            "description": "No connection total counts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestCounts"
          },
          "baggageDetails": {
            "description": "No connection baggage unit counts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageDetailsBase"
          },
          "segmentInformation": {
            "description": "Market information for a specified segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "travelClasses": {
            "type": "array",
            "description": "Segment travel classes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestTravelClass"
            }
          }
        }
      },
      "IJsonResponseOfInventoryLegClass": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryLegClass"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DeltaMapperOfInventoryClassEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The class of service type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ClassOfServiceType"
          },
          "rank": {
            "type": "integer",
            "description": "The class of service rank.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "authorizedUnits": {
            "type": "integer",
            "description": "The class of service authorized unit count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "allotted": {
            "type": "integer",
            "description": "The class of service allotted count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "latestAdvancedReservation": {
            "type": "integer",
            "description": "The class of service's latest advanced purchase reservation.\nA value of zero indicates that there is no restriction.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "DeltaMapperPatch": {
        "type": "object",
        "description": "Delta mapper patch updates a specific property of an object using non dynamic information useful in languages like\nGraph Ql.\n            ",
        "additionalProperties": false,
        "properties": {
          "stringValue": {
            "type": "string",
            "description": "Value in string form.\n            ",
            "nullable": true
          },
          "numericValue": {
            "type": "number",
            "description": "Value in string form.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "The property route ex name or name\\first.\n            ",
            "nullable": true
          },
          "jsonValue": {
            "type": "string",
            "description": "The string representation of the objects value.\n            ",
            "nullable": true
          }
        }
      },
      "InventoryClassEditRequest": {
        "type": "object",
        "description": "Represents the edit request for an individual inventory\nleg nest class.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The class of service type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ClassOfServiceType"
          },
          "rank": {
            "type": "integer",
            "description": "The class of service rank.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "authorizedUnits": {
            "type": "integer",
            "description": "The class of service authorized unit count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "allotted": {
            "type": "integer",
            "description": "The class of service allotted count.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "latestAdvancedReservation": {
            "type": "integer",
            "description": "The class of service's latest advanced purchase reservation.\nA value of zero indicates that there is no restriction.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "IJsonResponseOfInventoryLeg": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryLeg"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "InventoryLeg": {
        "type": "object",
        "description": "Defines the inventory leg.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier for this leg.\n            ",
            "nullable": true
          },
          "designator": {
            "description": "The transportation designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment typ\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment type suffix.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "prbcCode": {
            "type": "string",
            "description": "The passenger reservation booking configuration (PRBC) code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The marketing code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "codeShareIndicator": {
            "description": "The code share indicator.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          },
          "operatingCarrierCode": {
            "type": "string",
            "description": "The operating carrier code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "operatedByText": {
            "type": "string",
            "description": "The operated by text.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeltaMapperOfInventoryLegEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The leg status.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegStatusRequestType"
          },
          "lid": {
            "type": "integer",
            "description": "The leg's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "InventoryLegEditRequest": {
        "type": "object",
        "description": "Represents the inventory leg edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The leg status.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegStatusRequestType"
          },
          "lid": {
            "type": "integer",
            "description": "The leg's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "LegStatusRequestType": {
        "type": "integer",
        "description": "The leg status request enumeration.\n            \n\n0 = Normal\n1 = Suspended\n2 = BlockAllActivities",
        "x-enumNames": [
          "Normal",
          "Suspended",
          "BlockAllActivities"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfInventoryLegNest": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryLegNest"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DeltaMapperOfInventoryNestEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "integer",
            "description": "The nest's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The nest's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "InventoryNestEditRequest": {
        "type": "object",
        "description": "Represents the edit request for an individual inventory leg nest.\n            ",
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "integer",
            "description": "The nest's lid.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The nest's adjusted capacity.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "sendAvsMessages": {
            "type": "boolean",
            "description": "Specifies if an AVS messages should be sent for changes.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfEquipmentSwapPassenger": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EquipmentSwapPassenger"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EquipmentSwapPassenger": {
        "type": "object",
        "description": "Defines the moved passenger as a result of swapping equipment.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger alternate key because NewSkies gives us back the PassengerId\n            ",
            "nullable": true
          },
          "passengerName": {
            "description": "The name of the passenger that was swapped.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator for the passenger.\n            ",
            "nullable": true
          },
          "oldSeat": {
            "description": "The seat on the old equipment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentSwapSeat"
          },
          "newSeat": {
            "description": "The seat on the new equipment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentSwapSeat"
          },
          "identifier": {
            "description": "The flight on which the passenger lost a seat assignment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "departureStation": {
            "type": "string",
            "description": "Airport code where the lost seat assignment begins.\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "Airport code where the lost seat assignment ends.\n            ",
            "nullable": true
          },
          "liftStatus": {
            "description": "The lift status of the passenger who has a lost seat assignment.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          }
        }
      },
      "EquipmentSwapSeat": {
        "type": "object",
        "description": "Defines the moved seat as a result of swapping equipment.\n            ",
        "additionalProperties": false,
        "properties": {
          "row": {
            "type": "integer",
            "description": "The row of the aircraft the seat is in.\n            "
          },
          "column": {
            "type": "string",
            "description": "The column of the aircraft the seat is in.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "cabinOfService": {
            "type": "string",
            "description": "The cabin of services the seat is in.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          }
        }
      },
      "EquipmentSwapRequest": {
        "type": "object",
        "description": "Defines the equipment swap request.\n            ",
        "additionalProperties": false,
        "properties": {
          "marketInformation": {
            "description": "The market information for the flight to swap equipment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type to switch to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment type suffix to switch to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "prbcCode": {
            "type": "string",
            "description": "The passenger reservation booking configuration (PRBC) code to switch to.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The marketing code to switch to.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "updateOperatingInformation": {
            "type": "boolean",
            "description": "Indicates whether to update operating information.\n            "
          },
          "codeShareIndicator": {
            "description": "The code share indicator to switch to.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          },
          "operatingCarrierCode": {
            "type": "string",
            "description": "The operating carrier code to switch to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "operatedByText": {
            "type": "string",
            "description": "The operated by text to switch to.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "preserveAus": {
            "type": "boolean",
            "description": "Whether to preserve available units (au's) or not.\n            "
          },
          "preserveInventoryLid": {
            "type": "boolean",
            "description": "Whether to preserve the inventory lid or not.\n            "
          }
        }
      },
      "IJsonResponseOfAssignTailNumbersResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AssignTailNumbersResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AssignTailNumbersResponse": {
        "type": "object",
        "description": "Defines the response from assigning a tail number(s).\n            ",
        "additionalProperties": false,
        "properties": {
          "needEquipmentSwap": {
            "type": "boolean",
            "description": "Whether an equipment swap needs to be performed or not.\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type to swap the leg to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment type suffix to swap the leg to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AssignTailNumberRequest": {
        "type": "object",
        "description": "Defines the request to assign a tail number for a leg.\n            ",
        "additionalProperties": false,
        "required": [
          "legKey",
          "tailNumber"
        ],
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The leg key to assign a tail number to.\n            ",
            "minLength": 1
          },
          "tailNumber": {
            "type": "string",
            "description": "The tail number.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "ignoreEquipmentDifference": {
            "type": "boolean",
            "description": "This flag is set to true to ignore the Aircraft Configuration difference\nbetween the one set to FlightNumber and the one set to TailNumber.\nUnder normal circumstances, a user will be prompted to record the tail number\nassignment as an equipment swap.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPassengerDocumentCheckResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDocumentCheckResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerDocumentCheckResponse": {
        "type": "object",
        "description": "Model for passenger document check response.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger alternative key.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "documentCheckStatus": {
            "description": "The document check status of the passenger.\n            ",
            "$ref": "#/components/schemas/DocumentCheckStatus"
          }
        }
      },
      "DocumentCheckStatus": {
        "type": "integer",
        "description": "Represents the status of a document after performing a third party document check.\n            \n\n0 = None\n1 = Ok\n2 = Conditional\n3 = NotOk",
        "x-enumNames": [
          "None",
          "Ok",
          "Conditional",
          "NotOk"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfIListOfBoardAllPassengerResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardAllPassengerResponse"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardAllPassengerResponse": {
        "type": "object",
        "description": "Defines the response from boarding all passengers.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerName": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "recordLocator": {
            "type": "string",
            "description": "The booking record locator.\n            ",
            "nullable": true
          },
          "boarded": {
            "type": "boolean",
            "description": "Whether the passenger was boarded or not.\n            "
          }
        }
      },
      "PassengerBagEditRequest": {
        "type": "object",
        "description": "A model for a request to update the passenger bags.\n            ",
        "additionalProperties": false,
        "required": [
          "baggageCount",
          "passengerKey",
          "baggageKey",
          "recordLocator"
        ],
        "properties": {
          "allowBaggageOnNonHosted": {
            "type": "boolean",
            "description": "The flag to indicate if the baggage request is allowed to process baggage for non-hosted flights.\n            "
          },
          "weight": {
            "type": "integer",
            "description": "The baggage weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "processAsIatci": {
            "type": "boolean",
            "description": "The flag to indicate if the request should process as an IATCI scenario.\n            "
          },
          "baggageCount": {
            "type": "integer",
            "description": "The number of bags to process for the update.\n            ",
            "format": "int32"
          },
          "baggageTypeCode": {
            "type": "string",
            "description": "The baggage type code for the update request.\nThis can only be updated if the baggage weight is changed at the same time, and if\nthe baggage type code is active.\n            ",
            "nullable": true
          },
          "segmentKey": {
            "type": "string",
            "description": "The segment key to update.  If the journey key is set, the request will process all\nsegments associated with the journey, and will ignore this value.\n            ",
            "nullable": true
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key to update.  If the journey key is set, the request will process all\nsegments associated with the journey, and will ignore the segment key value.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key to update.\n            ",
            "minLength": 1
          },
          "baggageKey": {
            "type": "string",
            "description": "The baggage key to update.\n            ",
            "minLength": 1
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator for the booking to update.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfIListOfBagTagPrinter": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BagTagPrinter"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BagTagPrinter": {
        "type": "object",
        "description": "The bag tag printer model.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The bag tag printer name.\n            ",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "The bag tag printer location.\n            ",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "The bag tag printer address.\n            ",
            "nullable": true
          },
          "port": {
            "type": "string",
            "description": "The bag tag printer port.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The bag tag printer description.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfActivityProduct": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ActivityProduct"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ActivityProduct": {
        "type": "object",
        "description": "Defines an availability search result.\n            ",
        "additionalProperties": false,
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The unique product result key.\n            ",
            "nullable": true
          },
          "isPreferred": {
            "type": "boolean",
            "description": "Flag indicating if this item is preferred.\n            "
          },
          "isNew": {
            "type": "boolean",
            "description": "Flag indicating if this item is new.\n            "
          },
          "externalLocator": {
            "type": "string",
            "description": "The external system locator code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for all.\n            ",
            "nullable": true
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The various descriptions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "thumbnailFileName": {
            "type": "string",
            "description": "The provided thumbnail file name.\n            ",
            "nullable": true
          },
          "amounts": {
            "description": "The search result amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductPriceBreakdown"
          },
          "address": {
            "description": "The address of the result.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderAddress"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "images": {
            "type": "array",
            "description": "The collection of display images.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "locations": {
            "type": "array",
            "description": "The collection of locations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LocationBase"
            }
          },
          "participants": {
            "type": "array",
            "description": "The collection of participating participants.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantBase"
            }
          },
          "productVariations": {
            "type": "array",
            "description": "The collection of product variations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            }
          },
          "criteria": {
            "description": "The search criteria of the product.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnCriteria"
          },
          "category": {
            "description": "The activity product category.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Category"
          },
          "warning": {
            "description": "The activity product warning.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Warning"
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          }
        }
      },
      "Descriptions": {
        "type": "object",
        "description": "Defines the search results different descriptions.\n            ",
        "additionalProperties": false,
        "properties": {
          "short": {
            "type": "string",
            "description": "The short description.\n            ",
            "nullable": true
          },
          "long": {
            "type": "string",
            "description": "The long description.\n            ",
            "nullable": true
          },
          "formatType": {
            "type": "string",
            "description": "The content format type of the long description.\n            ",
            "nullable": true
          }
        }
      },
      "ProductPriceBreakdown": {
        "type": "object",
        "description": "Defines the search results price calculations.\n            ",
        "additionalProperties": false,
        "properties": {
          "minPrice": {
            "type": "number",
            "description": "The minimum price offered.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price offered.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "displayPrice": {
            "type": "number",
            "description": "The display price to be shown.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "OrderAddress": {
        "type": "object",
        "description": "Defines an address with GPS coordinates.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "nullable": true
          },
          "coordinates": {
            "description": "The GPS coordinates associated with this item address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Coordinate"
          }
        }
      },
      "Coordinate": {
        "type": "object",
        "description": "The defined coordinates of a location.\n            ",
        "additionalProperties": false,
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "type": "string",
            "description": "The locations latitude.\n            ",
            "minLength": 1
          },
          "longitude": {
            "type": "string",
            "description": "The locations longitude.\n            ",
            "minLength": 1
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "description": "Defines a common phone number.\n            ",
        "additionalProperties": false,
        "required": [
          "number",
          "type"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The phone number without any formatting characters.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "type": {
            "description": "The phone number type.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          }
        }
      },
      "PhoneNumberType": {
        "type": "integer",
        "description": "Defines the types of phone numbers.\n            \n\n0 = Other\n1 = Home\n2 = Work\n3 = Mobile\n4 = Fax",
        "x-enumNames": [
          "Other",
          "Home",
          "Work",
          "Mobile",
          "Fax"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "Image": {
        "type": "object",
        "description": "Defines an available image.\n            ",
        "additionalProperties": false,
        "required": [
          "imageKey"
        ],
        "properties": {
          "imageKey": {
            "type": "string",
            "description": "The unique key for this image.\n            ",
            "minLength": 1
          },
          "fileName": {
            "type": "string",
            "description": "File name.\n            ",
            "nullable": true
          },
          "fileExtension": {
            "type": "string",
            "description": "File extension.\n            ",
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "The binary image data.\n            ",
            "format": "byte",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The image description.\n            ",
            "nullable": true
          },
          "typeCode": {
            "type": "string",
            "description": "The image type code.\n            ",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Returns true if this image is the group default.\n            "
          }
        }
      },
      "LocationBase": {
        "type": "object",
        "description": "Defines base location details.\n            ",
        "additionalProperties": false,
        "required": [
          "code",
          "usageDate"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique location code.\n            ",
            "minLength": 1
          },
          "usageDate": {
            "type": "string",
            "description": "The usage date at this location.\n            ",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "ParticipantBase": {
        "type": "object",
        "description": "Defines the stored participant information.\n            ",
        "additionalProperties": false,
        "required": [
          "participantTypeCode"
        ],
        "properties": {
          "participantTypeCode": {
            "type": "string",
            "description": "The participant's type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "isPrimary": {
            "type": "boolean",
            "description": "The flag indicating the participant is the owner.\n            "
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The participant's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ProductVariation": {
        "type": "object",
        "description": "Defines a product variation result.\n            ",
        "additionalProperties": false,
        "properties": {
          "productVariationKey": {
            "type": "string",
            "description": "The unique product variation key.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The product's description.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "attributes": {
            "type": "array",
            "description": "The collection of product variation attributes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariationAttribute"
            }
          },
          "catalog": {
            "type": "array",
            "description": "The collection of product variation catalogs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariationCatalog"
            }
          }
        }
      },
      "ProductVariationAttribute": {
        "type": "object",
        "description": "Defines the product variation attribute result.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The product variation attribute code.\n            ",
            "nullable": true
          },
          "typeCode": {
            "type": "string",
            "description": "The product variation attribute type code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the product variation attribute.\n            ",
            "nullable": true
          },
          "typeDescription": {
            "type": "string",
            "description": "The product variation attribute type description.\n            ",
            "nullable": true
          }
        }
      },
      "ProductVariationCatalog": {
        "type": "object",
        "description": "Defines a product variations catalog results.\n            ",
        "additionalProperties": false,
        "properties": {
          "catalogKey": {
            "type": "string",
            "description": "The unique catalog key.\n            ",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The catalog code.\n            ",
            "nullable": true
          },
          "comparisonKey": {
            "type": "string",
            "description": "The comparison key.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The variation descriptions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "amounts": {
            "description": "The variations catalog amount breakdown.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductVariationCatalogAmounts"
          },
          "inventoryGrouping": {
            "description": "Determines how the inventory quantity is counted.\n            ",
            "$ref": "#/components/schemas/InventoryQuantityGrouping"
          },
          "inventoryQuantity": {
            "type": "integer",
            "description": "The actual number available.\n            ",
            "format": "int32"
          },
          "sellQuantity": {
            "type": "integer",
            "description": "The number available to sell.\n            ",
            "format": "int32"
          },
          "usageDate": {
            "type": "string",
            "description": "The usage date.\n            ",
            "format": "date-time"
          },
          "paymentAction": {
            "description": "The configured payment action.\n            ",
            "$ref": "#/components/schemas/PaymentAction"
          }
        }
      },
      "ProductVariationCatalogAmounts": {
        "type": "object",
        "description": "Defines a product variation catalog calculated amounts.\n            ",
        "additionalProperties": false,
        "properties": {
          "basePrice": {
            "type": "number",
            "description": "The base price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "listingPrice": {
            "type": "number",
            "description": "The suggested listing price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "markupAmount": {
            "type": "number",
            "description": "The markup amount.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "estimatedTotalTaxes": {
            "type": "number",
            "description": "The estimated total taxes.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "estimatedTotalFees": {
            "type": "number",
            "description": "The estimated total fees.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "estimatedPrice": {
            "type": "number",
            "description": "The estimated price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "discount": {
            "nullable": true,
            "$ref": "#/components/schemas/Discount"
          }
        }
      },
      "Discount": {
        "type": "object",
        "description": "Defines a discount.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The discount code.\n            ",
            "nullable": true
          },
          "discountTypeCode": {
            "type": "string",
            "description": "The discount's type code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The discount description.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The discount amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "InventoryQuantityGrouping": {
        "type": "integer",
        "description": "Defines the inventory quantity grouping and how inventory is counted.\n            \n\n0 = Existing\n1 = Total",
        "x-enumNames": [
          "Existing",
          "Total"
        ],
        "enum": [
          0,
          1
        ]
      },
      "PaymentAction": {
        "type": "integer",
        "description": "Defines payment action that should be taken by selling system for this service.\n            \n\n1 = SellingSystemCollects\n2 = PassThroughHold\n3 = NoPaymentRequired\n4 = ReferToSupplierMessage\n5 = PassThroughCharge",
        "x-enumNames": [
          "SellingSystemCollects",
          "PassThroughHold",
          "NoPaymentRequired",
          "ReferToSupplierMessage",
          "PassThroughCharge"
        ],
        "enum": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "AddOnCriteria": {
        "type": "object",
        "description": "Defines the product results criteria returned.\n            ",
        "additionalProperties": false,
        "properties": {
          "departmentCode": {
            "type": "string",
            "description": "The department code.\n            ",
            "nullable": true
          },
          "companyCode": {
            "type": "string",
            "description": "The company code.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code to search with.\n            ",
            "nullable": true
          }
        }
      },
      "Category": {
        "type": "object",
        "description": "Defines the product category.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The category code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "displaySequence": {
            "type": "integer",
            "description": "The display sequence.\n            ",
            "format": "int32"
          },
          "minimumPrice": {
            "type": "number",
            "description": "The minimum price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "maximumPrice": {
            "type": "number",
            "description": "The maximum price.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "Warning": {
        "type": "object",
        "description": "Defines the product warning.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The warning code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The warning description.\n            ",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "The warning text.\n            ",
            "nullable": true
          },
          "chargeOrigin": {
            "description": "The origin of the charge in Travel Commerce.\n            ",
            "$ref": "#/components/schemas/ChargeOrigin"
          }
        }
      },
      "ChargeOrigin": {
        "type": "integer",
        "description": "Defines the origin of an addOn charge.\n            \n\n0 = Internal\n1 = External\n2 = Unknown",
        "x-enumNames": [
          "Internal",
          "External",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ActivitySimpleRequest": {
        "type": "object",
        "description": "Defines the query for generic travel commerce activities.\n            ",
        "additionalProperties": false,
        "required": [
          "station",
          "beginDate"
        ],
        "properties": {
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "station": {
            "type": "string",
            "description": "The station code for this city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants with which to search.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          }
        }
      },
      "SearchSortType": {
        "type": "integer",
        "description": "Defines the search sorting types.\n            \n\n0 = SupplierDefined\n1 = Price\n2 = Rating\n3 = Name\n4 = Category\n5 = VendorDescription\n6 = Preferred\n7 = Relevance",
        "x-enumNames": [
          "SupplierDefined",
          "Price",
          "Rating",
          "Name",
          "Category",
          "VendorDescription",
          "Preferred",
          "Relevance"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "ParticipantCriteria": {
        "type": "object",
        "description": "Defines the participant criteria.\n            ",
        "additionalProperties": false,
        "required": [
          "participantTypeCode"
        ],
        "properties": {
          "participantTypeCode": {
            "type": "string",
            "description": "The participant's type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "isPrimary": {
            "type": "boolean",
            "description": "The flag indicating the participant is the owner.\n            "
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The participant's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The name of the participant.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "IJsonResponseOfQuotedProduct": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/QuotedProduct"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "QuotedProduct": {
        "type": "object",
        "description": "Defines a quoted product and all of its containing orders.\n            ",
        "additionalProperties": false,
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The quoted product key.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The order's address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderAddress"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of available phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "locations": {
            "type": "array",
            "description": "The collection of order locations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderLocation"
            }
          },
          "orders": {
            "type": "array",
            "description": "The quoted product orders.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/QuotedOrder"
            }
          }
        }
      },
      "OrderLocation": {
        "type": "object",
        "description": "Defines a location.\n            ",
        "additionalProperties": false,
        "required": [
          "code",
          "usageDate"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique location code.\n            ",
            "minLength": 1
          },
          "usageDate": {
            "type": "string",
            "description": "The usage date at this location.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The location description.\n            ",
            "nullable": true
          },
          "utcOffset": {
            "type": "number",
            "description": "The UTC offset.\n            ",
            "format": "float"
          }
        }
      },
      "QuotedOrder": {
        "type": "object",
        "description": "Defines a product order.\n            ",
        "additionalProperties": false,
        "properties": {
          "orderKey": {
            "type": "string",
            "description": "The unique order key.\n            ",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Flag indicating if the order is active.\n            "
          },
          "criteria": {
            "description": "The specific order criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderCriteria"
          },
          "thumbnailFileName": {
            "type": "string",
            "description": "The thumbnail file name.\n            ",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity.\n            ",
            "format": "int32"
          },
          "usageDate": {
            "type": "string",
            "description": "The usage date for this order.\n            ",
            "format": "date-time"
          },
          "externalLocator": {
            "type": "string",
            "description": "The third party external locator.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The orders description.\n            ",
            "nullable": true
          },
          "descriptionFormatType": {
            "type": "string",
            "description": "The order descriptions format type.\n            ",
            "nullable": true
          },
          "productDescription": {
            "type": "string",
            "description": "The products description.\n            ",
            "nullable": true
          },
          "productVariationDescription": {
            "type": "string",
            "description": "The products variations description.\n            ",
            "nullable": true
          },
          "paymentAction": {
            "description": "The payment action.\n            ",
            "$ref": "#/components/schemas/PaymentAction"
          },
          "amounts": {
            "description": "The pricing breakdown.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderPriceBreakdown"
          },
          "terms": {
            "type": "array",
            "description": "The collection of terms and conditions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Term"
            }
          },
          "cancellationTerms": {
            "type": "array",
            "description": "The collection of cancellation terms and conditions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Term"
            }
          },
          "details": {
            "type": "array",
            "description": "The collection of product variation details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariationDetail"
            }
          },
          "fees": {
            "type": "array",
            "description": "The collection of applied fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderFee"
            }
          },
          "notes": {
            "type": "array",
            "description": "The collection of notes about the order.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            }
          },
          "productVariationKey": {
            "type": "string",
            "description": "The unique product variation key.\n            ",
            "nullable": true
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          },
          "catalogKey": {
            "type": "string",
            "description": "The quoted catalog key.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The product type code.\n            ",
            "$ref": "#/components/schemas/ProductTypeCode"
          },
          "isValid": {
            "type": "boolean",
            "description": "Flag indicating the order is valid.\n            "
          },
          "isNew": {
            "type": "boolean",
            "description": "Flag indicating the order is flagged as new.\n            "
          },
          "cultureCode": {
            "type": "string",
            "description": "The order's culture code.\n            ",
            "nullable": true
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of available personalizations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Personalization"
            }
          },
          "parameters": {
            "type": "array",
            "description": "The collection of dynamic order input parameters.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          }
        }
      },
      "OrderCriteria": {
        "type": "object",
        "description": "Defines a products order criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "The country code (source or market of the customer).\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code.\n            ",
            "nullable": true
          },
          "companyCode": {
            "type": "string",
            "description": "The company code.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code to search with.\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code.\n            ",
            "nullable": true
          },
          "supplierCode": {
            "type": "string",
            "description": "The suppliers code.\n            ",
            "nullable": true
          },
          "vendorCode": {
            "type": "string",
            "description": "The orders vendor.\n            ",
            "nullable": true
          }
        }
      },
      "OrderPriceBreakdown": {
        "type": "object",
        "description": "Defines all the different order price breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "display": {
            "description": "The display prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "initial": {
            "description": "The initial base prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "markup": {
            "description": "The markup prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "listed": {
            "description": "The list prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "listedDiscount": {
            "description": "The list discount prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "discount": {
            "description": "The discount prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "handling": {
            "description": "The handling charge prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "handlingDiscount": {
            "description": "The handling charge discount prices.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "dueNow": {
            "description": "The amounts due now at payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AmountDue"
          },
          "dueLater": {
            "description": "The amounts due later at pickup.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AmountDue"
          },
          "personalizations": {
            "type": "number",
            "description": "The personalized total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "taxable": {
            "type": "number",
            "description": "The taxable total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "services": {
            "type": "number",
            "description": "The services total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "fees": {
            "type": "number",
            "description": "The fees total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The overall cost.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "taxRate": {
            "type": "integer",
            "description": "The applied tax rate.\n            ",
            "format": "int32"
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Flag indicating if taxes are exempt.\n            "
          },
          "taxAtUnitPrice": {
            "type": "boolean",
            "description": "Flag indicating if taxed at the unit price.\n            "
          }
        }
      },
      "Amount": {
        "type": "object",
        "description": "Defines an amount base price and total price.\n            ",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "number",
            "description": "The base amount value.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "AmountDue": {
        "type": "object",
        "description": "Defines the amounts due for an order.\n            ",
        "additionalProperties": false,
        "properties": {
          "preTax": {
            "type": "number",
            "description": "The pre tax total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "tax": {
            "type": "number",
            "description": "The tax total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The total.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "Term": {
        "type": "object",
        "description": "Defines the terms and conditions of an order.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The terms and conditions code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "terms": {
            "type": "string",
            "description": "The terms.\n            ",
            "nullable": true
          }
        }
      },
      "ProductVariationDetail": {
        "type": "object",
        "description": "Defines a products variation detail.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The product variation detail code.\n            ",
            "nullable": true
          },
          "styleCode": {
            "type": "string",
            "description": "The style code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The product variation detail description.\n            ",
            "nullable": true
          }
        }
      },
      "OrderFee": {
        "type": "object",
        "description": "Defines a order fee.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The fee code.\n            ",
            "nullable": true
          },
          "feeCategoryCode": {
            "type": "string",
            "description": "The charge type code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The fee description.\n            ",
            "nullable": true
          },
          "amount": {
            "description": "The fees amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "foreignAmount": {
            "description": "The fees foreign amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Amount"
          },
          "type": {
            "description": "The type of fee applied.\n            ",
            "$ref": "#/components/schemas/OrderFeeType"
          },
          "isWaiveable": {
            "type": "boolean",
            "description": "Flag indicating if they specific fee is waiveable.\n            "
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "isChargeable": {
            "type": "boolean",
            "description": "The currency code.\n            "
          }
        }
      },
      "OrderFeeType": {
        "type": "integer",
        "description": "Defines the travel commerce fee types.\n            \n\n0 = Default\n1 = Tax\n2 = Markup\n3 = Discount",
        "x-enumNames": [
          "Default",
          "Tax",
          "Markup",
          "Discount"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "OrderNote": {
        "type": "object",
        "description": "Defines a order note.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The notes text.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The notes description (used to identity the note).\n            ",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The modified date.\n            ",
            "format": "date-time"
          }
        }
      },
      "ProductTypeCode": {
        "type": "integer",
        "description": "Defines the different travel commerce types.\n            \n\n0 = Default\n1 = Insurance\n2 = Activity\n3 = Hotel\n4 = Car",
        "x-enumNames": [
          "Default",
          "Insurance",
          "Activity",
          "Hotel",
          "Car"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "Personalization": {
        "type": "object",
        "description": "Defines an available personalization for an add-on.\n            ",
        "additionalProperties": false,
        "properties": {
          "personalizationKey": {
            "type": "string",
            "description": "The unique personalization key.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount if valid. If the price is not valid the price will be null.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "The available limit allowed.\n            ",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The personalization description to show.\n            ",
            "nullable": true
          },
          "dataType": {
            "description": "The display data type.\n            ",
            "$ref": "#/components/schemas/PersonalizationDataType"
          },
          "inputRequired": {
            "type": "boolean",
            "description": "Flag indicating that user input is required.\n            "
          },
          "options": {
            "type": "array",
            "description": "The collection of personalization parameter options.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonalizationParameter"
            }
          }
        }
      },
      "PersonalizationDataType": {
        "type": "integer",
        "description": "Defines the different types of personalization data types.\n            \n\n0 = Unknown\n1 = Bool\n2 = List\n3 = Text\n4 = Date",
        "x-enumNames": [
          "Unknown",
          "Bool",
          "List",
          "Text",
          "Date"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "PersonalizationParameter": {
        "type": "object",
        "description": "Defines a personalization parameter. A parameter is used for display purposes to show what is considered an\nacceptable response.\n            ",
        "additionalProperties": false,
        "properties": {
          "parameterKey": {
            "type": "string",
            "description": "The unique parameter key.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The parameters description.\n            ",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating that the parameter is the default.\n            "
          }
        }
      },
      "Parameter": {
        "type": "object",
        "description": "Defines a supplier parameter.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code for a supplier parameter.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          }
        }
      },
      "QuoteTokenRequest": {
        "type": "object",
        "description": "Defines a product quote token request.\n            ",
        "additionalProperties": false,
        "required": [
          "productKey"
        ],
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "items": {
            "type": "array",
            "description": "The selected unique product variations catalog keys and quantities.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/QuoteTokenCatalogRequest"
            }
          }
        }
      },
      "QuoteTokenCatalogRequest": {
        "type": "object",
        "description": "Defines a quote token catalog request. This request is used for quoting a specific products product variation\ncatalog item.\n            ",
        "additionalProperties": false,
        "required": [
          "catalogKey",
          "quantity"
        ],
        "properties": {
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "quantity": {
            "type": "integer",
            "description": "The desired quantity.\n            ",
            "format": "int32"
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          }
        }
      },
      "SelectedPersonalization": {
        "type": "object",
        "description": "Defines a selected personalization.\n            ",
        "additionalProperties": false,
        "required": [
          "personalizationKey",
          "parameterKey",
          "quantity"
        ],
        "properties": {
          "personalizationKey": {
            "type": "string",
            "description": "The unique personalization key selected.\n            ",
            "minLength": 1
          },
          "parameterKey": {
            "type": "string",
            "description": "The unique personalization parameter key selected.\n            ",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "description": "The parameter input value.\n            ",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The parameter quantity.\n            ",
            "format": "int32"
          }
        }
      },
      "SellTokenRequest": {
        "type": "object",
        "description": "Defines a product sell token request.\n            ",
        "additionalProperties": false,
        "required": [
          "productKey"
        ],
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "items": {
            "type": "array",
            "description": "The selected unique product variations catalog keys and quantities.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SellTokenCatalogRequest"
            }
          },
          "primaryPassengerKey": {
            "type": "string",
            "description": "The primary passenger key. If the the passenger key is not set it defaults to the first passenger on\nthe booking.\n            ",
            "nullable": true
          }
        }
      },
      "SellTokenCatalogRequest": {
        "type": "object",
        "description": "Defines a sell token catalog request. This request is used for selling a specific products product variation\ncatalog item.\n            ",
        "additionalProperties": false,
        "required": [
          "catalogKey",
          "quantity"
        ],
        "properties": {
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "quantity": {
            "type": "integer",
            "description": "The desired quantity.\n            ",
            "format": "int32"
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          },
          "parameters": {
            "type": "object",
            "description": "The collection of dynamic order parameters to include.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCarProduct": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CarProduct"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CarProduct": {
        "type": "object",
        "description": "Defines a car product result.\n            ",
        "additionalProperties": false,
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The unique product result key.\n            ",
            "nullable": true
          },
          "isPreferred": {
            "type": "boolean",
            "description": "Flag indicating this item is preferred.\n            "
          },
          "isNew": {
            "type": "boolean",
            "description": "Flag indicating this item is new.\n            "
          },
          "externalLocator": {
            "type": "string",
            "description": "The external system locator code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for everything.\n            ",
            "nullable": true
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The various descriptions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "thumbnailFileName": {
            "type": "string",
            "description": "The provided thumbnail file name.\n            ",
            "nullable": true
          },
          "amounts": {
            "description": "The search result amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductPriceBreakdown"
          },
          "address": {
            "description": "The address of the result.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderAddress"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "images": {
            "type": "array",
            "description": "The collection of display images.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "origin": {
            "type": "string",
            "description": "The origin station code for the city.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "The destination station code if different than the origin.\n            ",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "description": "The collection of participating participants.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantBase"
            }
          },
          "productVariations": {
            "type": "array",
            "description": "The collection of product variations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            }
          },
          "criteria": {
            "description": "The search criteria of the product.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnCriteria"
          },
          "category": {
            "description": "The car product category.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Category"
          },
          "warning": {
            "description": "The car product warning.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Warning"
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          }
        }
      },
      "ProductRequest": {
        "type": "object",
        "description": "Defines the query for a destination request used in car and insurance types.\n            ",
        "additionalProperties": false,
        "required": [
          "origin",
          "beginDate",
          "endDate"
        ],
        "properties": {
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string",
            "description": "The origin station code for the city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The destination station code if different than the origin.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants with which to search.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          }
        }
      },
      "QuoteCarRequest": {
        "type": "object",
        "description": "Defines a product quote item request used for a singular catalog item.\n            ",
        "additionalProperties": false,
        "required": [
          "productKey",
          "catalogKey"
        ],
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          }
        }
      },
      "SellCarRequest": {
        "type": "object",
        "description": "Defines a product quote item request used for a singular catalog item.\n            ",
        "additionalProperties": false,
        "required": [
          "catalogKey",
          "productKey"
        ],
        "properties": {
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          },
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of dynamic order parameters to include.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfHotelProduct": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HotelProduct"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "HotelProduct": {
        "type": "object",
        "description": "Defines a availability search result.\n            ",
        "additionalProperties": false,
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The unique product result key.\n            ",
            "nullable": true
          },
          "isPreferred": {
            "type": "boolean",
            "description": "Flag indicating this item is preferred.\n            "
          },
          "isNew": {
            "type": "boolean",
            "description": "Flag indicating this item is new.\n            "
          },
          "externalLocator": {
            "type": "string",
            "description": "The external system locator code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for everything .\n            ",
            "nullable": true
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The various descriptions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "thumbnailFileName": {
            "type": "string",
            "description": "The provided thumbnail file name.\n            ",
            "nullable": true
          },
          "amounts": {
            "description": "The search result amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductPriceBreakdown"
          },
          "address": {
            "description": "The address of the result.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderAddress"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "images": {
            "type": "array",
            "description": "The collection of display images.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "station": {
            "type": "string",
            "description": "The station code for the city.\n            ",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "description": "The collection of participating participants.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantBase"
            }
          },
          "productVariations": {
            "type": "array",
            "description": "The collection of product variations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            }
          },
          "criteria": {
            "description": "The search criteria of the product.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnCriteria"
          },
          "category": {
            "description": "The hotel product category.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Category"
          },
          "warning": {
            "description": "The hotel product warning.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Warning"
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          }
        }
      },
      "HotelRequest": {
        "type": "object",
        "description": "Defines the query for a single station used for hotel travel commerce.\n            ",
        "additionalProperties": false,
        "required": [
          "station",
          "beginDate",
          "endDate",
          "participants"
        ],
        "properties": {
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "station": {
            "type": "string",
            "description": "The station code for the city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants to with which to search.\n            ",
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          }
        }
      },
      "QuoteHotelRequest": {
        "type": "object",
        "description": "Defines a product quote token request.\n            ",
        "additionalProperties": false,
        "required": [
          "catalogKey",
          "productKey",
          "quantity"
        ],
        "properties": {
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          },
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The desired quantity.\n            ",
            "format": "int32"
          }
        }
      },
      "SellHotelRequest": {
        "type": "object",
        "description": "Defines a product quote token request.\n            ",
        "additionalProperties": false,
        "required": [
          "quantity",
          "catalogKey",
          "productKey"
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The desired quantity.\n            ",
            "format": "int32"
          },
          "catalogKey": {
            "type": "string",
            "description": "The selected unique product variations catalog key.\n            ",
            "minLength": 1
          },
          "personalizations": {
            "type": "array",
            "description": "The collection of desired personalizations to be quoted with the product.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SelectedPersonalization"
            }
          },
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of dynamic order parameters to include.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfInsuranceProduct": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceProduct"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "InsuranceProduct": {
        "type": "object",
        "description": "Defines an insurance product result.\n            ",
        "additionalProperties": false,
        "properties": {
          "isGroup": {
            "type": "boolean",
            "description": "Flag indicating if the insurance product is a group offer.\n            "
          },
          "productKey": {
            "type": "string",
            "description": "The unique product result key.\n            ",
            "nullable": true
          },
          "isPreferred": {
            "type": "boolean",
            "description": "Flag indicating this item is preferred.\n            "
          },
          "isNew": {
            "type": "boolean",
            "description": "Flag indicating this item is new.\n            "
          },
          "externalLocator": {
            "type": "string",
            "description": "The external system locator code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for everything.\n            ",
            "nullable": true
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "descriptions": {
            "description": "The various descriptions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Descriptions"
          },
          "amounts": {
            "description": "The search result amounts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductPriceBreakdown"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "origin": {
            "type": "string",
            "description": "The origin station code for the city.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "The destination station code if different than the origin.\n            ",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "description": "The collection of participating participants.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantLinkedResult"
            }
          },
          "declinedParticipants": {
            "type": "array",
            "description": "The collection of declined participant names based on the participants from the search request.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Name"
            }
          },
          "productVariations": {
            "type": "array",
            "description": "The collection of product variations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            }
          },
          "category": {
            "description": "The insurance product category.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Category"
          },
          "warning": {
            "description": "The insurance product warning.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Warning"
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          }
        }
      },
      "ParticipantLinkedResult": {
        "type": "object",
        "description": "Defines the participant results.\n            ",
        "additionalProperties": false,
        "required": [
          "participantTypeCode"
        ],
        "properties": {
          "participantTypeCode": {
            "type": "string",
            "description": "The participant's type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "isPrimary": {
            "type": "boolean",
            "description": "The flag indicating the participant is the owner.\n            "
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The participant's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger number of the participant.\n            ",
            "nullable": true
          }
        }
      },
      "SellInsuranceRequest": {
        "type": "object",
        "description": "Defines a specific item in an insurance request.\n            ",
        "additionalProperties": false,
        "required": [
          "productKey",
          "catalogKey",
          "primaryPassengerKey"
        ],
        "properties": {
          "productKey": {
            "type": "string",
            "description": "The selected unique product key.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "catalogKey": {
            "type": "string",
            "description": "The unique code for the specific catalog in the item.\n            ",
            "minLength": 1
          },
          "primaryPassengerKey": {
            "type": "string",
            "description": "The passenger key used in grouped insurance items.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfPagedActivitiesResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PagedActivitiesResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PagedActivitiesResponse": {
        "type": "object",
        "description": "The paged activities response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The total number of results.\n            ",
            "format": "int32"
          },
          "moreAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if there are more paged results to return.\n            "
          },
          "activities": {
            "type": "array",
            "description": "The collection of activity products.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ActivityProduct"
            }
          }
        }
      },
      "PagedActivityRequest": {
        "type": "object",
        "description": "Defines the paged request for generic travel commerce activities.\n            ",
        "additionalProperties": false,
        "required": [
          "station",
          "beginDate",
          "pageNumber"
        ],
        "properties": {
          "station": {
            "type": "string",
            "description": "The station code for this city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants with which to search.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "pageNumber": {
            "type": "integer",
            "description": "The page number of the results being requested.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          }
        }
      },
      "IJsonResponseOfPagedCarsResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PagedCarsResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PagedCarsResponse": {
        "type": "object",
        "description": "The paged cars response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The total number of results.\n            ",
            "format": "int32"
          },
          "moreAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if there are more paged results to return.\n            "
          },
          "cars": {
            "type": "array",
            "description": "The collection of car products.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CarProduct"
            }
          }
        }
      },
      "PagedCarsRequest": {
        "type": "object",
        "description": "Defines the paged request for a destination request used in car responses.\n            ",
        "additionalProperties": false,
        "required": [
          "origin",
          "beginDate",
          "endDate",
          "pageNumber"
        ],
        "properties": {
          "origin": {
            "type": "string",
            "description": "The origin station code for the city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The destination station code if different than the origin.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants with which to search.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "pageNumber": {
            "type": "integer",
            "description": "The page number of the results being requested.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          }
        }
      },
      "IJsonResponseOfPagedHotelsResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PagedHotelsResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PagedHotelsResponse": {
        "type": "object",
        "description": "The paged hotels response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The total number of results.\n            ",
            "format": "int32"
          },
          "moreAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if there are more paged results to return.\n            "
          },
          "hotels": {
            "type": "array",
            "description": "The collection of hotel products.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HotelProduct"
            }
          }
        }
      },
      "PagedHotelsRequest": {
        "type": "object",
        "description": "Defines the paged request for a single station used for hotel travel commerce.\n            ",
        "additionalProperties": false,
        "required": [
          "station",
          "beginDate",
          "endDate",
          "participants",
          "pageNumber"
        ],
        "properties": {
          "station": {
            "type": "string",
            "description": "The station code for the city.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "participants": {
            "type": "array",
            "description": "The collection of participants to with which to search.\n            ",
            "items": {
              "$ref": "#/components/schemas/ParticipantCriteria"
            }
          },
          "vendorCode": {
            "type": "string",
            "description": "The specific vendor code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The specific culture code.\n            ",
            "nullable": true
          },
          "sort": {
            "description": "The search sort order.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SearchSortType"
          },
          "companyCode": {
            "type": "string",
            "description": "The company code with which to search.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code with which to search.\n            ",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code with which to search.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code with which to search (source or market of the customer).\n            ",
            "nullable": true
          },
          "catalogCode": {
            "type": "string",
            "description": "The catalog code to with which to search.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code with which to search.\n            ",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category code with which to search.\n            ",
            "nullable": true
          },
          "departmentCode": {
            "type": "string",
            "description": "The department code with which to search.\n            ",
            "nullable": true
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code with which to search.\n            ",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keywork with which to search.\n            ",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "The maximum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The minimum price with which to search.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity with which to search.\n            ",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "description": "The collection of additional search input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "pageNumber": {
            "type": "integer",
            "description": "The page number of the results being requested.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          }
        }
      },
      "IJsonResponseOfIListOfVendorv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Vendorv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Vendorv2": {
        "type": "object",
        "description": "Defines a travel commerce vendor.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code for this vendor.\n            ",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the vendor.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "displaySequence": {
            "type": "integer",
            "description": "The recommended display sequence.\n            ",
            "format": "int32"
          },
          "active": {
            "type": "boolean",
            "description": "Active status.\n            "
          },
          "minimumAdvancePurchaseDays": {
            "type": "integer",
            "description": "Minimum advance purchase days.\n            ",
            "format": "int32"
          },
          "paymentAction": {
            "description": "The payment action.\n            ",
            "$ref": "#/components/schemas/PaymentAction"
          },
          "supplier": {
            "description": "Supplier information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Supplier"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "description": "Defines a supplier.\n            ",
        "additionalProperties": false,
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique supplier code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the supplier.\n            ",
            "minLength": 1
          },
          "address": {
            "description": "The address information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "type": {
            "description": "The connector type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ConnectorType"
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Defines a common address.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ConnectorType": {
        "type": "object",
        "description": "Defines a connector type.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code for this connector type.\n            ",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "assembly": {
            "type": "string",
            "description": "The connector assembly.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfCommerceLocation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CommerceLocation"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CommerceLocation": {
        "type": "object",
        "description": "Defines a travel commerce location.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique location code.\n            ",
            "minLength": 1
          },
          "parentCode": {
            "type": "string",
            "description": "The parent code.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "timeZoneCode": {
            "type": "string",
            "description": "The time zone code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description.\n            ",
            "nullable": true
          },
          "coordinates": {
            "description": "The GPS coordinates.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Coordinate"
          }
        }
      },
      "IJsonResponseOfIListOfDynamicParameter": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DynamicParameter"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DynamicParameter": {
        "type": "object",
        "description": "The dynamic parameter.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code for a supplier parameter.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "promptTypeCode": {
            "type": "string",
            "description": "The prompt type code.\n            ",
            "nullable": true
          },
          "skuStyleCode": {
            "type": "string",
            "description": "The sku style code.\n            ",
            "nullable": true
          },
          "promptText": {
            "type": "string",
            "description": "The prompt text.\n            ",
            "nullable": true
          },
          "maxCharacters": {
            "type": "integer",
            "description": "The max characters.\n            ",
            "format": "int32"
          },
          "required": {
            "type": "boolean",
            "description": "The required boolean property.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfParticipantType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ParticipantType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ParticipantType": {
        "type": "object",
        "description": "Defines the participant type information.\n            ",
        "additionalProperties": false,
        "required": [
          "participantTypeCode"
        ],
        "properties": {
          "participantTypeCode": {
            "type": "string",
            "description": "The participant's type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "displaySequence": {
            "type": "integer",
            "description": "The display sequence.\n            ",
            "format": "int32"
          },
          "isDefault": {
            "type": "boolean",
            "description": "The flag indicating that it's the default type.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfSource": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Source": {
        "type": "object",
        "description": "Defines a travel commerce source.\n            ",
        "additionalProperties": false,
        "required": [
          "sourceCode"
        ],
        "properties": {
          "sourceCode": {
            "type": "string",
            "description": "The unqiue source code.\n            ",
            "minLength": 1
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description.\n            ",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The website URL.\n            ",
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "Discount code.\n            ",
            "nullable": true
          },
          "skinCode": {
            "type": "string",
            "description": "Skin code.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Active status.\n            "
          }
        }
      },
      "IJsonResponseOfSource": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Source"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Consumer": {
        "type": "object",
        "description": "Defines a consumer.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "address": {
            "description": "The address of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ConsumerAddress"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the consumer.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the consumer.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the consumer.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of consumer (business or residential).\n            ",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "description": "The work phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "The fax phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ConsumerAddress": {
        "type": "object",
        "description": "Defines a consumer address.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "county": {
            "type": "string",
            "description": "The address country.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfConsumer": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the consumer.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "address": {
            "description": "The address of the consumer.\n            ",
            "nullable": true,
            "properties": {
              "lineOne": {
                "type": "string",
                "description": "The address line one.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineTwo": {
                "type": "string",
                "description": "The address line two.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineThree": {
                "type": "string",
                "description": "The address line 3.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "countryCode": {
                "type": "string",
                "description": "The country code.\n            ",
                "maxLength": 2,
                "minLength": 0,
                "nullable": true
              },
              "provinceState": {
                "type": "string",
                "description": "The province state.\n            ",
                "maxLength": 3,
                "minLength": 0,
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "The city.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "postalCode": {
                "type": "string",
                "description": "The postal code.\n            ",
                "maxLength": 10,
                "minLength": 0,
                "nullable": true
              },
              "county": {
                "type": "string",
                "description": "The address country.\n            ",
                "nullable": true
              }
            }
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the consumer.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the consumer.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the consumer.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of consumer (business or residential).\n            ",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "description": "The work phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "The fax phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "OrderParticipantUpdateRequest": {
        "type": "object",
        "description": "Represents changes that can be made to a component order participant.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the participant.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderParticipantNameUpdateRequest"
          },
          "address": {
            "description": "The address of the participant.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ConsumerAddress"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the participant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the participant.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the participant.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of participant (business or residential).\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The participant description.\n            ",
            "nullable": true
          },
          "document": {
            "description": "The participant document.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ParticipantDocument"
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "OrderParticipantNameUpdateRequest": {
        "type": "object",
        "description": "Model representing changes that can be made to a component order\nparticipant name.\n            ",
        "additionalProperties": false,
        "required": [
          "first",
          "last"
        ],
        "properties": {
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ParticipantDocument": {
        "type": "object",
        "description": "Defines a consumer document.\n            ",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string",
            "description": "The documents number.\n            ",
            "nullable": true
          },
          "issuedByCode": {
            "type": "string",
            "description": "The documents issued by code.\n            ",
            "nullable": true
          },
          "documentTypeCode": {
            "type": "string",
            "description": "The documents type code.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfOrderParticipantUpdateRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the participant.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "address": {
            "description": "The address of the participant.\n            ",
            "nullable": true,
            "properties": {
              "lineOne": {
                "type": "string",
                "description": "The address line one.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineTwo": {
                "type": "string",
                "description": "The address line two.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineThree": {
                "type": "string",
                "description": "The address line 3.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "countryCode": {
                "type": "string",
                "description": "The country code.\n            ",
                "maxLength": 2,
                "minLength": 0,
                "nullable": true
              },
              "provinceState": {
                "type": "string",
                "description": "The province state.\n            ",
                "maxLength": 3,
                "minLength": 0,
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "The city.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "postalCode": {
                "type": "string",
                "description": "The postal code.\n            ",
                "maxLength": 10,
                "minLength": 0,
                "nullable": true
              },
              "county": {
                "type": "string",
                "description": "The address country.\n            ",
                "nullable": true
              }
            }
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the participant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the participant.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the participant.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of participant (business or residential).\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The participant description.\n            ",
            "nullable": true
          },
          "document": {
            "description": "The participant document.\n            ",
            "nullable": true,
            "properties": {
              "number": {
                "type": "string",
                "description": "The documents number.\n            ",
                "nullable": true
              },
              "issuedByCode": {
                "type": "string",
                "description": "The documents issued by code.\n            ",
                "nullable": true
              },
              "documentTypeCode": {
                "type": "string",
                "description": "The documents type code.\n            ",
                "nullable": true
              }
            }
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "OrderPaymentBase": {
        "type": "object",
        "description": "Defines the order payment base details.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "number"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment type.\n            ",
            "minLength": 1
          },
          "name": {
            "description": "The name on the payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "number": {
            "type": "string",
            "description": "The number on the payment.\n            ",
            "minLength": 1
          },
          "expiration": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "cvv": {
            "type": "string",
            "description": "The CVV on the payment.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The applied payment amount.\n            ",
            "format": "decimal"
          },
          "description": {
            "type": "string",
            "description": "The payment description.\n            ",
            "nullable": true
          },
          "issueNumber": {
            "type": "string",
            "description": "The payment issue number.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The payments address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "emailAddress": {
            "type": "string",
            "description": "The provided email address.\n            ",
            "format": "email",
            "nullable": true
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "IJsonResponseOfAddOnAllowedPayments": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnAllowedPayments"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AddOnAllowedPayments": {
        "type": "object",
        "description": "Defines a components allowed payment types.\n            ",
        "additionalProperties": false,
        "properties": {
          "componentKey": {
            "type": "string",
            "description": "The unique component key.\n            ",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "description": "The collection of allowed payment types.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ComponentPaymentType"
            }
          }
        }
      },
      "ComponentPaymentType": {
        "type": "object",
        "description": "Defines a component allowed payment type.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment method type code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The payment description.\n            ",
            "nullable": true
          },
          "modType": {
            "description": "The modulus check to perform.\n            ",
            "$ref": "#/components/schemas/PaymentModType"
          },
          "expiration": {
            "description": "The field usage for expiration date.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "cvv": {
            "description": "The field usage for CVV.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "name": {
            "description": "The field usage for card holder name.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "issueNumber": {
            "description": "The field usage for issue number.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          }
        }
      },
      "PaymentModType": {
        "type": "integer",
        "description": "Defines the different payment modulus types.\n            \n\n0 = None\n10 = Mod10\n11 = Mod11",
        "x-enumNames": [
          "None",
          "Mod10",
          "Mod11"
        ],
        "enum": [
          0,
          10,
          11
        ]
      },
      "FieldUsage": {
        "type": "integer",
        "description": "Defines the field usage.\n            \n\n0 = Prompt\n1 = DoNotPrompt\n2 = Required",
        "x-enumNames": [
          "Prompt",
          "DoNotPrompt",
          "Required"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIDictionaryOfStringAndAddOnAllowedPayments": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/AddOnAllowedPayments"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerBag": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerBag"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerBag": {
        "type": "object",
        "description": "Model information about the baggage a passenger has.\n            ",
        "additionalProperties": false,
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "nonStandard": {
            "type": "boolean",
            "description": "Flag for marking a bag as a non-standard piece of luggage.\n            "
          },
          "osTag": {
            "type": "string",
            "description": "The OSTag in Bag object.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "taggedToStation": {
            "type": "string",
            "description": "The tagged to station in the bag object.  This is the last station where\nthe bag is going to.  For example, on a trip from SLC to JFK, JFK would\nbe the tagged to station value.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The Weight in Bag object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "weightType": {
            "description": "The WeightType in Bag object.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "baggageKey": {
            "type": "string",
            "description": "Unique key for the baggage.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of baggage.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "osTagDate": {
            "type": "string",
            "description": "The bag OS tag date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "The bag station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "taggedToCarrierCode": {
            "type": "string",
            "description": "The bag tagged to carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPassengerBag": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerBag"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BaggageEventCreateRequest": {
        "type": "object",
        "description": "Represents the request to create baggage events.\n            ",
        "additionalProperties": false,
        "required": [
          "baggageEventCode",
          "locationCode",
          "toLocationCode"
        ],
        "properties": {
          "baggageEventCode": {
            "type": "string",
            "description": "Baggage event code.\n            ",
            "minLength": 1
          },
          "eventText": {
            "type": "string",
            "description": "Event text.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Baggage event location code.\n            ",
            "minLength": 1
          },
          "toLocationCode": {
            "type": "string",
            "description": "Destination location code to which the baggage event pertains.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfBaggageEvent": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageEvent"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BaggageEvent": {
        "type": "object",
        "description": "Represents a baggage event.\n            ",
        "additionalProperties": false,
        "properties": {
          "baggageEventKey": {
            "type": "string",
            "description": "Baggage event key.\n            ",
            "nullable": true
          },
          "baggageKey": {
            "type": "string",
            "description": "Baggage key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Created date.\n            ",
            "format": "date-time"
          },
          "baggageEventCode": {
            "type": "string",
            "description": "Baggage event code.\n            ",
            "nullable": true
          },
          "eventText": {
            "type": "string",
            "description": "Event text.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Baggage event location code.\n            ",
            "nullable": true
          },
          "toLocationCode": {
            "type": "string",
            "description": "Destination location code to which the baggage event pertains.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfBaggageEventResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageEventResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BaggageEventResponse": {
        "type": "object",
        "description": "Represents the response from retrieving baggage events.\n            ",
        "additionalProperties": false,
        "properties": {
          "events": {
            "type": "array",
            "description": "List of baggage events.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BaggageEvent"
            }
          }
        }
      },
      "PassengerBagRequest": {
        "type": "object",
        "description": "A model for a request to update the passenger bags.\n            ",
        "additionalProperties": false,
        "properties": {
          "bagCount": {
            "type": "integer",
            "description": "The bag count for this request.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          },
          "iataIdentifier": {
            "type": "string",
            "description": "The IATA identifier for this request.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "limitedReleaseTag": {
            "type": "boolean",
            "description": "Flag for marking a bag as a non-standard piece of luggage.\n            "
          },
          "weightType": {
            "description": "Type of weight for the baggage weight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightType"
          },
          "weight": {
            "type": "integer",
            "description": "The baggage weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          }
        }
      },
      "PassengerBagCheckInRequest": {
        "type": "object",
        "description": "A model for a request to check-in the passenger bags.\n            ",
        "additionalProperties": false,
        "properties": {
          "weight": {
            "type": "integer",
            "description": "The baggage weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "weightType": {
            "description": "Type of weight for the baggage weight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightType"
          },
          "baggageTypeCode": {
            "type": "string",
            "description": "The baggage type code for the check-in request.\nThis can only be updated if the baggage weight is changed at the same time, and if\nthe baggage type code is active. \n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfBoardingPassesM2D": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassesM2D"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardingPassesM2D": {
        "type": "object",
        "description": "The collection of M2D boarding passes.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator in reference.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "contactPhoneNumber": {
            "type": "string",
            "description": "The booking contacts phone number.\n            ",
            "nullable": true
          },
          "boardingPasses": {
            "type": "array",
            "description": "The collection of boarding passes with M2D bar codes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassM2D"
            }
          }
        }
      },
      "BoardingPassM2D": {
        "type": "object",
        "description": "Represents the boarding pass following the M2D barcode format.\n            ",
        "additionalProperties": false,
        "properties": {
          "passenger": {
            "description": "The passenger details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassPassengerDetailsBase"
          },
          "userName": {
            "type": "string",
            "description": "The user name of the logged in user.\n            ",
            "nullable": true
          },
          "iataCode": {
            "type": "string",
            "description": "The IATA code.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The acting fare basis code.\n            ",
            "nullable": true
          },
          "fareClass": {
            "type": "string",
            "description": "The acting fare class.\n            ",
            "nullable": true
          },
          "baseFare": {
            "type": "number",
            "description": "The base fare amount.\n            ",
            "format": "decimal"
          },
          "totalFare": {
            "type": "number",
            "description": "The total fare amount.\n            ",
            "format": "decimal"
          },
          "totalCost": {
            "type": "number",
            "description": "The total cost amount.\n            ",
            "format": "decimal"
          },
          "discountedFare": {
            "type": "number",
            "description": "The discounted fare amount.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "The total amount of tax.\n            ",
            "format": "decimal"
          },
          "receiptNumber": {
            "type": "string",
            "description": "The receipt number.\n            ",
            "nullable": true
          },
          "serviceCharges": {
            "type": "array",
            "description": "The collection of service charges for this segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "segments": {
            "type": "array",
            "description": "The collection of boarding pass segments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassSegment"
            }
          },
          "barCode": {
            "type": "string",
            "description": "The barcode (M2D format) for all the segments.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassPassengerDetailsBase": {
        "type": "object",
        "description": "Represents a boarding pass passenger detail base, containing all the important passenger details for the boarding\npass.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The given name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "isoName": {
            "description": "The given name converted to ISO standard.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender.\n            ",
            "$ref": "#/components/schemas/Gender"
          },
          "documents": {
            "type": "array",
            "description": "The collection of travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "type": {
            "type": "string",
            "description": "The passenger type.\n            ",
            "nullable": true
          },
          "selecteeString": {
            "type": "string",
            "description": "The string that indicates a selectee.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "nullable": true
          },
          "score": {
            "description": "The passenger score.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassPassengerScore"
          },
          "infant": {
            "description": "The passengers infant details if an infant exists.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassInfantDetails"
          }
        }
      },
      "Gender": {
        "type": "integer",
        "description": "Defines the different gender types.\n            \n\n0 = XX\n1 = Male\n2 = Female",
        "x-enumNames": [
          "XX",
          "Male",
          "Female"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PassengerTravelDocument": {
        "type": "object",
        "description": "Model representing a passenger travel document.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode"
        ],
        "properties": {
          "documentTypeCode": {
            "type": "string",
            "description": "The unique travel document type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "issuedByCode": {
            "type": "string",
            "description": "The issuer code for the travel document (country code).\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passengerTravelDocumentKey": {
            "type": "string",
            "description": "A key that  uniquely identifies a travel document in the context of a specific passenger.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassPassengerScore": {
        "type": "object",
        "description": "Defines the boarding pass passenger score.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The score name.\n            ",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The score code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          }
        }
      },
      "BoardingPassInfantDetails": {
        "type": "object",
        "description": "Defines the boarding pass infant details.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The given name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "isoName": {
            "description": "The given name converted to ISO standard.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender.\n            ",
            "$ref": "#/components/schemas/Gender"
          },
          "documents": {
            "type": "array",
            "description": "The collection of travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          }
        }
      },
      "ServiceCharge": {
        "type": "object",
        "description": "Model that represents the fare service charge information.\n            ",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number",
            "description": "The service charge amount.\n            ",
            "format": "decimal"
          },
          "code": {
            "type": "string",
            "description": "The service charge code.\n            ",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "The service charge detail.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The service charge type.\n            ",
            "$ref": "#/components/schemas/ChargeType"
          },
          "collectType": {
            "description": "The service charge collect type.\n            ",
            "$ref": "#/components/schemas/CollectType"
          },
          "currencyCode": {
            "type": "string",
            "description": "The service charge currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The service charge foreign currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The service charge foreign amount.\n            ",
            "format": "decimal"
          },
          "ticketCode": {
            "type": "string",
            "description": "The service charge ticket code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ChargeType": {
        "type": "integer",
        "description": "The type of a service charge.\n            \n\n0 = FarePrice\n1 = Discount\n2 = IncludedTravelFee\n3 = IncludedTax\n4 = TravelFee\n5 = Tax\n6 = ServiceCharge\n7 = PromotionDiscount\n8 = ConnectionAdjustmentAmount\n9 = AddOnsPrice\n10 = FarePoints\n11 = DiscountPoints\n16 = IncludedAddOnsFee\n17 = AddOnsFee\n18 = AddOnsMarkup\n19 = FareSurcharge\n21 = AddOnsCancelFee\n22 = Calculated\n23 = Note\n24 = Points\n25 = DynamicFareAdjustment",
        "x-enumNames": [
          "FarePrice",
          "Discount",
          "IncludedTravelFee",
          "IncludedTax",
          "TravelFee",
          "Tax",
          "ServiceCharge",
          "PromotionDiscount",
          "ConnectionAdjustmentAmount",
          "AddOnsPrice",
          "FarePoints",
          "DiscountPoints",
          "IncludedAddOnsFee",
          "AddOnsFee",
          "AddOnsMarkup",
          "FareSurcharge",
          "AddOnsCancelFee",
          "Calculated",
          "Note",
          "Points",
          "DynamicFareAdjustment"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          16,
          17,
          18,
          19,
          21,
          22,
          23,
          24,
          25
        ]
      },
      "CollectType": {
        "type": "integer",
        "description": "Used to identify the collect type of a service charge.\n            \n\n0 = SellerChargeable\n1 = ExternalChargeable\n2 = SellerNonChargeable\n3 = ExternalNonChargeable\n4 = ExternalChargeableImmediate",
        "x-enumNames": [
          "SellerChargeable",
          "ExternalChargeable",
          "SellerNonChargeable",
          "ExternalNonChargeable",
          "ExternalChargeableImmediate"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "BoardingPassSegment": {
        "type": "object",
        "description": "Defines the boarding pass segment details.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "The transportation designator details based on the legs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassTransportationDesignator"
          },
          "transportationName": {
            "type": "string",
            "description": "The name of the transportation company.\n            ",
            "nullable": true
          },
          "departureGate": {
            "type": "string",
            "description": "The scheduled departure gate.\n            ",
            "nullable": true
          },
          "boardingTime": {
            "type": "string",
            "description": "The scheduled boarding time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "The type of the current segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "international": {
            "type": "boolean",
            "description": "Flag indicating if the segment is international.\n            "
          },
          "ticketNumber": {
            "type": "string",
            "description": "The assigned passengers ticket number.\n            ",
            "nullable": true
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The assigned infants ticket number.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket indicator.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The assigned to cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The assigned to class of service.\n            ",
            "nullable": true
          },
          "externalClassOfService": {
            "type": "string",
            "description": "The externals reference class of service.\n            ",
            "nullable": true
          },
          "fareClassName": {
            "type": "string",
            "description": "The fare class name.\n            ",
            "nullable": true
          },
          "productClassName": {
            "type": "string",
            "description": "The product class name.\n            ",
            "nullable": true
          },
          "externalRecordLocator": {
            "type": "string",
            "description": "The assigned external record locator.\n            ",
            "nullable": true
          },
          "program": {
            "description": "The applied passenger program if one existed.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassProgram"
          },
          "hasInfant": {
            "type": "boolean",
            "description": "Flag indicating if this segment has a infant.\n            "
          },
          "identifier": {
            "description": "The transportation identifier details about the segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "legs": {
            "type": "array",
            "description": "The collection of legs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassLeg"
            }
          },
          "externalIdentifier": {
            "description": "The external transportation identifier details about the segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassTransportationIdentifier"
          },
          "arrivalTime": {
            "type": "string",
            "description": "The estimated time of arrival.\nIf the UseEstimatedTimesOnBoardingPass is set to True, the arrival time will be the estimated arrival time.\nIf the UseEstimatedTimesOnBoardingPass is set to False, the arrival time will be the scheduled arrival time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The estimated time of departure.\nIf the UseEstimatedTimesOnBoardingPass is set to True, the departure time will be the estimated departure time.\nIf the UseEstimatedTimesOnBoardingPass is set to False, the departure time will be the scheduled departure time.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "BoardingPassTransportationDesignator": {
        "type": "object",
        "description": "Defines a boarding pass transportation designator.\n            ",
        "additionalProperties": false,
        "properties": {
          "destination": {
            "type": "string",
            "description": "Gets or sets the leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets the leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "arrival": {
            "type": "string",
            "description": "The arrival date and time local to the arrival station.\n            ",
            "format": "date-time"
          },
          "departure": {
            "type": "string",
            "description": "The departure date and time local to the departure station.\n            ",
            "format": "date-time"
          },
          "destinationStationName": {
            "type": "string",
            "description": "The destination stations localized name.\n            ",
            "nullable": true
          },
          "originStationName": {
            "type": "string",
            "description": "The origin stations localized name.\n            ",
            "nullable": true
          }
        }
      },
      "SegmentTypes": {
        "type": "integer",
        "description": "Indicates the type of a segment.\n            \n\n0 = Normal\n1 = CodeShareOperating\n2 = CodeShareMarketing\n3 = InterlineOutbound\n4 = InterlineInbound\n5 = Passive",
        "x-enumNames": [
          "Normal",
          "CodeShareOperating",
          "CodeShareMarketing",
          "InterlineOutbound",
          "InterlineInbound",
          "Passive"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "BoardingPassProgram": {
        "type": "object",
        "description": "Defines the boarding pass acting program.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The programs name.\n            ",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The programs number.\n            ",
            "nullable": true
          },
          "levelName": {
            "type": "string",
            "description": "The programs level name.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassLeg": {
        "type": "object",
        "description": "Defines the boarding pass leg details.\n            ",
        "additionalProperties": false,
        "properties": {
          "seat": {
            "description": "The passengers assigned seats details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassSeatDetails"
          },
          "boarding": {
            "description": "The boarding details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassBoardingDetails"
          },
          "designator": {
            "description": "The legs transportation designator details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "liftStatus": {
            "description": "The status of the leg for the passenger.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "operatedByText": {
            "type": "string",
            "description": "The legs operated by text.\n            ",
            "nullable": true
          },
          "subjectToGovernmentApproval": {
            "type": "boolean",
            "description": "Flag indicating if the leg is subject to government approval.\n            "
          },
          "codeShareIndicator": {
            "type": "string",
            "description": "The assigned code share indicator.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "bppr": {
            "type": "string",
            "description": "The homeland security government clearance auth code.\n            ",
            "nullable": true
          },
          "identifier": {
            "description": "The legs transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassTransportationIdentifier"
          },
          "bags": {
            "type": "array",
            "description": "The collection of bags.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OperationBag"
            }
          },
          "ssrs": {
            "type": "array",
            "description": "The collection of SSR's.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrGlance"
            }
          }
        }
      },
      "BoardingPassSeatDetails": {
        "type": "object",
        "description": "Defines the boarding pass assigned seat details.\n            ",
        "additionalProperties": false,
        "properties": {
          "column": {
            "type": "string",
            "description": "The seat column.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "row": {
            "type": "integer",
            "description": "The seat row.\n            "
          },
          "designator": {
            "type": "string",
            "description": "The seat designator.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassBoardingDetails": {
        "type": "object",
        "description": "Defines the boarding pass boarding details.\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingSequence": {
            "type": "integer",
            "description": "The boarding sequence number.\n            "
          },
          "boardingZone": {
            "type": "integer",
            "description": "The boarding zone number.\n            "
          },
          "externalBoardingZone": {
            "type": "string",
            "description": "The external boarding zone.\n            ",
            "nullable": true
          },
          "authorizationList": {
            "type": "array",
            "description": "The boarding pass authorization list containing basic authorization information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassAuthorization"
            }
          }
        }
      },
      "BoardingPassAuthorization": {
        "type": "object",
        "description": "Defines the boarding pass authorization model.\n            ",
        "additionalProperties": false,
        "properties": {
          "isInfant": {
            "type": "boolean",
            "description": "Flag indicating if this authorization is for an infant.\n            "
          },
          "authorizationStatus": {
            "type": "string",
            "description": "The authorization status based on the current security driver. See driver name.\n            ",
            "nullable": true
          },
          "driverName": {
            "type": "string",
            "description": "The name of the security driver for this government message type. Used for override requests if necessary.\n            ",
            "nullable": true
          },
          "boardingPassPrintText": {
            "type": "string",
            "description": "The boarding pass print text for the driver. Ex) SSSS for Selectee or TSA pre-check.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassTransportationIdentifier": {
        "type": "object",
        "description": "Defines a boarding pass transportation identifier.\n            ",
        "additionalProperties": false,
        "required": [
          "identifier",
          "carrierCode"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2
          },
          "opSuffix": {
            "type": "string",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "carrierName": {
            "type": "string",
            "description": "The carriers name.\n            ",
            "nullable": true
          }
        }
      },
      "OperationBag": {
        "type": "object",
        "description": "Operation Bag.\n            ",
        "additionalProperties": false,
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "nonStandard": {
            "type": "boolean",
            "description": "Flag for marking a bag as a non-standard piece of luggage.\n            "
          },
          "osTag": {
            "type": "string",
            "description": "The OSTag in Bag object.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "taggedToStation": {
            "type": "string",
            "description": "The tagged to station in the bag object.  This is the last station where\nthe bag is going to.  For example, on a trip from SLC to JFK, JFK would\nbe the tagged to station value.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The Weight in Bag object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "weightType": {
            "description": "The WeightType in Bag object.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "operationBagKey": {
            "type": "string",
            "description": "The baggage key\n            ",
            "nullable": true
          },
          "baggageStatus": {
            "description": "The BaggageStatus in Bag object.\n            ",
            "$ref": "#/components/schemas/BaggageStatus"
          },
          "checkInDate": {
            "type": "string",
            "description": "The CheckInDate in Bag object.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "compartment": {
            "type": "integer",
            "description": "The CompartmentID in Bag object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "taggedToStationCity": {
            "type": "string",
            "description": "The tagged to station city in the bag object.  This is the last city where\nthe bag is going to.  For example, on a trip from SLC to JFK, New York would\nbe the tagged to station city value.\n            ",
            "nullable": true
          }
        }
      },
      "BaggageStatus": {
        "type": "integer",
        "description": "Baggage Status enumeration.\n            \n\n0 = Default\n1 = Checked\n2 = Removed\n3 = Added\n4 = AddedPrinted",
        "x-enumNames": [
          "Default",
          "Checked",
          "Removed",
          "Added",
          "AddedPrinted"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "SsrGlance": {
        "type": "object",
        "description": "Manifest Leg SSR.\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "The additional information on the SSR that are not visible to passengers.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "The unique code to identify an SSR.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ssrDetail": {
            "type": "string",
            "description": "The additional information for the SSR as requested by the passenger.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "BoardingPassPassengerFilterRequest": {
        "type": "object",
        "description": "Defines the boarding pass request that is responsible for filtering what passengers to retrieve passes for.\n            ",
        "additionalProperties": false,
        "properties": {
          "source": {
            "type": "string",
            "description": "Name of the application requesting for boarding pass print.\nPlease note that this should be a char and not a string.\nValid values are 'O', 'K', 'M', 'W', and ' '.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "skipLogToHistory": {
            "type": "boolean",
            "description": "Whether to add event to history log.\n            "
          },
          "passengerKeys": {
            "type": "array",
            "description": "The selected passenger keys to be returned. If null all passengers will be returned that have been checked in.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfBoardingPassesS2D": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassesS2D"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardingPassesS2D": {
        "type": "object",
        "description": "Represents a collection of boarding passes following the S2D bar code format.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator in reference.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "contactPhoneNumber": {
            "type": "string",
            "description": "The booking contacts phone number.\n            ",
            "nullable": true
          },
          "boardingPasses": {
            "type": "array",
            "description": "The collection of boarding passes using S2D bar codes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassS2D"
            }
          }
        }
      },
      "BoardingPassS2D": {
        "type": "object",
        "description": "Represents a boarding pass for a specific passenger using the S2D barcode type.\n            ",
        "additionalProperties": false,
        "properties": {
          "passenger": {
            "description": "The passenger details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassPassengerDetailsBase"
          },
          "userName": {
            "type": "string",
            "description": "The user name of the logged in user.\n            ",
            "nullable": true
          },
          "iataCode": {
            "type": "string",
            "description": "The IATA code.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The acting fare basis code.\n            ",
            "nullable": true
          },
          "fareClass": {
            "type": "string",
            "description": "The acting fare class.\n            ",
            "nullable": true
          },
          "baseFare": {
            "type": "number",
            "description": "The base fare amount.\n            ",
            "format": "decimal"
          },
          "totalFare": {
            "type": "number",
            "description": "The total fare amount.\n            ",
            "format": "decimal"
          },
          "totalCost": {
            "type": "number",
            "description": "The total cost amount.\n            ",
            "format": "decimal"
          },
          "discountedFare": {
            "type": "number",
            "description": "The discounted fare amount.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "The total amount of tax.\n            ",
            "format": "decimal"
          },
          "receiptNumber": {
            "type": "string",
            "description": "The receipt number.\n            ",
            "nullable": true
          },
          "serviceCharges": {
            "type": "array",
            "description": "The collection of service charges for this segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "segments": {
            "type": "array",
            "description": "The collection of segments to display bar codes for.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassS2DSegment"
            }
          }
        }
      },
      "BoardingPassS2DSegment": {
        "type": "object",
        "description": "Represents a boarding pass segment following the S2D barcode type. When using S2D format each segment will have a\nbarcode.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "The transportation designator details based on the legs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassTransportationDesignator"
          },
          "transportationName": {
            "type": "string",
            "description": "The name of the transportation company.\n            ",
            "nullable": true
          },
          "departureGate": {
            "type": "string",
            "description": "The scheduled departure gate.\n            ",
            "nullable": true
          },
          "boardingTime": {
            "type": "string",
            "description": "The scheduled boarding time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "The type of the current segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "international": {
            "type": "boolean",
            "description": "Flag indicating if the segment is international.\n            "
          },
          "ticketNumber": {
            "type": "string",
            "description": "The assigned passengers ticket number.\n            ",
            "nullable": true
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The assigned infants ticket number.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket indicator.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The assigned to cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The assigned to class of service.\n            ",
            "nullable": true
          },
          "externalClassOfService": {
            "type": "string",
            "description": "The externals reference class of service.\n            ",
            "nullable": true
          },
          "fareClassName": {
            "type": "string",
            "description": "The fare class name.\n            ",
            "nullable": true
          },
          "productClassName": {
            "type": "string",
            "description": "The product class name.\n            ",
            "nullable": true
          },
          "externalRecordLocator": {
            "type": "string",
            "description": "The assigned external record locator.\n            ",
            "nullable": true
          },
          "program": {
            "description": "The applied passenger program if one existed.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassProgram"
          },
          "hasInfant": {
            "type": "boolean",
            "description": "Flag indicating if this segment has a infant.\n            "
          },
          "identifier": {
            "description": "The transportation identifier details about the segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "legs": {
            "type": "array",
            "description": "The collection of legs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassLeg"
            }
          },
          "externalIdentifier": {
            "description": "The external transportation identifier details about the segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassTransportationIdentifier"
          },
          "arrivalTime": {
            "type": "string",
            "description": "The estimated time of arrival.\nIf the UseEstimatedTimesOnBoardingPass is set to True, the arrival time will be the estimated arrival time.\nIf the UseEstimatedTimesOnBoardingPass is set to False, the arrival time will be the scheduled arrival time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The estimated time of departure.\nIf the UseEstimatedTimesOnBoardingPass is set to True, the departure time will be the estimated departure time.\nIf the UseEstimatedTimesOnBoardingPass is set to False, the departure time will be the scheduled departure time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "barCode": {
            "type": "string",
            "description": "The barcode data.\n            ",
            "nullable": true
          }
        }
      },
      "BookingCommentRequest": {
        "type": "object",
        "description": "Defines a booking comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Indicates where the comment will be seen.\n            ",
            "$ref": "#/components/schemas/CommentType"
          },
          "text": {
            "type": "string",
            "description": "The text of the comment.\n            ",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the comment.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "sendToBookingSource": {
            "type": "boolean",
            "description": "The flag for triggering an outbound sync message that will be generated to\nthe booking source as an SSR OTHS element.\n            ",
            "nullable": true
          }
        }
      },
      "CommentType": {
        "type": "integer",
        "description": "Comment Types Enumerations\n            \n\n0 = Default\n1 = Itinerary\n2 = Manifest\n3 = Alert\n4 = Archive",
        "x-enumNames": [
          "Default",
          "Itinerary",
          "Manifest",
          "Alert",
          "Archive"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfBooking": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Booking"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Booking": {
        "type": "object",
        "description": "Represents a full booking object.\n            ",
        "additionalProperties": false,
        "properties": {
          "selfServiceMoveAvailable": {
            "type": "boolean",
            "description": "The flag indicating whether self-service move is allowed.\n            "
          },
          "bookingKey": {
            "type": "string",
            "description": "The unique identifier.\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The alphanumeric identifier assigned to a reservation when the record is created (created means when the booking\nwas submitted to the database).\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency in which the booking is priced and created in.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "systemCode": {
            "type": "string",
            "description": "The GDS/CRS code that requested the booking.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "description": "The group name of the booking.\n            ",
            "nullable": true
          },
          "locators": {
            "description": "Booking locators used to define a booking.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingRecordLocators"
          },
          "info": {
            "description": "Informational about the booking.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingInfo"
          },
          "sales": {
            "description": "Details about the point of sales.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingSales"
          },
          "typeOfSale": {
            "description": "Information about the type of sale the booking was.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TypeOfSale"
          },
          "hold": {
            "description": "Defines the hold expiration.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingHold"
          },
          "breakdown": {
            "description": "The booking pricing breakdown.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPriceBreakdown"
          },
          "receivedBy": {
            "description": "Details about what received the booking commit.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ReceivedByInfo"
          },
          "contacts": {
            "type": "object",
            "description": "The contacts on the booking by unique the contact type code.\nPlease note that this should be a dictionary of char keys and not a dictionary of string keys.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "passengers": {
            "type": "object",
            "description": "The list of passengers and information.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "journeys": {
            "type": "array",
            "description": "The list of journeys and information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Journey"
            }
          },
          "comments": {
            "type": "array",
            "description": "The list of associated comments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingComment"
            }
          },
          "queues": {
            "type": "array",
            "description": "The list of information indicating which queue the booking is present in.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingQueueInfo"
            }
          },
          "history": {
            "type": "array",
            "description": "The history of the booking since it was loaded into state.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingHistory"
            }
          },
          "payments": {
            "type": "array",
            "description": "The list of applied payments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "addOns": {
            "type": "object",
            "description": "The list of components.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/AddOn"
            }
          },
          "orders": {
            "type": "array",
            "description": "The list of booking orders.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingOrder"
            }
          }
        }
      },
      "BookingRecordLocators": {
        "type": "object",
        "description": "Defines the bookings unique identifiers.\n            ",
        "additionalProperties": false,
        "properties": {
          "numericRecordLocator": {
            "type": "string",
            "description": "The alphanumeric identifier generated when the booking is retrieved from the alphanumeric record locator value that\nwas assigned.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "parentRecordLocator": {
            "type": "string",
            "description": "The record locator of the booking where the current booking resulted from.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "description": "The unique identifier of the booking where the current booking resulted from.\n            ",
            "format": "int64"
          },
          "recordLocators": {
            "type": "array",
            "description": "The list of other reservations that can be used as cross reference for the booking.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecordLocator"
            }
          }
        }
      },
      "RecordLocator": {
        "type": "object",
        "description": "Defines a unique locator for reference.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemDomainCode": {
            "type": "string",
            "description": "The system domain code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "bookingSystemCode": {
            "type": "string",
            "description": "The system code of where the booking was created.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "hostedCarrierCode": {
            "type": "string",
            "description": "The hosted carrier's code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "recordLocatorKey": {
            "type": "string",
            "description": "The unique record locator key.\n            ",
            "nullable": true
          },
          "recordCode": {
            "type": "string",
            "description": "The record code.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "owningSystemCode": {
            "type": "string",
            "description": "The owning system code for the booking.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "interactionPurpose": {
            "type": "string",
            "description": "The interaction purpose.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "BookingInfo": {
        "type": "object",
        "description": "Describes general booking details.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The status of the entire booking.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "paidStatus": {
            "description": "The status of the applied payments.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "priceStatus": {
            "description": "The pricing status of the booking.\n            ",
            "$ref": "#/components/schemas/PriceStatus"
          },
          "profileStatus": {
            "description": "The booking profiling status.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "bookingType": {
            "type": "string",
            "description": "Identifies the type (Default, GDS, CodeShare, ect) of the booking set during the commit process.\n            ",
            "nullable": true
          },
          "channelType": {
            "description": "The channel that is responsible for created the booking.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "bookedDate": {
            "type": "string",
            "description": "The UTC date and time the booking was originally created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The UTC date and time of when the booking was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The UTC date and time indicating when the booking will not be returned when retrieved by a GDS/GRS.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The UTC date and time when the booking was last updated on the server.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "modifiedAgentId": {
            "type": "integer",
            "description": "The last agent ID who modified the booking.\n            ",
            "format": "int64"
          },
          "createdAgentId": {
            "type": "integer",
            "description": "The agent ID that created the booking.\n            ",
            "format": "int64"
          },
          "owningCarrierCode": {
            "type": "string",
            "description": "Identifies which carrier is financially responsible for the booking and payment.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "changeAllowed": {
            "type": "boolean",
            "description": "The flag indicating whether the booking can be changed.\n            "
          }
        }
      },
      "BookingStatus": {
        "type": "integer",
        "description": "Booking Status Enumeration\n            \n\n0 = Default\n1 = Hold\n2 = Confirmed\n3 = Closed\n4 = HoldCanceled\n5 = PendingArchive\n6 = Archived\n777 = ProcessedForArchive",
        "x-enumNames": [
          "Default",
          "Hold",
          "Confirmed",
          "Closed",
          "HoldCanceled",
          "PendingArchive",
          "Archived",
          "ProcessedForArchive"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          777
        ]
      },
      "PaidStatus": {
        "type": "integer",
        "description": "Paid status enumeration.\n            \n\n0 = UnderPaid\n1 = PaidInFull\n2 = OverPaid",
        "x-enumNames": [
          "UnderPaid",
          "PaidInFull",
          "OverPaid"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PriceStatus": {
        "type": "integer",
        "description": "Describes the fare pricing status\n            \n\n0 = Invalid\n1 = Override\n2 = Valid",
        "x-enumNames": [
          "Invalid",
          "Override",
          "Valid"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "BookingProfileStatus": {
        "type": "integer",
        "description": "Defines the profiling status of the booking.\n            \n\n0 = Default\n1 = KnownIndividual\n2 = ResolutionGroup\n3 = SelecteeGroup\n4 = NotUsed\n5 = FailureGroup\n6 = RandomSelectee\n7 = Exempt",
        "x-enumNames": [
          "Default",
          "KnownIndividual",
          "ResolutionGroup",
          "SelecteeGroup",
          "NotUsed",
          "FailureGroup",
          "RandomSelectee",
          "Exempt"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "ChannelType": {
        "type": "integer",
        "description": "Defines the available channel types doing invoking the communication with the server.\n            \n\n0 = Default\n1 = Direct\n2 = Web\n3 = Gds\n4 = Api\n5 = DigitalApi\n6 = DigitalWeb\n7 = Ndc",
        "x-enumNames": [
          "Default",
          "Direct",
          "Web",
          "Gds",
          "Api",
          "DigitalApi",
          "DigitalWeb",
          "Ndc"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "BookingSales": {
        "type": "object",
        "description": "Defines the different point of sale information.\n            ",
        "additionalProperties": false,
        "properties": {
          "created": {
            "description": "Contains the details about the agent and organization information that created this booking.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "source": {
            "description": "Contains the details about the agent and organization information that referred the created booking.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPointOfSale"
          },
          "modified": {
            "description": "Contains the details about the agent and organization information that made the last set of changes.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          }
        }
      },
      "PointOfSale": {
        "type": "object",
        "description": "Model related to the point of sale.  This is for readonly operations.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The point of sale agent code.\n            ",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The point of sale domain code.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The point of sale location code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The point of sale organization code.\n            ",
            "nullable": true
          }
        }
      },
      "BookingPointOfSale": {
        "type": "object",
        "description": "Model related to the point of sale.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The point of sale agent code.\n            ",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The point of sale domain code.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The point of sale location code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The point of sale organization code.\n            ",
            "nullable": true
          },
          "isoCountryCode": {
            "type": "string",
            "description": "Two character country code, optionally supplied in GDS message\n            ",
            "nullable": true
          },
          "sourceSystemCode": {
            "type": "string",
            "description": "Two character system code, optionally supplied in GDS message\n            ",
            "nullable": true
          }
        }
      },
      "TypeOfSale": {
        "type": "object",
        "description": "Defines the type of sale values.\n            ",
        "additionalProperties": false,
        "properties": {
          "residentCountry": {
            "type": "string",
            "description": "The resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promo code that was applied.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "fareTypes": {
            "type": "array",
            "description": "The collection of fare types applied.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BookingHold": {
        "type": "object",
        "description": "Defines the booking hold expiration.\n            ",
        "additionalProperties": false,
        "properties": {
          "expiration": {
            "type": "string",
            "description": "Defines the hold date and time expiration.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "BookingPriceBreakdown": {
        "type": "object",
        "description": "Defines the booking top level pricing breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "balanceDue": {
            "type": "number",
            "description": "The booking balance due.\n            ",
            "format": "decimal"
          },
          "pointsBalanceDue": {
            "type": "number",
            "description": "The booking points balance due.\n            ",
            "format": "decimal"
          },
          "authorizedBalanceDue": {
            "type": "number",
            "description": "The bookings authorized balance due.\n            ",
            "format": "decimal"
          },
          "totalAmount": {
            "type": "number",
            "description": "The booking total amount.\n            ",
            "format": "decimal"
          },
          "totalPoints": {
            "type": "number",
            "description": "The booking total points.\n            ",
            "format": "decimal"
          },
          "totalToCollect": {
            "type": "number",
            "description": "The booking total to collect.\n            ",
            "format": "decimal"
          },
          "totalPointsToCollect": {
            "type": "number",
            "description": "The booking total points to collect.\n            ",
            "format": "decimal"
          },
          "totalCharged": {
            "type": "number",
            "description": "The total amount charged.\n            ",
            "format": "decimal"
          },
          "passengerTotals": {
            "description": "The calculated price breakdown for all passengers.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerPriceBreakdownBase"
          },
          "passengers": {
            "type": "object",
            "description": "The individual collection of passenger price breakdowns.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerPriceBreakdown"
            }
          },
          "journeyTotals": {
            "description": "The calculated price breakdown for all journeys.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/JourneyPriceBreakdownBase"
          },
          "journeys": {
            "type": "object",
            "description": "The individual collection of journey price breakdown.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/JourneyPriceBreakdown"
            }
          },
          "addOnTotals": {
            "description": "The total amounts charged for each type of AddOn.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnPriceBreakdown"
          }
        }
      },
      "PassengerPriceBreakdownBase": {
        "type": "object",
        "description": "Defines the combined booking passengers pricing breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "services": {
            "description": "The charge breakdown of the service fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "specialServices": {
            "description": "The charge breakdown of the special service requests.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "seats": {
            "description": "The charge breakdown of seat fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "upgrades": {
            "description": "The charge breakdown of upgrade fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "spoilage": {
            "description": "The charge breakdown of spoilage fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "nameChanges": {
            "description": "The charge breakdown of name change fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "convenience": {
            "description": "The charge breakdown of convenience fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "infant": {
            "description": "The charge breakdown of infant fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          }
        }
      },
      "ChargeBreakdown": {
        "type": "object",
        "description": "Defines a charge breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "taxes": {
            "type": "number",
            "description": "The total fee taxes amount.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "adjustments": {
            "type": "number",
            "description": "The total adjusted amount.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "charges": {
            "type": "array",
            "description": "The collection of charges within the calculation.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          }
        }
      },
      "PassengerPriceBreakdown": {
        "type": "object",
        "description": "Defines the individual passenger level pricing breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "services": {
            "description": "The charge breakdown of the service fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "specialServices": {
            "description": "The charge breakdown of the special service requests.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "seats": {
            "description": "The charge breakdown of seat fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "upgrades": {
            "description": "The charge breakdown of upgrade fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "spoilage": {
            "description": "The charge breakdown of spoilage fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "nameChanges": {
            "description": "The charge breakdown of name change fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "convenience": {
            "description": "The charge breakdown of convenience fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "infant": {
            "description": "The charge breakdown of infant fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger number.\n            ",
            "nullable": true
          }
        }
      },
      "JourneyPriceBreakdownBase": {
        "type": "object",
        "description": "Defines the journey price breakdown base.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalAmount": {
            "type": "number",
            "description": "The journey price total.\n            ",
            "format": "decimal"
          },
          "totalPoints": {
            "type": "number",
            "description": "The journey points total.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "The journey taxes total.\n            ",
            "format": "decimal"
          },
          "totalDiscount": {
            "type": "number",
            "description": "The journey discount total.\n            ",
            "format": "decimal"
          }
        }
      },
      "JourneyPriceBreakdown": {
        "type": "object",
        "description": "Defines a specifics journey pricing breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalAmount": {
            "type": "number",
            "description": "The journey price total.\n            ",
            "format": "decimal"
          },
          "totalPoints": {
            "type": "number",
            "description": "The journey points total.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "The journey taxes total.\n            ",
            "format": "decimal"
          },
          "totalDiscount": {
            "type": "number",
            "description": "The journey discount total.\n            ",
            "format": "decimal"
          },
          "journeyKey": {
            "type": "string",
            "description": "The unique journey key.\n            ",
            "nullable": true
          }
        }
      },
      "AddOnPriceBreakdown": {
        "type": "object",
        "description": "Defines the addOn price breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "car": {
            "type": "number",
            "description": "The car price total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "hotel": {
            "type": "number",
            "description": "The hotel price total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "activities": {
            "type": "number",
            "description": "The activities price total.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "ReceivedByInfo": {
        "type": "object",
        "description": "Defines the received by information.\n            ",
        "additionalProperties": false,
        "properties": {
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "latestReceivedBy": {
            "type": "string",
            "description": "The latest received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedReference": {
            "type": "string",
            "description": "The received by reference.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "latestReceivedReference": {
            "type": "string",
            "description": "The latest received by reference.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "referralCode": {
            "type": "string",
            "description": "The referral code.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "Contact": {
        "type": "object",
        "description": "Contact model describing a person contact information.\n            ",
        "additionalProperties": false,
        "required": [
          "contactTypeCode"
        ],
        "properties": {
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\nSupported types: Home, Work, Fax, Other.\nThis collections can only contain one number for each supported type.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "address": {
            "description": "The contact address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the contact.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "Source organization.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "distributionOption": {
            "description": "The contact distribution option.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DistributionOption"
          },
          "notificationPreference": {
            "description": "The notification preference of the contact.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "companyName": {
            "type": "string",
            "description": "The company name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The contact's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "contactTypeCode": {
            "type": "string",
            "description": "The contact type code. There can only be one contact of a specific type on the booking.\nTypically only one contact is used. Null values will be replaced by the primary contact type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          }
        }
      },
      "DistributionOption": {
        "type": "integer",
        "description": "This enumeration specifies the distribution methods for sending notifications.\n            \n\n0 = None\n1 = Mail\n2 = Email\n3 = Fax\n4 = MailFax\n5 = Airport\n6 = Hold\n7 = Print",
        "x-enumNames": [
          "None",
          "Mail",
          "Email",
          "Fax",
          "MailFax",
          "Airport",
          "Hold",
          "Print"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "NotificationPreference": {
        "type": "integer",
        "description": "Describes types of notifications the user would prefer.\n            \n\n0 = None\n1 = Promotional",
        "x-enumNames": [
          "None",
          "Promotional"
        ],
        "enum": [
          0,
          1
        ]
      },
      "Passenger": {
        "type": "object",
        "description": "Model information representing a passenger on a journey.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerTypeCode"
        ],
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "The passenger customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The passenger's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code associated with the passenger type.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The passenger programs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerProgram"
          },
          "info": {
            "description": "Additional passenger information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger identifier key.\n            ",
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger alternate key is used to identify a passenger post commit of the booking.\n            ",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "description": "Fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          },
          "passengerTypeCode": {
            "type": "string",
            "description": "The passenger type code.\n            ",
            "minLength": 1
          },
          "bags": {
            "type": "array",
            "description": "Passenger bags.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerBag"
            }
          },
          "infant": {
            "description": "The optional infant associated with this passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInfant"
          },
          "travelDocuments": {
            "type": "array",
            "description": "The collection of passenger travel Documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The collection of passenger addresses.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerAddress"
            }
          },
          "weightCategory": {
            "description": "The weight category assigned to this passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightCategory"
          },
          "emdCoupons": {
            "type": "array",
            "description": "The passenger EMD coupons.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerEmdCoupon"
            }
          }
        }
      },
      "PassengerProgram": {
        "type": "object",
        "description": "Model representing a passenger program.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "pattern": "^[^|]*$",
            "nullable": true
          },
          "levelCode": {
            "type": "string",
            "description": "The program level code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "pattern": "^[^|]*$",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The program number.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerInformation": {
        "type": "object",
        "description": "Model representing additional passenger information.\n            ",
        "additionalProperties": false,
        "properties": {
          "nationality": {
            "type": "string",
            "description": "The passenger nationality.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The resident country.\n            ",
            "maxLength": 2,
            "minLength": 2,
            "nullable": true
          },
          "gender": {
            "description": "Gets or sets passenger gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The passenger's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "familyNumber": {
            "type": "integer",
            "description": "The unique identifier of a family registered in the system.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerFee": {
        "type": "object",
        "description": "Model representing passenger fee information.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "isConfirmed": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee has been confirmed or not.\n            "
          },
          "isConfirming": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming or not.\n            "
          },
          "isConfirmingExternal": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming external or not.\n            "
          },
          "code": {
            "type": "string",
            "description": "The fee code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "detail": {
            "type": "string",
            "description": "The fee detail.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "passengerFeeKey": {
            "type": "string",
            "description": "The passenger fee key.\n            ",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "The fee override.\n            "
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference which signifies a link to a segment and or leg.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The fee notes.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date for the fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "isProtected": {
            "type": "boolean",
            "description": "Indicates if the fee is protected.\n            "
          },
          "serviceCharges": {
            "type": "array",
            "description": "The list of service charges for the fee.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "type": {
            "description": "The fee type.\n            ",
            "$ref": "#/components/schemas/FeeType"
          },
          "ssrCode": {
            "type": "string",
            "description": "The SSR code.\n            ",
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The fee SSR number.\n            "
          },
          "paymentNumber": {
            "type": "integer",
            "description": "The fee payment number.\n            "
          }
        }
      },
      "FeeType": {
        "type": "integer",
        "description": "Enumeration representing all the different fee types.\n            \n\n0 = All\n1 = Tax\n2 = TravelFee\n3 = ServiceFee\n4 = PaymentFee\n5 = PenaltyFee\n6 = SsrFee\n7 = NonFlightServiceFee\n8 = UpgradeFee\n9 = SeatFee\n10 = BaseFare\n11 = SpoilageFee\n12 = NameChangeFee\n13 = ConvenienceFee\n14 = BaggageFee\n15 = FareSurcharge\n16 = PromotionDiscount\n17 = ServiceBundle\n18 = ExtraBagFee\n19 = ATPCOBagFee",
        "x-enumNames": [
          "All",
          "Tax",
          "TravelFee",
          "ServiceFee",
          "PaymentFee",
          "PenaltyFee",
          "SsrFee",
          "NonFlightServiceFee",
          "UpgradeFee",
          "SeatFee",
          "BaseFare",
          "SpoilageFee",
          "NameChangeFee",
          "ConvenienceFee",
          "BaggageFee",
          "FareSurcharge",
          "PromotionDiscount",
          "ServiceBundle",
          "ExtraBagFee",
          "ATPCOBagFee"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19
        ]
      },
      "PassengerInfant": {
        "type": "object",
        "description": "Model representing an infant with a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "nationality": {
            "type": "string",
            "description": "The nationality of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The residentCountry of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "fees": {
            "type": "array",
            "description": "The collection of infant fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InfantFee"
            }
          },
          "travelDocuments": {
            "type": "array",
            "description": "Travel Documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "type": {
            "type": "string",
            "description": "The infant passenger type.\n            ",
            "nullable": true
          }
        }
      },
      "InfantFee": {
        "type": "object",
        "description": "Defines the infant fee information.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "isConfirmed": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee has been confirmed or not.\n            "
          },
          "isConfirming": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming or not.\n            "
          },
          "isConfirmingExternal": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming external or not.\n            "
          },
          "code": {
            "type": "string",
            "description": "The fee code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "detail": {
            "type": "string",
            "description": "The fee detail.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "passengerFeeKey": {
            "type": "string",
            "description": "The passenger fee key.\n            ",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "The fee override.\n            "
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference which signifies a link to a segment and or leg.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The fee notes.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date for the fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "isProtected": {
            "type": "boolean",
            "description": "Indicates if the fee is protected.\n            "
          },
          "serviceCharges": {
            "type": "array",
            "description": "The list of service charges for the fee.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          }
        }
      },
      "PassengerAddress": {
        "type": "object",
        "description": "Passenger address information. This contains more data then the base address class.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The addresses APIS status.\n            ",
            "$ref": "#/components/schemas/ApisAddressStatus"
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "passengerAddressKey": {
            "type": "string",
            "description": "The unique address identifier.\n            ",
            "nullable": true
          }
        }
      },
      "ApisAddressStatus": {
        "type": "integer",
        "description": "Defines what type of APIS requirement is the address.\n            \n\n0 = Residence\n1 = InCountry\n2 = Emergency\n3 = Contact",
        "x-enumNames": [
          "Residence",
          "InCountry",
          "Emergency",
          "Contact"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "WeightCategory": {
        "type": "integer",
        "description": "Weight Categories enumeration.\n            \n\n1 = Male\n2 = Female\n3 = Child",
        "x-enumNames": [
          "Male",
          "Female",
          "Child"
        ],
        "enum": [
          1,
          2,
          3
        ]
      },
      "PassengerEmdCoupon": {
        "type": "object",
        "description": "Model information for the passenger EMD coupon.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The EMD coupon status.\n            ",
            "$ref": "#/components/schemas/EmdCouponStatus"
          },
          "emdTypeCode": {
            "description": "The EMD type code.\n            ",
            "$ref": "#/components/schemas/EmdTypeCode"
          },
          "passengerEmdCouponKey": {
            "type": "string",
            "description": "The unique identifier for a passenger EMD coupon.\n            ",
            "nullable": true
          },
          "emdNumber": {
            "type": "string",
            "description": "The 13 digit passenger EMD number, assigned after the EMD has been issued.\n            ",
            "maxLength": 13,
            "minLength": 0,
            "nullable": true
          },
          "couponNumber": {
            "type": "integer",
            "description": "The EMD coupon number, assigned after the EMD has been issued.\nTODO: In SkySpeed this is 0-4 only\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "optionalServiceInformation": {
            "description": "The optional service information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OptionalServiceInformation"
          },
          "salesDate": {
            "type": "string",
            "description": "The sale date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "flightReference": {
            "type": "string",
            "description": "The EMD flight reference.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          },
          "receivedFromSystemCode": {
            "type": "string",
            "description": "The received from system code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "numberOfServices": {
            "type": "integer",
            "description": "The number of services.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          },
          "feeType": {
            "description": "The EMD related fee type.\n            ",
            "$ref": "#/components/schemas/FeeType"
          },
          "feeKey": {
            "type": "string",
            "description": "The EMD related fee key.\n            ",
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "The EMD related SSR code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The EMD related SSR code.\n            ",
            "nullable": true
          }
        }
      },
      "EmdCouponStatus": {
        "type": "integer",
        "description": "Represents the EMD coupon status options.\n            \n\n0 = Unknown\n1 = HeldConfirmed\n2 = HoldingNeed\n3 = HoldingConfirmedEmdRequired\n4 = HoldingConfirmedEmdIssued",
        "x-enumNames": [
          "Unknown",
          "HeldConfirmed",
          "HoldingNeed",
          "HoldingConfirmedEmdRequired",
          "HoldingConfirmedEmdIssued"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "EmdTypeCode": {
        "type": "integer",
        "description": "Represents the EMD type code options.\n            \n\n0 = None\n1 = Associated\n2 = StandAlone",
        "x-enumNames": [
          "None",
          "Associated",
          "StandAlone"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OptionalServiceInformation": {
        "type": "object",
        "description": "Represents the optional service information model.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The optional service carrier code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "reasonForIssuanceSubCode": {
            "type": "string",
            "description": "The optional service reason for issuance sub-code (RFISC).\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "Journey": {
        "type": "object",
        "description": "Data about the journey which represents the collection of segments and their legs on the journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The unique identifier for this journey sell information.\n            ",
            "nullable": true
          },
          "notForGeneralUser": {
            "type": "boolean",
            "description": "A value indicating whether the journey is for a general user.\n            "
          },
          "flightType": {
            "description": "Returns a flight type enumeration. (NonStop, Thru, etc.)\n            ",
            "$ref": "#/components/schemas/FlightType"
          },
          "stops": {
            "type": "integer",
            "description": "The total number of stops this flight takes.\n            ",
            "format": "int32"
          },
          "designator": {
            "description": "This is a summary of all the segments. It will contain the details\nof the transportation from the first and last segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "move": {
            "description": "The information regarding the journey move restrictions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/JourneyMove"
          },
          "segments": {
            "type": "array",
            "description": "The collection of segments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Segment"
            }
          }
        }
      },
      "FlightType": {
        "type": "integer",
        "description": "Flight types enumeration.\n            \n\n0 = None\n1 = NonStop\n2 = Through\n3 = Direct\n4 = Connect\n5 = All",
        "x-enumNames": [
          "None",
          "NonStop",
          "Through",
          "Direct",
          "Connect",
          "All"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "JourneyMove": {
        "type": "object",
        "description": "Summarized move data at the journey level.\n            ",
        "additionalProperties": false,
        "properties": {
          "maxMoveBackDays": {
            "type": "integer",
            "description": "The maximum number of days this flight can be moved backwards.\n            ",
            "format": "int32"
          },
          "maxMoveOutDays": {
            "type": "integer",
            "description": "The maximum number of days this flight can be moved forward.\n            ",
            "format": "int32"
          }
        }
      },
      "Segment": {
        "type": "object",
        "description": "Segment model for an already booked flight.\n            ",
        "additionalProperties": false,
        "properties": {
          "isStandby": {
            "type": "boolean",
            "description": "Represents the stand by status of the segment.\n            "
          },
          "isConfirming": {
            "type": "boolean",
            "description": "Represents the confirming status of the segment.\n            "
          },
          "isConfirmingExternal": {
            "type": "boolean",
            "description": "Represents the pending external confirming status of the segment.\n            "
          },
          "channelType": {
            "description": "The type of the channel from the user that added the segment.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "priorityCode": {
            "type": "string",
            "description": "The priority code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "salesDate": {
            "type": "string",
            "description": "The segment sales date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference which signifies a link to a segment and or leg.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "Represents the segment status.\n            ",
            "$ref": "#/components/schemas/SegmentStatus"
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Represents the blocked status of the segment.\n            "
          },
          "isHosted": {
            "type": "boolean",
            "description": "Represents the hosted status of the segment.\n            "
          },
          "isChangeOfGauge": {
            "type": "boolean",
            "description": "Represents the change of gauge status of the segment.\n            "
          },
          "designator": {
            "description": "This is a summary of all the legs on the segment. It will contain the details\nof the transportation from the first and last leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for this segment sell information.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "changeReasonCode": {
            "description": "The change reason code.\n            ",
            "$ref": "#/components/schemas/ChangeReasonCodes"
          },
          "international": {
            "type": "boolean",
            "description": "The value indicating if this segment is international.\n            "
          },
          "legs": {
            "type": "array",
            "description": "The legs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          },
          "isSeatmapViewable": {
            "type": "boolean",
            "description": "Indicates if the seatmaps associated with the segment are retrievable.\nSets to `false` for passive segments, and `true` for non-passive segments.\n            "
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "externalIdentifier": {
            "description": "The external transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "segmentType": {
            "description": "The type of the segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "fares": {
            "type": "array",
            "description": "The fares.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Fare"
            }
          },
          "passengerSegment": {
            "type": "object",
            "description": "Passengers on this segment by passenger key.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSegment"
            }
          }
        }
      },
      "SegmentStatus": {
        "type": "integer",
        "description": "The segment status.\n            \n\n0 = UnknownStatus\n1 = UnableToConfirmSegment\n2 = UnableToSellSegment\n3 = HeldPending\n4 = WaitListConfirmed\n5 = HeldUnconfirmed\n6 = HeldConfirmed\n7 = HeldCancelled\n8 = Confirming\n9 = ConfirmingWaitList\n10 = ConfirmedTimeChange",
        "x-enumNames": [
          "UnknownStatus",
          "UnableToConfirmSegment",
          "UnableToSellSegment",
          "HeldPending",
          "WaitListConfirmed",
          "HeldUnconfirmed",
          "HeldConfirmed",
          "HeldCancelled",
          "Confirming",
          "ConfirmingWaitList",
          "ConfirmedTimeChange"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "ChangeReasonCodes": {
        "type": "integer",
        "description": "Specifies the type of code share agreement.\n            \n\n0 = NoChange\n1 = Irop\n2 = ScheduleChange\n3 = Move\n4 = VoluntaryFlyAhead\n5 = InvoluntaryFlyAhead\n6 = SelfServiceRebooking",
        "x-enumNames": [
          "NoChange",
          "Irop",
          "ScheduleChange",
          "Move",
          "VoluntaryFlyAhead",
          "InvoluntaryFlyAhead",
          "SelfServiceRebooking"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "Leg": {
        "type": "object",
        "description": "Model data describing the leg which is a single travel leg from point a to b.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier for this leg sell information.\n            ",
            "nullable": true
          },
          "designator": {
            "description": "Transportation information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "operationsInfo": {
            "description": "The operations information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationsInformation"
          },
          "legInfo": {
            "description": "The leg information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegInformation"
          },
          "nests": {
            "type": "array",
            "description": "The collection of leg nests.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegNest"
            }
          },
          "ssrs": {
            "type": "array",
            "description": "The Ssrs summary information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegSsr"
            }
          },
          "seatmapReference": {
            "type": "string",
            "description": "The reference identifying what seatmap the leg is in associated to.\n            ",
            "nullable": true
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference which signifies a link to a segment and or leg.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "OperationsInformation": {
        "type": "object",
        "description": "Model describing the operations information.\n            ",
        "additionalProperties": false,
        "properties": {
          "arrivalGate": {
            "description": "The arrival gate information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GateInformation"
          },
          "departureGate": {
            "description": "The departure gate information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GateInformation"
          },
          "actualOffBlockTime": {
            "type": "string",
            "description": "The actual off block time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "actualOnBlockTime": {
            "type": "string",
            "description": "The actual on block time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "actualTouchDownTime": {
            "type": "string",
            "description": "The actual touch down time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "airborneTime": {
            "type": "string",
            "description": "The airborne time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalNote": {
            "type": "string",
            "description": "The arrival note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "arrivalStatus": {
            "description": "The arrival status.\n            ",
            "$ref": "#/components/schemas/ArrivalStatus"
          },
          "baggageClaim": {
            "type": "string",
            "description": "The baggage claim.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "departureNote": {
            "type": "string",
            "description": "The departure note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "departureStatus": {
            "description": "The departure status.\n            ",
            "$ref": "#/components/schemas/DepartureStatus"
          },
          "departureTimes": {
            "description": "The departure time information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DepartureEvent"
          },
          "standardArrivalTime": {
            "type": "string",
            "description": "The standard time of arrival (STA).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "tailNumber": {
            "type": "string",
            "description": "The tail number.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "estimatedArrivalTime": {
            "type": "string",
            "description": "The estimated time of arrival (ETA).\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "GateInformation": {
        "type": "object",
        "description": "Represents the gate information for the trip status model.  Consists\nof actual gate information and estimated/scheduled gate information.\n            ",
        "additionalProperties": false,
        "properties": {
          "estimatedGate": {
            "type": "string",
            "description": "Represents the estimated or scheduled gate of the trip mode.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "actualGate": {
            "type": "string",
            "description": "Represents the actual gate of the trip mode.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ArrivalStatus": {
        "type": "integer",
        "description": "Arrival status.\n            \n\n0 = Default\n1 = Cancelled\n2 = Arrived\n3 = SeeAgent\n4 = Delayed",
        "x-enumNames": [
          "Default",
          "Cancelled",
          "Arrived",
          "SeeAgent",
          "Delayed"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "DepartureStatus": {
        "type": "integer",
        "description": "Departure status.\n            \n\n0 = Default\n1 = Cancelled\n2 = Boarding\n3 = SeeAgent\n4 = Delayed\n5 = Departed",
        "x-enumNames": [
          "Default",
          "Cancelled",
          "Boarding",
          "SeeAgent",
          "Delayed",
          "Departed"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "DepartureEvent": {
        "type": "object",
        "description": "Represents the flight operation times for the departure event, which\nincludes an estimated and scheduled time event.\n            ",
        "additionalProperties": false,
        "properties": {
          "scheduled": {
            "type": "string",
            "description": "Represents the scheduled departure time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "estimated": {
            "type": "string",
            "description": "Represents the estimated departure time.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "LegInformation": {
        "type": "object",
        "description": "Model describing the detailed leg information.\n            ",
        "additionalProperties": false,
        "properties": {
          "departureTimeUtc": {
            "type": "string",
            "description": "The departure time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalTimeUtc": {
            "type": "string",
            "description": "The arrival time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg adjusted capacity.\n            "
          },
          "arrivalTerminal": {
            "type": "string",
            "description": "The leg arrival terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "arrivalTimeVariant": {
            "type": "integer",
            "description": "The leg arrival Local Time Variant (LTV).\n            "
          },
          "backMoveDays": {
            "type": "integer",
            "description": "The legs back move days.\n            "
          },
          "capacity": {
            "type": "integer",
            "description": "The leg capacity.\n            "
          },
          "changeOfDirection": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a change of direction.\n            "
          },
          "codeShareIndicator": {
            "description": "The leg code share indicator.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          },
          "departureTerminal": {
            "type": "string",
            "description": "The leg departure terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "departureTimeVariant": {
            "type": "integer",
            "description": "The leg departure Local Time Variant (LTV).\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "The leg type of the equipment.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The leg equipment type suffix.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "eTicket": {
            "type": "boolean",
            "description": "A value indicating whether this leg is an e-ticketed leg.\n            "
          },
          "irop": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this leg is an IROP.\n            "
          },
          "lid": {
            "type": "integer",
            "description": "The legs lid.\n            "
          },
          "marketingCode": {
            "type": "string",
            "description": "The leg marketing code.\n            ",
            "nullable": true
          },
          "marketingOverride": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a marketing override.\n            "
          },
          "operatedByText": {
            "type": "string",
            "description": "The leg \"operated by\" text.\n            ",
            "nullable": true
          },
          "operatingCarrier": {
            "type": "string",
            "description": "The leg operating carrier.\n            ",
            "nullable": true
          },
          "operatingFlightNumber": {
            "type": "string",
            "description": "The leg operating flight number.\n            ",
            "nullable": true
          },
          "operatingOpSuffix": {
            "type": "string",
            "description": "The leg operating operating suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "outMoveDays": {
            "type": "integer",
            "description": "The leg move out days.\n            "
          },
          "arrivalTime": {
            "type": "string",
            "description": "The leg passenger standard time of arrival (STA).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The leg passenger standard time of departure (STD).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "prbcCode": {
            "type": "string",
            "description": "The leg PRBC code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "scheduleServiceType": {
            "type": "string",
            "description": "The type of the schedule service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "sold": {
            "type": "integer",
            "description": "The sold.\n            "
          },
          "status": {
            "description": "The legs status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "subjectToGovtApproval": {
            "type": "boolean",
            "description": "A value indicating whether the leg is subject to government approval.\n            "
          }
        }
      },
      "LegNest": {
        "type": "object",
        "description": "A model representing a leg nest.\n            ",
        "additionalProperties": false,
        "properties": {
          "adjustedCapacity": {
            "type": "integer",
            "description": "Gets or sets the adjusted capacity of the nest.\n            "
          },
          "classNest": {
            "type": "integer",
            "description": "Gets or sets the nest class nest.\n            "
          },
          "lid": {
            "type": "integer",
            "description": "Gets or sets the nest lid.\n            "
          },
          "travelClassCode": {
            "type": "string",
            "description": "Gets or sets the nest travel class code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "nestType": {
            "description": "Gets or sets the type of the nest.\n            ",
            "$ref": "#/components/schemas/NestType"
          },
          "legClasses": {
            "type": "array",
            "description": "Gets or sets the nest leg classes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegClass"
            }
          }
        }
      },
      "LegClass": {
        "type": "object",
        "description": "The leg class model information.\n            ",
        "additionalProperties": false,
        "required": [
          "classOfService"
        ],
        "properties": {
          "classAllotted": {
            "type": "integer",
            "description": "The leg class allotted.\n            "
          },
          "classAuthorizedUnits": {
            "type": "integer",
            "description": "The leg class Authorized Units (AUs).\n            "
          },
          "classOfService": {
            "type": "string",
            "description": "The leg class, class of service.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "classRank": {
            "type": "integer",
            "description": "The leg class rank.\n            "
          },
          "classSold": {
            "type": "integer",
            "description": "The class sold.\n            "
          },
          "cnxSold": {
            "type": "integer",
            "description": "The CNX sold.\n            "
          },
          "latestAdvancedReservation": {
            "type": "integer",
            "description": "The latest advanced reservation.\n            "
          },
          "status": {
            "description": "The status.\n            ",
            "$ref": "#/components/schemas/ClassStatus"
          },
          "thruSold": {
            "type": "integer",
            "description": "The thru sold.\n            "
          },
          "classNest": {
            "type": "integer",
            "description": "The leg class nest.\n            "
          },
          "classType": {
            "type": "string",
            "description": "The type of class.\n            ",
            "nullable": true
          }
        }
      },
      "Fare": {
        "type": "object",
        "description": "Model describing a fare.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The fares carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "fareApplicationType": {
            "description": "The type of the fare application.\n            ",
            "$ref": "#/components/schemas/FareApplicationType"
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "inboundOutBound": {
            "description": "The inbound and outbound.\n            ",
            "$ref": "#/components/schemas/InboundOutbound"
          },
          "isAllotmentMarketFare": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this fare is an allotment marker.\n            "
          },
          "ruleNumber": {
            "type": "string",
            "description": "The rule number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ruleTariff": {
            "type": "string",
            "description": "The rule tariff.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "isGoverning": {
            "type": "boolean",
            "description": "Flag that indicates if the fare is the governing fare.\n            "
          },
          "downgradeAvailable": {
            "type": "boolean",
            "description": "Flag indicating if a class of service change has been made.\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "4.4.1 - Compare ClassOfService to FareClassOfService"
          },
          "fareKey": {
            "type": "string",
            "description": "Unique key for this type of fare.\n            ",
            "nullable": true
          },
          "classType": {
            "type": "string",
            "description": "The fares type of the class.\n            ",
            "nullable": true
          },
          "fareClassOfService": {
            "type": "string",
            "description": "The fare class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "fareSequence": {
            "type": "integer",
            "description": "The fare sequence.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "fareStatus": {
            "description": "The fare status.\n            ",
            "$ref": "#/components/schemas/FareStatus"
          },
          "originalClassOfService": {
            "type": "string",
            "description": "The original class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "productClass": {
            "type": "string",
            "description": "The product class.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "travelClassCode": {
            "type": "string",
            "description": "The travel class code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "crossReferenceClassOfService": {
            "type": "string",
            "description": "The cross reference class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "passengerFares": {
            "type": "array",
            "description": "The collection of passenger fares.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFare"
            }
          },
          "fareLink": {
            "type": "integer",
            "description": "The fare link.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          }
        }
      },
      "FareApplicationType": {
        "type": "integer",
        "description": "This enumeration defines the fare application type of a fare.\n            \n\n0 = Route\n1 = Sector\n2 = Governing",
        "x-enumNames": [
          "Route",
          "Sector",
          "Governing"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "InboundOutbound": {
        "type": "integer",
        "description": "This enumeration specifies direction of flight application.\n            \n\n0 = None\n1 = Inbound\n2 = Outbound\n3 = Both\n4 = RoundFrom\n5 = RoundTo",
        "x-enumNames": [
          "None",
          "Inbound",
          "Outbound",
          "Both",
          "RoundFrom",
          "RoundTo"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "FareStatus": {
        "type": "integer",
        "description": "This enumeration defines the fare status of a passenger fare.\n            \n\n0 = Default\n1 = SameDayStandBy\n2 = FareOverrideConfirming\n3 = FareOverrideConfirmed\n4 = PublishedFareOverrideConfirming\n5 = PublishedFareOverrideConfirmed",
        "x-enumNames": [
          "Default",
          "SameDayStandBy",
          "FareOverrideConfirming",
          "FareOverrideConfirmed",
          "PublishedFareOverrideConfirming",
          "PublishedFareOverrideConfirmed"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "PassengerFare": {
        "type": "object",
        "description": "Model that represents the passenger fare details.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerType"
        ],
        "properties": {
          "fareDiscountCode": {
            "type": "string",
            "description": "The fare discount code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "passengerType": {
            "type": "string",
            "description": "The type of the passenger.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "serviceCharges": {
            "type": "array",
            "description": "The service charges.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "discountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerSegment": {
        "type": "object",
        "description": "Model data for the passenger on the booking for the specific segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "seats": {
            "type": "array",
            "description": "The seat details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSeat"
            }
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique key of the passenger on the segment\n            ",
            "nullable": true
          },
          "activityDate": {
            "type": "string",
            "description": "The activity date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "boardingSequence": {
            "type": "string",
            "description": "The passenger segment boarding sequence.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "liftStatus": {
            "description": "The lift status.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "modifiedDate": {
            "type": "string",
            "description": "The modified date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "overBookIndicator": {
            "description": "The over book indicator.\n            ",
            "$ref": "#/components/schemas/OverbookIndicatorTypes"
          },
          "priorityDate": {
            "type": "string",
            "description": "The priority date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "timeChanged": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the passenger segment time has changed.\n            "
          },
          "verifiedTravelDocs": {
            "type": "string",
            "description": "The verified travel docs. Please use VerifiedTravelDocuments instead.\n            ",
            "maxLength": 44,
            "minLength": 0,
            "nullable": true
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "ssrs": {
            "type": "array",
            "description": "The Ssr information for both the leg and segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSsr"
            }
          },
          "tickets": {
            "type": "array",
            "description": "The ticket information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          },
          "bags": {
            "type": "array",
            "description": "The baggage information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSegmentBag"
            }
          },
          "scores": {
            "type": "array",
            "description": "The collection of passenger scores.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerScore"
            }
          },
          "boardingPassDetail": {
            "description": "The passengers boarding pass details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerBoardingPassDetail"
          },
          "hasInfant": {
            "type": "boolean",
            "description": "Flag indicating if the passenger has an infant for the specific segment.\n            "
          },
          "seatPreferences": {
            "description": "The passenger seat preferences.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatPreferences"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code associated with the passenger segment.\n            ",
            "nullable": true
          },
          "verifiedTravelDocuments": {
            "type": "array",
            "description": "The travel document keys that have been verified at checkin.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "referenceNumber": {
            "type": "integer",
            "description": "The reference number, used as an identifier by New Skies Rail customers  for purposes\nof ticketing and check in.\n            ",
            "format": "int64"
          }
        }
      },
      "PassengerSeat": {
        "type": "object",
        "description": "Model for a passenger seat for a segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "compartmentDesignator": {
            "type": "string",
            "description": "The passenger seat compartment designator.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "penalty": {
            "type": "integer",
            "description": "The passenger seat penalty.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "unitDesignator": {
            "type": "string",
            "description": "The passenger seat unit designator.\n            ",
            "nullable": true
          },
          "seatInformation": {
            "description": "The passenger seat seat information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatInfo"
          },
          "arrivalStation": {
            "type": "string",
            "description": "The leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "departureStation": {
            "type": "string",
            "description": "The leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key associated with the seat.\n            ",
            "nullable": true
          },
          "unitKey": {
            "type": "string",
            "description": "The seat's unique unit key.\n            ",
            "nullable": true
          },
          "crossReferenceSeatingPreference": {
            "type": "string",
            "description": "The seating preference for non-hosted flight seating assignments.\nCould be either one of the following values:\nnull = seating preference is not applicable (usual value for hosted flights)\nN = no requested seating preference\nA = aisle\nW = window\nF = front seating location\nR = rear seating location\nAF = front seating location, on aisle\nAR = rear seating location, on aisle\nWF = front seating location, on window\nWR = rear seating location, on window\n            ",
            "nullable": true
          },
          "isPending": {
            "type": "boolean",
            "description": "Determines whether or not the seat is pending request.\n            "
          },
          "seatmapReference": {
            "type": "string",
            "description": "The reference identifying what seat map the passenger seat is associated to.\n            ",
            "nullable": true
          }
        }
      },
      "SeatInfo": {
        "type": "object",
        "description": "The model for the seat information such as deck, seat properties, etc.\n            ",
        "additionalProperties": false,
        "properties": {
          "deck": {
            "type": "integer",
            "description": "Gets or sets the deck.\n            "
          },
          "seatSet": {
            "type": "integer",
            "description": "Gets or sets the seat set.\n            "
          },
          "propertyList": {
            "type": "object",
            "description": "The property list by type code and value.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OverbookIndicatorTypes": {
        "type": "integer",
        "description": "Specifies the type of code share agreement.\n            \n\n0 = NormalSell\n1 = Oversold\n2 = ClassOrCabinOversold",
        "x-enumNames": [
          "NormalSell",
          "Oversold",
          "ClassOrCabinOversold"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PassengerSsr": {
        "type": "object",
        "description": "The model for a passengers Ssr details.\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "The passenger SSR note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "The passenger SSR unit value.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          },
          "inBundle": {
            "type": "boolean",
            "description": "Indicates if the SSR is part of a bundle.\n            "
          },
          "ssrDuration": {
            "description": "The length of the Ssr duration.\n            ",
            "$ref": "#/components/schemas/SsrDurationType"
          },
          "ssrCode": {
            "type": "string",
            "description": "The passenger SSR code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger key.\n            ",
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The passenger SSR number.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "market": {
            "description": "The market for either the leg or segment depending on the Ssr type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "isConfirmed": {
            "type": "boolean",
            "description": "A status flag to indicate if the ssr has been confirmed or not.\n            "
          },
          "isConfirmingUnheld": {
            "type": "boolean",
            "description": "A status flag to indicate if the ssr is in a confirming unheld state.\n            "
          },
          "ssrKey": {
            "type": "string",
            "description": "The key that uniquely identifies the Ssr, passenger, and leg or segment.\n            ",
            "nullable": true
          },
          "feeCode": {
            "type": "string",
            "description": "The SSR fee code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "ssrDetail": {
            "type": "string",
            "description": "The passenger SSR detail.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "SsrDurationType": {
        "type": "integer",
        "description": "Ssr duration type.\n            \n\n0 = Segment\n1 = Journey\n2 = Leg",
        "x-enumNames": [
          "Segment",
          "Journey",
          "Leg"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "Ticket": {
        "type": "object",
        "description": "Model for a ticket applied to a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number.\n            ",
            "maxLength": 14,
            "minLength": 0,
            "nullable": true
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The infant ticket number.\n            ",
            "maxLength": 14,
            "minLength": 0,
            "nullable": true
          },
          "ticketIndicator": {
            "description": "The ticket indicator.\n            ",
            "$ref": "#/components/schemas/TicketIndicatorCode"
          },
          "ticketStatus": {
            "description": "The ticket status.\n            ",
            "$ref": "#/components/schemas/TicketStatusCode"
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key the ticket is associated with.\n            ",
            "nullable": true
          }
        }
      },
      "TicketIndicatorCode": {
        "type": "integer",
        "description": "This enumeration defines the ticket requirements\n            \n\n0 = Unknown\n1 = TicketRequired\n2 = AutomatedTicketLiftRequired\n3 = ManualTicketLiftRequired\n4 = AutomatedTicketNoLiftRequired\n5 = ManualTicketNoLiftRequired\n6 = HostETicketNoLiftRequired\n7 = ElectronicTicketNoLiftRequired",
        "x-enumNames": [
          "Unknown",
          "TicketRequired",
          "AutomatedTicketLiftRequired",
          "ManualTicketLiftRequired",
          "AutomatedTicketNoLiftRequired",
          "ManualTicketNoLiftRequired",
          "HostETicketNoLiftRequired",
          "ElectronicTicketNoLiftRequired"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "TicketStatusCode": {
        "type": "integer",
        "description": "This enumeration defines the ticket availability status.\n            \n\n0 = Unknown\n1 = TicketAvailableForUse\n2 = TicketUnavailableForUse\n3 = TicketReissueRequiredForPassenger\n4 = TicketReissueRequiredForInfant\n5 = TicketReissueRequiredForBoth",
        "x-enumNames": [
          "Unknown",
          "TicketAvailableForUse",
          "TicketUnavailableForUse",
          "TicketReissueRequiredForPassenger",
          "TicketReissueRequiredForInfant",
          "TicketReissueRequiredForBoth"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "PassengerSegmentBag": {
        "type": "object",
        "description": "Model information about the baggage a passenger has on a segment.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerKey",
          "arrivalStation",
          "departureStation"
        ],
        "properties": {
          "baggageKey": {
            "type": "string",
            "description": "Unique key for the baggage.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key associated to this bag.\n            ",
            "minLength": 1
          },
          "arrivalStation": {
            "type": "string",
            "description": "The bag segment arrival station.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "status": {
            "description": "The bag status.\n            ",
            "$ref": "#/components/schemas/BaggageStatus"
          },
          "departureStation": {
            "type": "string",
            "description": "The bag segment departure station.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "osTag": {
            "type": "string",
            "description": "The bag OS tag.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerScore": {
        "type": "object",
        "description": "Defines a passenger score.\n            ",
        "additionalProperties": false,
        "required": [
          "guestValueCode"
        ],
        "properties": {
          "guestValueCode": {
            "type": "string",
            "description": "The guest value code.\n            ",
            "maxLength": 8,
            "minLength": 1
          },
          "score": {
            "type": "integer",
            "description": "The score.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key associated with the score.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerBoardingPassDetail": {
        "type": "object",
        "description": "Defines information used to populate the printed boarding pass and 2D bar codes.\n            ",
        "additionalProperties": false,
        "properties": {
          "gateInformation": {
            "type": "string",
            "description": "The gate information from the boarding pass.\n            ",
            "nullable": true
          },
          "priorityInformation": {
            "type": "string",
            "description": "The priority information from the boarding pass.\n            ",
            "nullable": true
          },
          "cabinClass": {
            "type": "string",
            "description": "The cabin class as seen from the boarding pass.\n            ",
            "nullable": true
          },
          "compartmentLevel": {
            "type": "string",
            "description": "The compartment level as seen from the boarding pass.\n            ",
            "nullable": true
          },
          "boardingZone": {
            "type": "string",
            "description": "The assigned boarding zone from the boarding pass.\n            ",
            "nullable": true
          },
          "seatAssignment": {
            "type": "string",
            "description": "The seat assignment as seen from the boarding pass.\n            ",
            "nullable": true
          },
          "sequenceNumber": {
            "type": "string",
            "description": "The boarding sequence number as seen from the boarding pass.\n            ",
            "nullable": true
          }
        }
      },
      "SeatPreferences": {
        "type": "object",
        "description": "Represents the seating preferences base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "seat": {
            "description": "The simple seating preference.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SimpleSeatPreference"
          },
          "travelClass": {
            "description": "The preferred travel class of service.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelClassSeatPreference"
          },
          "advancedPreferences": {
            "type": "array",
            "description": "The advanced seating preferences.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatPreference"
            }
          }
        }
      },
      "SimpleSeatPreference": {
        "type": "integer",
        "description": "Represents a simple seating preference.\n            \n\n0 = None\n1 = Window\n2 = Aisle\n3 = Other",
        "x-enumNames": [
          "None",
          "Window",
          "Aisle",
          "Other"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "TravelClassSeatPreference": {
        "type": "integer",
        "description": "Represents a travel class seating preference.\n            \n\n0 = None\n1 = Business\n2 = Economy\n3 = FirstClass",
        "x-enumNames": [
          "None",
          "Business",
          "Economy",
          "FirstClass"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "SeatPreference": {
        "type": "object",
        "description": "Represents a single seat preference.\n            ",
        "additionalProperties": false,
        "required": [
          "seatMapCode",
          "value"
        ],
        "properties": {
          "seatMapCode": {
            "type": "string",
            "description": "The seat map code (ex. 'SMOKING').\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "value": {
            "type": "string",
            "description": "The seat map value (ex. 'TRUE').\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "status": {
            "description": "Defines if the seat preference is met, not met or unknown.\n            ",
            "$ref": "#/components/schemas/SeatPreferenceStatus"
          }
        }
      },
      "SeatPreferenceStatus": {
        "type": "integer",
        "description": "Defines the seat preference status.\n            \n\n0 = Unknown\n1 = Met\n2 = NotMet",
        "x-enumNames": [
          "Unknown",
          "Met",
          "NotMet"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "BookingComment": {
        "type": "object",
        "description": "Defines a booking comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Indicates where the comment will be seen.\n            ",
            "$ref": "#/components/schemas/CommentType"
          },
          "text": {
            "type": "string",
            "description": "The text of the comment.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the comment.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "pointOfSale": {
            "description": "The point of sale for the comment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "commentKey": {
            "type": "string",
            "description": "The comment key.\n            ",
            "nullable": true
          }
        }
      },
      "BookingQueueInfo": {
        "type": "object",
        "description": "Describes the booking queue info.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The identifier for the queue where the booking is placed.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "subCode": {
            "type": "string",
            "description": "The identifier for the sub queue where the booking is placed.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name for the queue where the booking is placed.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "queueId": {
            "type": "integer",
            "description": "The unique ID of the booking queue entry.\n            ",
            "format": "int64"
          },
          "passengerId": {
            "type": "integer",
            "description": "The unique identifier of a passenger on the booking.\n            ",
            "format": "int64"
          },
          "watchListId": {
            "type": "integer",
            "description": "Unique identifier of the watchlist where a match was found for the booking or passenger.\n            ",
            "format": "int64"
          },
          "note": {
            "type": "string",
            "description": "A summary on why the booking was placed in the queue.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of event that triggered placement of the booking in the queue.\n            ",
            "$ref": "#/components/schemas/QueueEventType"
          },
          "action": {
            "description": "The action that will be taken as a result of the placement in the queue.\n            ",
            "$ref": "#/components/schemas/QueueAction"
          },
          "mode": {
            "description": "The indicator if this entry was added or removed from the queue.\n            ",
            "$ref": "#/components/schemas/QueueMode"
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference.\n            ",
            "nullable": true
          },
          "bookingQueueKey": {
            "type": "string",
            "description": "The key of the booking queue entry.\n            ",
            "nullable": true
          }
        }
      },
      "QueueEventType": {
        "type": "integer",
        "description": "Describes the different queue event types.\n            \n\n0 = Default\n1 = BookingBalanceDue\n2 = BookingNegativeBalance\n3 = BookingCustomerComment\n4 = DeclinedPaymentInitial\n5 = DeclinedPaymentChange\n6 = FareOverride\n7 = ScheduleTimeChange\n8 = ScheduleTimeChangeMisconnect\n9 = ScheduleCancellation\n10 = FlightDesignatorChange\n11 = ReaccommodationMove\n12 = GdsCancelWithPendingPayment\n13 = InvalidPriceStatusOverride\n14 = FareRestrictionOverride\n15 = HeldBookings\n16 = InvalidPriceStatus\n17 = Watchlist\n18 = NonFlightServiceFee\n19 = NotAllTicketNumbersReceived\n20 = BookingSegmentOversold\n21 = ReaccommodationCancel\n22 = ExternalSsrAutoConfirmed\n23 = OpCarrierSegUpdate\n24 = OpCarrierSsrUpdate\n25 = OpCarrierOtherUpdate\n26 = NameChangeNotAllowed\n27 = InboundAscNotProcessed\n28 = OpCarrierInformationChange\n29 = BookingComponentUpdate\n30 = GroupBookings\n31 = BankDirectPnrOutOfBalance\n32 = NoSeatAssigned\n33 = SeatNumberChange\n34 = SsrNotSupportedOnNewSeat\n35 = FewerSeatPreferencesMetOnNewSeat\n36 = AosUnableToConfirmCancel\n37 = ETicketIssue\n38 = ETicketFollowup\n39 = InvoluntaryFlyAhead\n40 = ManualClearanceOnOutage\n41 = UnbalancedPoints\n42 = OpCarrierTimeChange\n43 = OaCarrierTimeChange\n44 = VoluntaryFlightChange\n45 = InvoluntaryFlightChange\n46 = HoldCancellationFailed\n47 = ScheduleTimeChangeWithDynamicQueueCode\n48 = ReaccommodationMoveWithDynamicQueueCode\n49 = ItineraryIntegrity\n50 = ReducePartyNotProcessed\n51 = CheckedPassengerUpdate\n52 = MustBeSeatGroupViolation\n57 = NameChangeWithinRule\n58 = IncompletePassengerEMDCoupon\n59 = ASVCUpdateFailed\n60 = FailedFareClassRealignment\n61 = ScheduleTimeChangeMisconnectBelowMinimum\n62 = ScheduleTimeChangeMisconnectAboveMaximum\n63 = OpCarrierMisconnect\n64 = InventoryQueuing\n65 = SelfServiceAsm\n66 = SelfServiceDelay\n67 = SelfServiceFlightCancellation\n68 = SelfServiceIrop\n69 = SelfServiceScheduleChange\n70 = SelfServiceTimeChange\n71 = AosAddOrCancelNotSuccessful\n72 = MissingGdsFareFamily\n73 = ChangeCabinQueue",
        "x-enumNames": [
          "Default",
          "BookingBalanceDue",
          "BookingNegativeBalance",
          "BookingCustomerComment",
          "DeclinedPaymentInitial",
          "DeclinedPaymentChange",
          "FareOverride",
          "ScheduleTimeChange",
          "ScheduleTimeChangeMisconnect",
          "ScheduleCancellation",
          "FlightDesignatorChange",
          "ReaccommodationMove",
          "GdsCancelWithPendingPayment",
          "InvalidPriceStatusOverride",
          "FareRestrictionOverride",
          "HeldBookings",
          "InvalidPriceStatus",
          "Watchlist",
          "NonFlightServiceFee",
          "NotAllTicketNumbersReceived",
          "BookingSegmentOversold",
          "ReaccommodationCancel",
          "ExternalSsrAutoConfirmed",
          "OpCarrierSegUpdate",
          "OpCarrierSsrUpdate",
          "OpCarrierOtherUpdate",
          "NameChangeNotAllowed",
          "InboundAscNotProcessed",
          "OpCarrierInformationChange",
          "BookingComponentUpdate",
          "GroupBookings",
          "BankDirectPnrOutOfBalance",
          "NoSeatAssigned",
          "SeatNumberChange",
          "SsrNotSupportedOnNewSeat",
          "FewerSeatPreferencesMetOnNewSeat",
          "AosUnableToConfirmCancel",
          "ETicketIssue",
          "ETicketFollowup",
          "InvoluntaryFlyAhead",
          "ManualClearanceOnOutage",
          "UnbalancedPoints",
          "OpCarrierTimeChange",
          "OaCarrierTimeChange",
          "VoluntaryFlightChange",
          "InvoluntaryFlightChange",
          "HoldCancellationFailed",
          "ScheduleTimeChangeWithDynamicQueueCode",
          "ReaccommodationMoveWithDynamicQueueCode",
          "ItineraryIntegrity",
          "ReducePartyNotProcessed",
          "CheckedPassengerUpdate",
          "MustBeSeatGroupViolation",
          "NameChangeWithinRule",
          "IncompletePassengerEMDCoupon",
          "ASVCUpdateFailed",
          "FailedFareClassRealignment",
          "ScheduleTimeChangeMisconnectBelowMinimum",
          "ScheduleTimeChangeMisconnectAboveMaximum",
          "OpCarrierMisconnect",
          "InventoryQueuing",
          "SelfServiceAsm",
          "SelfServiceDelay",
          "SelfServiceFlightCancellation",
          "SelfServiceIrop",
          "SelfServiceScheduleChange",
          "SelfServiceTimeChange",
          "AosAddOrCancelNotSuccessful",
          "MissingGdsFareFamily",
          "ChangeCabinQueue"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73
        ]
      },
      "QueueAction": {
        "type": "integer",
        "description": "Specifies the basics by which a queue filter was created.\n            \n\n0 = Default\n1 = Warning\n2 = Lock\n3 = DefaultAndNotify\n4 = WarningAndNotify\n5 = LockAndNotify",
        "x-enumNames": [
          "Default",
          "Warning",
          "Lock",
          "DefaultAndNotify",
          "WarningAndNotify",
          "LockAndNotify"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "QueueMode": {
        "type": "integer",
        "description": "Determines where a queue request is coming from.\n            \n\n0 = EnQueued\n1 = DeQueued",
        "x-enumNames": [
          "EnQueued",
          "DeQueued"
        ],
        "enum": [
          0,
          1
        ]
      },
      "BookingHistory": {
        "type": "object",
        "description": "Defines a booking history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "historyCategory": {
            "description": "The booking history report category.\n            ",
            "$ref": "#/components/schemas/HistoryCategory"
          },
          "details": {
            "type": "string",
            "description": "The the history report data.\n            ",
            "nullable": true
          },
          "event": {
            "description": "The specific history code.\n            ",
            "$ref": "#/components/schemas/BookingHistoryEvent"
          }
        }
      },
      "HistoryCategory": {
        "type": "integer",
        "description": "Represents the various history report types.\n            \n\n0 = Unknown\n1 = Baggage\n2 = BagTagPrint\n3 = BoardingPassPrint\n4 = CheckIn\n5 = ClassOfServiceChange\n6 = Comment\n7 = ConfirmedSegment\n8 = ContactChange\n9 = Converted\n10 = CouponOverride\n11 = DividePnr\n12 = FareOverride\n13 = Fee\n14 = FlightMove\n15 = GroupNameChange\n16 = Hold\n17 = ItinerarySent\n18 = ManualPayment\n19 = MoveBackPnr\n20 = NameChange\n21 = NameRemove\n22 = Payment\n23 = Pds\n24 = Promotion\n25 = QueuePlaceRemove\n26 = RecordLocator\n27 = ScheduleCancelllation\n28 = ScheduleCodeShareChange\n29 = ScheduleFlightDesignatorChange\n30 = ScheduleTimeChange\n31 = SeatAssignment\n32 = SegmentChange\n33 = Reprice\n34 = SsrChange\n35 = StandByChange\n36 = TicketNumber\n37 = VerifiedTravelDocument\n38 = Apps\n39 = InhibitedOverride\n40 = CustomIdChange\n41 = HoldDateChange",
        "x-enumNames": [
          "Unknown",
          "Baggage",
          "BagTagPrint",
          "BoardingPassPrint",
          "CheckIn",
          "ClassOfServiceChange",
          "Comment",
          "ConfirmedSegment",
          "ContactChange",
          "Converted",
          "CouponOverride",
          "DividePnr",
          "FareOverride",
          "Fee",
          "FlightMove",
          "GroupNameChange",
          "Hold",
          "ItinerarySent",
          "ManualPayment",
          "MoveBackPnr",
          "NameChange",
          "NameRemove",
          "Payment",
          "Pds",
          "Promotion",
          "QueuePlaceRemove",
          "RecordLocator",
          "ScheduleCancelllation",
          "ScheduleCodeShareChange",
          "ScheduleFlightDesignatorChange",
          "ScheduleTimeChange",
          "SeatAssignment",
          "SegmentChange",
          "Reprice",
          "SsrChange",
          "StandByChange",
          "TicketNumber",
          "VerifiedTravelDocument",
          "Apps",
          "InhibitedOverride",
          "CustomIdChange",
          "HoldDateChange"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41
        ]
      },
      "BookingHistoryEvent": {
        "type": "integer",
        "description": "Represents the different events that trigger an\nentry into the schedule history.\n            \n\n0 = Unknown\n1 = ConvertedHistory\n2 = FlightTimeChange\n3 = FlightDesignatorChange\n4 = AssignedSeat\n5 = RemoveSeat\n6 = AddedFlight\n7 = DeletedFlight\n8 = DeletedPassenger\n9 = NameChange\n10 = GroupNameChange\n11 = CancelledTicketing\n12 = ScheduleChange\n13 = AddedPayment\n14 = ServiceFee\n15 = QueuedPnr\n16 = UnqueuedPnr\n17 = DeletedComment\n18 = Divided\n19 = CheckedIn\n20 = CheckedOut\n21 = FareOverride\n22 = AddedBaggage\n23 = ChangedBaggageWeight\n24 = CheckedBaggage\n25 = RemovedBaggage\n26 = BoardedPassenger\n27 = UnboardedPassenger\n28 = ManualAuthorization\n29 = ManualDecline\n30 = UndoCancel\n31 = ItinerarySent\n32 = ContactChange\n33 = SsrAdded\n34 = FlightMoved\n35 = VerifiedDocument\n36 = RemovedVerifiedDocument\n37 = Promotion\n38 = BookingComment\n39 = CancelledSchedule\n40 = CancelServiceFee\n41 = OverrideServiceFee\n42 = AddedRecordLocator\n43 = DeletedRecordLocator\n44 = UpgradeClassOfService\n45 = DowngradeClassOfService\n46 = StandbyPriorityChange\n47 = AssignedTicketNumber\n48 = DeletedTicketNumber\n49 = ConfirmSegmentStatusCodeChange\n50 = CodeshareFlightChanged\n51 = PdsCancel\n52 = PdsPending\n53 = PdsConfirm\n54 = PdsFinalized\n55 = PdsDeclined\n56 = PdsException\n57 = PdsCancelRefused\n58 = PdsCancelUnsuccessful\n59 = Apps\n60 = InhibitedOverride\n61 = PrintedBagTag\n62 = SelfPrintedBagTag\n63 = PrintedBoardingPass\n64 = AddCustomerId\n65 = DeleteCustomerId\n66 = HoldCreated\n67 = HoldRemoved\n68 = HoldChanged\n69 = OverrideCoupon\n70 = PdsSynchronized\n71 = PdsItemremoved\n72 = Reprice\n73 = ChannelOverride\n74 = EmdCreated\n75 = EmdRemoved\n76 = EmdChanged\n77 = ServiceBundle\n78 = PublishedFareOverride\n79 = FareClassRealignment",
        "x-enumNames": [
          "Unknown",
          "ConvertedHistory",
          "FlightTimeChange",
          "FlightDesignatorChange",
          "AssignedSeat",
          "RemoveSeat",
          "AddedFlight",
          "DeletedFlight",
          "DeletedPassenger",
          "NameChange",
          "GroupNameChange",
          "CancelledTicketing",
          "ScheduleChange",
          "AddedPayment",
          "ServiceFee",
          "QueuedPnr",
          "UnqueuedPnr",
          "DeletedComment",
          "Divided",
          "CheckedIn",
          "CheckedOut",
          "FareOverride",
          "AddedBaggage",
          "ChangedBaggageWeight",
          "CheckedBaggage",
          "RemovedBaggage",
          "BoardedPassenger",
          "UnboardedPassenger",
          "ManualAuthorization",
          "ManualDecline",
          "UndoCancel",
          "ItinerarySent",
          "ContactChange",
          "SsrAdded",
          "FlightMoved",
          "VerifiedDocument",
          "RemovedVerifiedDocument",
          "Promotion",
          "BookingComment",
          "CancelledSchedule",
          "CancelServiceFee",
          "OverrideServiceFee",
          "AddedRecordLocator",
          "DeletedRecordLocator",
          "UpgradeClassOfService",
          "DowngradeClassOfService",
          "StandbyPriorityChange",
          "AssignedTicketNumber",
          "DeletedTicketNumber",
          "ConfirmSegmentStatusCodeChange",
          "CodeshareFlightChanged",
          "PdsCancel",
          "PdsPending",
          "PdsConfirm",
          "PdsFinalized",
          "PdsDeclined",
          "PdsException",
          "PdsCancelRefused",
          "PdsCancelUnsuccessful",
          "Apps",
          "InhibitedOverride",
          "PrintedBagTag",
          "SelfPrintedBagTag",
          "PrintedBoardingPass",
          "AddCustomerId",
          "DeleteCustomerId",
          "HoldCreated",
          "HoldRemoved",
          "HoldChanged",
          "OverrideCoupon",
          "PdsSynchronized",
          "PdsItemremoved",
          "Reprice",
          "ChannelOverride",
          "EmdCreated",
          "EmdRemoved",
          "EmdChanged",
          "ServiceBundle",
          "PublishedFareOverride",
          "FareClassRealignment"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79
        ]
      },
      "Payment": {
        "type": "object",
        "description": "Defines an applied payment on the booking.\n            ",
        "additionalProperties": false,
        "properties": {
          "paymentKey": {
            "type": "string",
            "description": "The payment key that uniquely identifies the payment.\n            ",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The payment method code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "approvalDate": {
            "type": "string",
            "description": "Date when the card/payment is approved in the database.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "details": {
            "description": "The payment detail information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "amounts": {
            "description": "The payment amounts and currency codes.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentAmounts"
          },
          "authorizationCode": {
            "type": "string",
            "description": "The banks auth code when funds are released.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "authorizationStatus": {
            "description": "The real payment status that should never be exposed to the end user unless a agent.\n            ",
            "$ref": "#/components/schemas/AuthorizationStatus"
          },
          "fundedDate": {
            "type": "string",
            "description": "The date restriction for a payment (when funds will be there).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "transactionCode": {
            "type": "string",
            "description": "Used for credit shell payments and how to compute the expiration of the credit.\n            ",
            "nullable": true
          },
          "dcc": {
            "description": "DCC payment details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DirectCurrencyConversion"
          },
          "threeDSecure": {
            "description": "3DS payment details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ThreeDSecure"
          },
          "attachments": {
            "type": "array",
            "description": "The list of payment attachments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentAttachment"
            }
          },
          "createdDate": {
            "type": "string",
            "description": "The date the payment was created on.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the payment was modified.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "The payment method type.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "status": {
            "description": "The status of the booking (this is the safe status).\n            ",
            "$ref": "#/components/schemas/BookingPaymentStatus"
          },
          "transferred": {
            "type": "boolean",
            "description": "Flag that indicates if the payment is a result of a divide.\n            "
          },
          "channelType": {
            "description": "The channel type that the payment was made through.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "pointOfSale": {
            "description": "The payments point of sale information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The payments source point of sale information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "deposit": {
            "type": "boolean",
            "description": "Flag indicating if the payment is a deposit.\n            "
          },
          "accountId": {
            "type": "integer",
            "description": "Used to identify a credit shell, credit file and agency payments.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "voucher": {
            "description": "The applied voucher details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentVoucherDetails"
          },
          "addedToState": {
            "type": "boolean",
            "description": "Flag indicating if the payment has been added to state or not.\n            "
          },
          "createdAgentId": {
            "type": "integer",
            "description": "The created agents ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "modifiedAgentId": {
            "type": "integer",
            "description": "The modified agents ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "reference": {
            "type": "integer",
            "description": "The reference to the payment.\n            ",
            "format": "int64"
          }
        }
      },
      "PaymentDetails": {
        "type": "object",
        "description": "Defines the payment details.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountNumberId": {
            "type": "integer",
            "description": "The reference of an encrypted account number.\n            ",
            "format": "int64"
          },
          "parentPaymentId": {
            "type": "integer",
            "description": "ID of the parent of refunds or divide. Null if none exists.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0,
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "description": "The account holder name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number.\n            ",
            "maxLength": 34,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "The payment added text.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The number of installments to be applied.\n            ",
            "maximum": 999.0,
            "minimum": 0.0
          },
          "binRange": {
            "type": "integer",
            "description": "The first 6 digits of the credit card number.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "fields": {
            "type": "object",
            "description": "The collection of payment fields.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PaymentAmounts": {
        "type": "object",
        "description": "Defines the different applied payment amounts for a single payment.\n            ",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount in the booking currency (based off the origin).\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The payment amount currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collected": {
            "type": "number",
            "description": "The collected amount post DCC or MCC.\n            ",
            "format": "decimal"
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The collected amounts currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "quoted": {
            "type": "number",
            "description": "The pre DCC or MCC amount (maybe different than the booking).\n            ",
            "format": "decimal"
          },
          "quotedCurrencyCode": {
            "type": "string",
            "description": "The quoted currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AuthorizationStatus": {
        "type": "integer",
        "description": "Defines the different possible payment authorization states.\n            \n\n0 = Unknown\n1 = Acknowledged\n2 = Pending\n3 = InProcess\n4 = Approved\n5 = Declined\n6 = Referral\n7 = PickUpCard\n8 = HotCard\n9 = Voided\n10 = Retrieval\n11 = ChargedBack\n12 = Error\n13 = ValidationFailed\n14 = Address\n15 = VerificationCode\n16 = FraudPrevention\n17 = ForcedApproval\n18 = ForcedDecline",
        "x-enumNames": [
          "Unknown",
          "Acknowledged",
          "Pending",
          "InProcess",
          "Approved",
          "Declined",
          "Referral",
          "PickUpCard",
          "HotCard",
          "Voided",
          "Retrieval",
          "ChargedBack",
          "Error",
          "ValidationFailed",
          "Address",
          "VerificationCode",
          "FraudPrevention",
          "ForcedApproval",
          "ForcedDecline"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18
        ]
      },
      "DirectCurrencyConversion": {
        "type": "object",
        "description": "Defines a direct currency conversion.\n            ",
        "additionalProperties": false,
        "properties": {
          "rateId": {
            "type": "string",
            "description": "The rate ID.\n            ",
            "format": "guid"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code converted to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "rateValue": {
            "type": "number",
            "description": "The conversion rate value.\n            ",
            "format": "decimal"
          },
          "amount": {
            "type": "number",
            "description": "The conversion rate amount.\n            ",
            "format": "decimal"
          },
          "putInState": {
            "type": "string",
            "description": "The put in state value.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The conversion status.\n            ",
            "$ref": "#/components/schemas/DirectCurrencyConversionStatus"
          },
          "applicable": {
            "type": "boolean",
            "description": "Flag indicating if DCC is applicable.\n            "
          }
        }
      },
      "DirectCurrencyConversionStatus": {
        "type": "integer",
        "description": "Enumeration that determines the status of a DCC authorization.\n            \n\n0 = DccNotOffered\n1 = DccOfferRejected\n2 = DccOfferAccepted\n3 = DccInitialValue\n4 = MccInUse",
        "x-enumNames": [
          "DccNotOffered",
          "DccOfferRejected",
          "DccOfferAccepted",
          "DccInitialValue",
          "MccInUse"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "ThreeDSecure": {
        "type": "object",
        "description": "Defines three D secure.\n            ",
        "additionalProperties": false,
        "properties": {
          "browserUserAgent": {
            "type": "string",
            "description": "The browser agent being used.\n            ",
            "nullable": true
          },
          "browserAccept": {
            "type": "string",
            "description": "The browser agent accept.\n            ",
            "nullable": true
          },
          "remoteIpAddress": {
            "type": "string",
            "description": "The remote IP address.\n            ",
            "nullable": true
          },
          "termUrl": {
            "type": "string",
            "description": "The return URL from the bank.\n            ",
            "nullable": true
          },
          "paReq": {
            "type": "string",
            "description": "The payload that will be sent to the bank site.\n            ",
            "nullable": true
          },
          "acsUrl": {
            "type": "string",
            "description": "The URL to redirect to for TDS (aka the bank).\n            ",
            "nullable": true
          },
          "paRes": {
            "type": "string",
            "description": "The response that comes back from the bank.\n            ",
            "nullable": true
          },
          "authResult": {
            "type": "string",
            "description": "The result of 3DS.\n            ",
            "nullable": true
          },
          "cavv": {
            "type": "string",
            "description": "The encrypted string of prof that 3DS was processed.\n            ",
            "nullable": true
          },
          "cavvAlgorithm": {
            "type": "string",
            "description": "The algorithm that created the Cavv.\n            ",
            "nullable": true
          },
          "eci": {
            "type": "string",
            "description": "The electronic commerce indicator (the level of 3DS).\n            ",
            "nullable": true
          },
          "xid": {
            "type": "string",
            "description": "The transaction ID specific to the 3DS 3rd party processing.\n            ",
            "nullable": true
          },
          "applicable": {
            "type": "boolean",
            "description": "Flag that indicates if more validation is needed.\n            "
          },
          "successful": {
            "type": "boolean",
            "description": "Flag indicating if 3DS was successful.\n            "
          }
        }
      },
      "PaymentAttachment": {
        "type": "object",
        "description": "Defines a payment attachment.\n            ",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The attachment ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "paymentId": {
            "type": "integer",
            "description": "The payment ID attached to.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "attachment": {
            "type": "string",
            "description": "The attachment data.\n            ",
            "format": "byte",
            "nullable": true
          }
        }
      },
      "PaymentMethodType": {
        "type": "integer",
        "description": "Defines the payment method types.\n            \n\n0 = ExternalAccount\n1 = PrePaid\n2 = AgencyAccount\n3 = CustomerAccount\n4 = Voucher\n5 = Loyalty",
        "x-enumNames": [
          "ExternalAccount",
          "PrePaid",
          "AgencyAccount",
          "CustomerAccount",
          "Voucher",
          "Loyalty"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "BookingPaymentStatus": {
        "type": "integer",
        "description": "Determines if the booking has been paid for our not.\n            \n\n0 = New\n1 = Received\n2 = Pending\n3 = Approved\n4 = Declined\n5 = Unknown\n6 = PendingCustomerAction",
        "x-enumNames": [
          "New",
          "Received",
          "Pending",
          "Approved",
          "Declined",
          "Unknown",
          "PendingCustomerAction"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "PaymentVoucherDetails": {
        "type": "object",
        "description": "Payment voucher details. This describes a voucher applied to a payment.\n            ",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The voucher ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "transactionId": {
            "type": "integer",
            "description": "The vouchers transactions ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "overrideRestrictions": {
            "type": "boolean",
            "description": "Flag indicating if the voucher restrictions were overridden.\n            "
          },
          "overrideAmount": {
            "type": "boolean",
            "description": "The amount applied of the voucher.\n            "
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator attached to the voucher.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AddOn": {
        "type": "object",
        "description": "Defines a booking add on service details.\n            ",
        "additionalProperties": false,
        "properties": {
          "paymentRequired": {
            "type": "boolean",
            "description": "Returns true if the component requires a separate\npayment from the rest of the booking.\n            "
          },
          "status": {
            "description": "The status of the add on.\n            ",
            "$ref": "#/components/schemas/AddOnStatus"
          },
          "addOnKey": {
            "type": "string",
            "description": "The unique add on key.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The type of add on.\n            ",
            "$ref": "#/components/schemas/ProductTypeCode"
          },
          "summary": {
            "description": "The components order summary when the order is not available.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnOrderSummary"
          },
          "reference": {
            "type": "string",
            "description": "The component reference.\n            ",
            "nullable": true
          },
          "created": {
            "description": "The created by details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CreatedAddOnDetails"
          },
          "source": {
            "description": "The responsible source details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnDetails"
          },
          "declinedText": {
            "type": "string",
            "description": "The declined component text.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the component was last modified.\n            ",
            "format": "date-time"
          },
          "modifiedAgentReference": {
            "type": "string",
            "description": "The agent reference that modified the component.\n            ",
            "nullable": true
          },
          "order": {
            "description": "The component order details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Order"
          },
          "isHistorical": {
            "type": "boolean",
            "description": "Flag indicating if the component is historical.\n            "
          },
          "charges": {
            "type": "array",
            "description": "The collection of booking component charges.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AddOnCharge"
            }
          }
        }
      },
      "AddOnStatus": {
        "type": "integer",
        "description": "An enumeration to indicate the add on's current status.\n            \n\n0 = Unknown\n1 = Active\n2 = Pending\n3 = Confirming\n4 = CancelPending\n5 = Cancelled",
        "x-enumNames": [
          "Unknown",
          "Active",
          "Pending",
          "Confirming",
          "CancelPending",
          "Cancelled"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "AddOnOrderSummary": {
        "type": "object",
        "description": "Defines the details about an order if the order is not available.\n            ",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total price of the order.\n            ",
            "format": "decimal"
          },
          "held": {
            "type": "number",
            "description": "The total held amount of the order.\n            ",
            "format": "decimal"
          },
          "charged": {
            "type": "number",
            "description": "The total charged amount of the order.\n            ",
            "format": "decimal"
          },
          "supplierCode": {
            "type": "string",
            "description": "The order's supplier code.\n            ",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The order's begin date.\n            ",
            "format": "date-time"
          },
          "beginLocation": {
            "type": "string",
            "description": "The order's begin location code.\n            ",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The order's end date.\n            ",
            "format": "date-time"
          },
          "endLocation": {
            "type": "string",
            "description": "The order's end location code.\n            ",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "The order's supplier external reference (record locator).\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The order's description.\n            ",
            "nullable": true
          },
          "externalConfirmationNumber": {
            "type": "string",
            "description": "The order's supplier external confirmation number.\n            ",
            "nullable": true
          }
        }
      },
      "CreatedAddOnDetails": {
        "type": "object",
        "description": "Defines a component details.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The created agent code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The created organization code.\n            ",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The created domain code.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The created location code.\n            ",
            "nullable": true
          },
          "agentReference": {
            "type": "string",
            "description": "The agent key.\n            ",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date created.\n            ",
            "format": "date-time"
          }
        }
      },
      "AddOnDetails": {
        "type": "object",
        "description": "Defines a booking add on base details.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The created agent code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The created organization code.\n            ",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The created domain code.\n            ",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The created location code.\n            ",
            "nullable": true
          }
        }
      },
      "Order": {
        "type": "object",
        "description": "Defines a order.\n            ",
        "additionalProperties": false,
        "properties": {
          "orderKey": {
            "type": "string",
            "description": "The unique order key.\n            ",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Flag indicating if the order is active.\n            "
          },
          "criteria": {
            "description": "The specific order criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderCriteria"
          },
          "thumbnailFileName": {
            "type": "string",
            "description": "The thumbnail file name.\n            ",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity.\n            ",
            "format": "int32"
          },
          "usageDate": {
            "type": "string",
            "description": "The usage date for this order.\n            ",
            "format": "date-time"
          },
          "externalLocator": {
            "type": "string",
            "description": "The third party external locator.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The orders description.\n            ",
            "nullable": true
          },
          "descriptionFormatType": {
            "type": "string",
            "description": "The order descriptions format type.\n            ",
            "nullable": true
          },
          "productDescription": {
            "type": "string",
            "description": "The products description.\n            ",
            "nullable": true
          },
          "productVariationDescription": {
            "type": "string",
            "description": "The products variations description.\n            ",
            "nullable": true
          },
          "paymentAction": {
            "description": "The payment action.\n            ",
            "$ref": "#/components/schemas/PaymentAction"
          },
          "amounts": {
            "description": "The pricing breakdown.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderPriceBreakdown"
          },
          "terms": {
            "type": "array",
            "description": "The collection of terms and conditions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Term"
            }
          },
          "cancellationTerms": {
            "type": "array",
            "description": "The collection of cancellation terms and conditions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Term"
            }
          },
          "details": {
            "type": "array",
            "description": "The collection of product variation details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductVariationDetail"
            }
          },
          "fees": {
            "type": "array",
            "description": "The collection of applied fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderFee"
            }
          },
          "notes": {
            "type": "array",
            "description": "The collection of notes about the order.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            }
          },
          "productVariationKey": {
            "type": "string",
            "description": "The unique product variation key.\n            ",
            "nullable": true
          },
          "productOrderKey": {
            "type": "string",
            "description": "The unique product order key.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The orders address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderAddress"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of available phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "locations": {
            "type": "array",
            "description": "The collection of order locations.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderLocation"
            }
          },
          "customer": {
            "description": "The oder customer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderCustomer"
          },
          "participants": {
            "type": "object",
            "description": "The collection of order participants.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/OrderParticipant"
            }
          },
          "history": {
            "type": "array",
            "description": "The collection of order history entry history.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderHistory"
            }
          },
          "payment": {
            "description": "The applied payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrderPayment"
          },
          "parameters": {
            "type": "array",
            "description": "The collection of dynamic order input parameters.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InputedParameter"
            }
          }
        }
      },
      "OrderCustomer": {
        "type": "object",
        "description": "Defines an order customer contact details.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "address": {
            "description": "The address of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ConsumerAddress"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the consumer.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the consumer.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the consumer.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of consumer (business or residential).\n            ",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "description": "The work phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "The fax phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "customerKey": {
            "type": "string",
            "description": "The unique customer key.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "nullable": true
          }
        }
      },
      "OrderParticipant": {
        "type": "object",
        "description": "Defines a orders participant.\n            ",
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
            "description": "The participant description.\n            ",
            "nullable": true
          },
          "participantTypeCode": {
            "type": "string",
            "description": "The participant type code.\n            ",
            "nullable": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Flag indicating if the participant is the primary.\n            "
          },
          "document": {
            "description": "The participant document.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ParticipantDocument"
          },
          "name": {
            "description": "The name of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "address": {
            "description": "The address of the consumer.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ConsumerAddress"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the consumer.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the consumer.\n            ",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "The company name of the consumer.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of consumer (business or residential).\n            ",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "description": "The home phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "workPhone": {
            "type": "string",
            "description": "The work phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "The fax phone number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "participantKey": {
            "type": "string",
            "description": "The unique participant key.\n            ",
            "nullable": true
          }
        }
      },
      "OrderHistory": {
        "type": "object",
        "description": "Defines a order history transaction.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The status code.\n            ",
            "nullable": true
          },
          "previousCode": {
            "type": "string",
            "description": "The previous status code.\n            ",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The history note.\n            ",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The history entry created date.\n            ",
            "format": "date-time"
          },
          "hasError": {
            "type": "boolean",
            "description": "Flag indicating if has an error.\n            "
          }
        }
      },
      "OrderPayment": {
        "type": "object",
        "description": "Defines a payment on an order.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "number"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment type.\n            ",
            "minLength": 1
          },
          "name": {
            "description": "The name on the payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "number": {
            "type": "string",
            "description": "The number on the payment.\n            ",
            "minLength": 1
          },
          "expiration": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "cvv": {
            "type": "string",
            "description": "The CVV on the payment.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The applied payment amount.\n            ",
            "format": "decimal"
          },
          "description": {
            "type": "string",
            "description": "The payment description.\n            ",
            "nullable": true
          },
          "issueNumber": {
            "type": "string",
            "description": "The payment issue number.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The payments address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "emailAddress": {
            "type": "string",
            "description": "The provided email address.\n            ",
            "format": "email",
            "nullable": true
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "paymentKey": {
            "type": "string",
            "description": "The unique order payment key.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code the payment is in (will always be set to the bookings currency code).\n            ",
            "nullable": true
          }
        }
      },
      "InputedParameter": {
        "type": "object",
        "description": "Defines a parameter with data input.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code for a supplier parameter.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The parameters value.\n            ",
            "nullable": true
          }
        }
      },
      "AddOnCharge": {
        "type": "object",
        "description": "Defines a booking add ons charge.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The charge type.\n            ",
            "$ref": "#/components/schemas/ChargeType"
          },
          "code": {
            "type": "string",
            "description": "The charge code.\n            ",
            "nullable": true
          },
          "ticketCode": {
            "type": "string",
            "description": "The charge ticket code.\n            ",
            "nullable": true
          },
          "collection": {
            "description": "The charge collection type.\n            ",
            "$ref": "#/components/schemas/CollectType"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The charged amount.\n            ",
            "format": "decimal"
          },
          "details": {
            "type": "string",
            "description": "The charge details.\n            ",
            "nullable": true
          }
        }
      },
      "BookingOrder": {
        "type": "object",
        "description": "Represents a booking order.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingOrderKey": {
            "type": "string",
            "description": "The unique identifier.\n            ",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "The unique identifier related to a travel commerce order.\nFor use with TC API.\n            ",
            "format": "guid"
          },
          "collect": {
            "type": "number",
            "description": "Total amount of the order that is to be collected directly by NewSkies.\n            ",
            "format": "decimal"
          },
          "thirdPartyCharge": {
            "type": "number",
            "description": "Total amount of the order that will be charged immediately by a third party.\nFor example, the amount that is charged when an add-on is booked.\n            ",
            "format": "decimal"
          },
          "thirdPartyHold": {
            "type": "number",
            "description": "Total amount of the order that will be charged at the time of the service by a third party.\nFor example, the amount that is charged when a car is picked up.\n            ",
            "format": "decimal"
          },
          "total": {
            "type": "number",
            "description": "Total face value of the order, including non-chargeable amounts.\n            ",
            "format": "decimal"
          },
          "status": {
            "description": "The overall status of the order from a NewSkies perspective, indicating\ninformation such as if the order has been finalized in Travel Commerce.\n            ",
            "$ref": "#/components/schemas/BookingOrderStatus"
          }
        }
      },
      "BookingOrderStatus": {
        "type": "integer",
        "description": "Booking Order Status Enumeration\n            \n\n0 = None\n1 = FinalizedProcess",
        "x-enumNames": [
          "None",
          "FinalizedProcess"
        ],
        "enum": [
          0,
          1
        ]
      },
      "BookingQueueDeleteByKeyRequest": {
        "type": "object",
        "description": "The booking queue delete by queue key request.\n            ",
        "additionalProperties": false,
        "required": [
          "authorizedBy",
          "notes"
        ],
        "properties": {
          "authorizedBy": {
            "type": "string",
            "description": "The authorizing agent.\n            ",
            "minLength": 1
          },
          "notes": {
            "type": "string",
            "description": "The notes for the booking request.\n            ",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password needed to access the queue.\nRequired if queue is set to password-protected in Sky Manager.\n            ",
            "nullable": true
          }
        }
      },
      "BookingQueueRequest": {
        "type": "object",
        "description": "The booking request base model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.2 - Please use BookingQueueRequestv2 instead.",
        "additionalProperties": false,
        "required": [
          "queueCode"
        ],
        "properties": {
          "subQueueCode": {
            "type": "string",
            "description": "The optional sub queue code.\n            ",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Begin priority date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End priority date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The Password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "nullable": true
          },
          "queueCode": {
            "type": "string",
            "description": "The code for the booking queue.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "authorizedBy": {
            "type": "string",
            "description": "The authorizing agent.\n            ",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The notes for the booking request.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfBookingSearchResult": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingSearchResult"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingSearchResult": {
        "type": "object",
        "description": "Booking model data.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingKey": {
            "type": "string",
            "description": "The booking key.\n            ",
            "nullable": true
          },
          "allowedToModifyGdsBooking": {
            "type": "boolean",
            "description": "Indicates whether it is allowed to modify GDS booking.\n            "
          },
          "bookingStatus": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "channelType": {
            "description": "The type of the channel.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "editable": {
            "type": "boolean",
            "description": "Indicates whether this is editable.\n            "
          },
          "expiredDate": {
            "type": "string",
            "description": "The expired date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "flightDate": {
            "type": "string",
            "description": "Flight date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "The flight number.\n            ",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "Origin.\n            ",
            "nullable": true
          },
          "passengerId": {
            "type": "integer",
            "description": "The passenger id.\n            ",
            "format": "int64",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "sourceAgentCode": {
            "type": "string",
            "description": "The source agent code.\n            ",
            "nullable": true
          },
          "sourceDomainCode": {
            "type": "string",
            "description": "The source domain code.\n            ",
            "nullable": true
          },
          "sourceOrganizationCode": {
            "type": "string",
            "description": "The source organization code.\n            ",
            "nullable": true
          },
          "systemCode": {
            "type": "string",
            "description": "The system code.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "Destination.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The name on the booking.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "AddUnitStatelessConfig": {
        "type": "object",
        "description": "Unit sell config defines the different configurations when selling stateless units.\n            ",
        "additionalProperties": false,
        "properties": {
          "ignoreSeatSsrs": {
            "type": "boolean",
            "description": "Flag indicating whether to ignore seat SSR's.\n            ",
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Optional Currency code if different than booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "inventoryControl": {
            "description": "Indicates the type of hold placed on a unit.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UnitInventoryControlType"
          }
        }
      },
      "UnitInventoryControlType": {
        "type": "integer",
        "description": "Enum indicates the type of hold placed on the seat.\n            \n\n0 = Session\n1 = None",
        "x-enumNames": [
          "Session",
          "None"
        ],
        "enum": [
          0,
          1
        ]
      },
      "DeleteUnitStatelessConfig": {
        "type": "object",
        "description": "Unit delete config defines the different configurations when removing stateless units.\n            ",
        "additionalProperties": false,
        "properties": {
          "ignoreSeatSsrs": {
            "type": "boolean",
            "description": "Flag indicating whether to ignore seat SSR's.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndIListOfBaggageAllowance": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BaggageAllowance"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BaggageAllowance": {
        "type": "object",
        "description": "Defines a baggage allowance.\n            ",
        "additionalProperties": false,
        "properties": {
          "baggageAllowanceKey": {
            "type": "string",
            "description": "The unique identifier for the baggage allowance.\n            ",
            "nullable": true
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key.\n            ",
            "nullable": true
          },
          "segmentKeys": {
            "type": "array",
            "description": "The list of flight segment keys.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "nullable": true
          },
          "behavior": {
            "description": "The allowance behavior.\n            ",
            "$ref": "#/components/schemas/BaggageAllowanceBehavior"
          },
          "typeCodes": {
            "type": "array",
            "description": "The list of baggage type codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "maximumPieces": {
            "type": "integer",
            "description": "The maximum number of pieces.\n            ",
            "nullable": true
          },
          "maximumWeightPerPiece": {
            "type": "number",
            "description": "The maximum weight allowed per piece.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "totalWeight": {
            "type": "number",
            "description": "The total weight for all pieces.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "weightType": {
            "description": "The weight type for MaximumWeightPerPiece and TotalWeight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightType"
          },
          "baggageUsage": {
            "description": "The associated baggage usage details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageUsageDetails"
          }
        }
      },
      "BaggageAllowanceBehavior": {
        "type": "integer",
        "description": "Baggage allowance behavior enumeration.\n            \n\n0 = Default\n1 = WeightSharing\n2 = PerPiece\n3 = PerPieceWithWeightSharing\n4 = NotAvailable",
        "x-enumNames": [
          "Default",
          "WeightSharing",
          "PerPiece",
          "PerPieceWithWeightSharing",
          "NotAvailable"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "BaggageUsageDetails": {
        "type": "object",
        "description": "Defines baggage usage details.\n            ",
        "additionalProperties": false,
        "properties": {
          "baggageAllowanceKey": {
            "type": "string",
            "description": "The baggage allowance key.\n            ",
            "nullable": true
          },
          "remainingPieces": {
            "type": "integer",
            "description": "The remaining pieces.\n            ",
            "nullable": true
          },
          "remainingWeight": {
            "type": "number",
            "description": "The remaining total weight.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "weightType": {
            "description": "The weight type for RemainingTotalWeight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "IJsonResponseOfExternalBaggageAllowanceResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalBaggageAllowanceResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ExternalBaggageAllowanceResponse": {
        "type": "object",
        "description": "External baggage allowance information response.\n            ",
        "additionalProperties": false,
        "properties": {
          "baggageAllowanceInformation": {
            "type": "object",
            "description": "External baggage allowance information items.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceInfo"
            }
          },
          "disclaimer": {
            "type": "string",
            "description": "Disclaimer text.\n            ",
            "nullable": true
          }
        }
      },
      "ExternalBaggageAllowanceInfo": {
        "type": "object",
        "description": "Information item used in a external baggage allowance information response.\n            ",
        "additionalProperties": false,
        "properties": {
          "checkedBaggageAllowances": {
            "type": "array",
            "description": "Allowances for checked baggage.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceCheckedDetail"
            }
          },
          "carryOnBaggageAllowances": {
            "type": "array",
            "description": "Allowances for carry-on baggage.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceCarryOnDetail"
            }
          }
        }
      },
      "ExternalBaggageAllowanceCheckedDetail": {
        "type": "object",
        "description": "External baggage allowance information details for checked baggage.\n            ",
        "additionalProperties": false,
        "properties": {
          "mostSignificantCarrier": {
            "type": "string",
            "description": "The carrier whose baggage allowance rules were used for assessment.\n            ",
            "nullable": true
          },
          "usDotDisclosure": {
            "type": "string",
            "description": "U.S. DOT disclosure text.\n            ",
            "nullable": true
          },
          "freeAllowance": {
            "type": "string",
            "description": "Short-hand description for free baggage that is allowed.\n            ",
            "nullable": true
          },
          "passengerReference": {
            "type": "string",
            "description": "Passenger being referred for this baggage allowance detail.\nSets to \"EACH\" if this baggage allowance information matches all passengers\nfor the specified origin and destination.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The key of the passenger referred in the current state booking.\n            ",
            "nullable": true
          },
          "bagTravel": {
            "type": "string",
            "description": "The origin and destination traveled by checked or carry-on baggage.\n            ",
            "nullable": true
          },
          "charges": {
            "type": "array",
            "description": "Baggage charge details listed for each checked bag.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceCheckedCharge"
            }
          }
        }
      },
      "ExternalBaggageAllowanceCheckedCharge": {
        "type": "object",
        "description": "Charge details under each external baggage allowance information item.\n            ",
        "additionalProperties": false,
        "properties": {
          "chargeDetail": {
            "type": "string",
            "description": "Baggage allowance charge details.\n            ",
            "nullable": true
          },
          "baggageWeight": {
            "description": "Baggage weight referred to by this charge detail in the request.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalBaggageAllowanceWeight"
          }
        }
      },
      "ExternalBaggageAllowanceWeight": {
        "type": "object",
        "description": "Weight item for requesting external baggage allowance information.\n            ",
        "additionalProperties": false,
        "properties": {
          "weight": {
            "type": "integer",
            "description": "Weight value.\n            ",
            "format": "int32"
          },
          "type": {
            "description": "Weight type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "ExternalBaggageAllowanceCarryOnDetail": {
        "type": "object",
        "description": "External baggage allowance information details for carry-on baggage.\n            ",
        "additionalProperties": false,
        "properties": {
          "mostSignificantCarrier": {
            "type": "string",
            "description": "The carrier whose baggage allowance rules were used for assessment.\n            ",
            "nullable": true
          },
          "usDotDisclosure": {
            "type": "string",
            "description": "U.S. DOT disclosure text.\n            ",
            "nullable": true
          },
          "freeAllowance": {
            "type": "string",
            "description": "Short-hand description for free baggage that is allowed.\n            ",
            "nullable": true
          },
          "passengerReference": {
            "type": "string",
            "description": "Passenger being referred for this baggage allowance detail.\nSets to \"EACH\" if this baggage allowance information matches all passengers\nfor the specified origin and destination.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The key of the passenger referred in the current state booking.\n            ",
            "nullable": true
          },
          "bagTravel": {
            "type": "string",
            "description": "The origin and destination traveled by checked or carry-on baggage.\n            ",
            "nullable": true
          },
          "charges": {
            "type": "array",
            "description": "Baggage charge details listed for each carry-on bag.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceCarryOnCharge"
            }
          }
        }
      },
      "ExternalBaggageAllowanceCarryOnCharge": {
        "type": "object",
        "description": "Charge details under each external baggage allowance information item for carry-on baggage.\n            ",
        "additionalProperties": false,
        "properties": {
          "chargeDetail": {
            "type": "string",
            "description": "Baggage allowance charge details.\n            ",
            "nullable": true
          }
        }
      },
      "ExternalBaggageAllowanceRequest": {
        "type": "object",
        "description": "External baggage allowance information request.\n            ",
        "additionalProperties": false,
        "required": [
          "baggageWeights"
        ],
        "properties": {
          "baggageWeights": {
            "type": "array",
            "description": "The list of weight items that represent baggage that will be used for baggage allowance evaluation.\n            ",
            "items": {
              "$ref": "#/components/schemas/ExternalBaggageAllowanceWeight"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCheckinPassengerLiftStatus": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckinPassengerLiftStatus"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CheckinPassengerLiftStatus": {
        "type": "object",
        "description": "Defines a single passengers checkin status for a specific segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The lift status of the passenger for a specific segment.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndIListOfCheckinPassengerLiftStatus": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CheckinPassengerLiftStatus"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfCheckinRequirements": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CheckinRequirements"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CheckinRequirements": {
        "type": "object",
        "description": "Defines the pre checkin requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Flag indicating if the ability to checkin is valid.\n            "
          },
          "passengers": {
            "type": "object",
            "description": "The collection of passengers and there requirements to checkin.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/CheckinPassengerRequirements"
            }
          },
          "governmentProgramRequirements": {
            "type": "object",
            "description": "The collection of government programs requirements.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/GovernmentProgramRequirements"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "The list of any non passenger related checkin restrictions that will restrict the desired segments to be checked\nin.\nThe checkin restriction type = ('Closed', 'NotOpened', 'PnrLocked', 'MarketingCodeShareNotAllowed',\n'NotPaidInFull', 'PaymentsPending',\n'PaymentsPendingCustomerAction', 'RestrictedOnAnotherSystem', 'NotAllowed', 'ApisNotAllowed', 'AppsNotAllowed',\n'SegmentNotFound', 'InvalidPrice').\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckinRestrictionType"
            }
          }
        }
      },
      "CheckinPassengerRequirements": {
        "type": "object",
        "description": "Defines an individual passengers checkin requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Flag indicating if the specific passenger checkin is valid.\n            "
          },
          "passengerKey": {
            "type": "string",
            "description": "The associated passenger key.\n            ",
            "nullable": true
          },
          "documentRequirements": {
            "description": "The passengers document requirements.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CheckinDocumentRequirements"
          },
          "addressRequirements": {
            "description": "The passengers address requirements.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CheckinAddressRequirements"
          },
          "invalidSsrs": {
            "type": "array",
            "description": "The collection of checkin restricted/invalid SSR's the passenger contains.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "requiredSsrs": {
            "type": "array",
            "description": "The collection of checkin required SSR's the passenger is missing for each segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckinMissingSegmentRequiredSsr"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "The list of passengers restrictions that will restrict passenger from checkin.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckinPassengerRestriction"
            }
          }
        }
      },
      "CheckinDocumentRequirements": {
        "type": "object",
        "description": "Defines a passenger checkin document requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Flag indicating if the checkin document requirements are all meet and ready/valid for checkin.\n            "
          },
          "documentsOnFile": {
            "type": "array",
            "description": "The collection of document type codes that already exist on the passenger.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "unhandledDocuments": {
            "type": "array",
            "description": "The collection of unhandled documents at each acting government entity.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GovernmentPassengerDocumentRequirement"
            }
          }
        }
      },
      "GovernmentPassengerDocumentRequirement": {
        "type": "object",
        "description": "Defines a specific government document requirements for a specific passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "governmentInstance": {
            "type": "string",
            "description": "Identifies which instance of government security is associated with these specific requirements.\n            ",
            "nullable": true
          },
          "numberOfMissingDocuments": {
            "type": "integer",
            "description": "The number of documents still missing.\n            "
          },
          "eligibleDocuments": {
            "type": "array",
            "description": "The collection of eligible documents that have not already been added by the passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GovernmentDocumentRequirement"
            }
          }
        }
      },
      "GovernmentDocumentRequirement": {
        "type": "object",
        "description": "Defines a certain document requirement regarding a specific government instance.\n            ",
        "additionalProperties": false,
        "properties": {
          "group": {
            "description": "The document group.\n            ",
            "$ref": "#/components/schemas/DocumentGroup"
          },
          "documentTypeCode": {
            "type": "string",
            "description": "The documents type code.\n            ",
            "nullable": true
          }
        }
      },
      "DocumentGroup": {
        "type": "integer",
        "description": "The document grouping enumeration.\n            \n\n0 = Unknown\n1 = AlienRegistrationCard\n2 = PermanentResidentCard\n3 = FacilitationDocument\n4 = InsPass\n5 = MilitaryId\n6 = Passport\n7 = ReEntryPermit\n8 = CreditCard\n9 = TravelVisa\n10 = OaFrequentFlyer\n11 = ParoleLetter\n12 = NoticeOfAction\n13 = TransportationLetter\n14 = BorderCrossingCard\n15 = PilotLicense\n16 = UsNaturalizationCertificate\n17 = RefugeeTravelDocument\n18 = GovernmentId\n19 = DriversLicense\n20 = RedressNumber\n21 = KnownTravelerId\n22 = FormOfId\n23 = Nexus\n24 = SecondaryExempt",
        "x-enumNames": [
          "Unknown",
          "AlienRegistrationCard",
          "PermanentResidentCard",
          "FacilitationDocument",
          "InsPass",
          "MilitaryId",
          "Passport",
          "ReEntryPermit",
          "CreditCard",
          "TravelVisa",
          "OaFrequentFlyer",
          "ParoleLetter",
          "NoticeOfAction",
          "TransportationLetter",
          "BorderCrossingCard",
          "PilotLicense",
          "UsNaturalizationCertificate",
          "RefugeeTravelDocument",
          "GovernmentId",
          "DriversLicense",
          "RedressNumber",
          "KnownTravelerId",
          "FormOfId",
          "Nexus",
          "SecondaryExempt"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24
        ]
      },
      "CheckinAddressRequirements": {
        "type": "object",
        "description": "Defines a passenger checkin address requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Flag indicating if the checkin address requirements are meet and ready/valid for checkin.\n            "
          },
          "addressesOnFile": {
            "type": "array",
            "description": "The collection of addresses that are tagged to a station code that already exist on the passenger.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "unhandledAddresses": {
            "type": "array",
            "description": "The collection of unhandled tagged to station addresses required.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CheckinMissingSegmentRequiredSsr": {
        "type": "object",
        "description": "Defines the a segments collection of missing SSR's.\n            ",
        "additionalProperties": false,
        "properties": {
          "codes": {
            "type": "array",
            "description": "The collection of SSR's missing.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "designator": {
            "description": "The transportation designator that the SSR codes are missing from.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          }
        }
      },
      "CheckinPassengerRestriction": {
        "type": "object",
        "description": "Defines a passengers restriction for the current segment trying to be checked into.\n            ",
        "additionalProperties": false,
        "properties": {
          "restriction": {
            "description": "The passenger restriction type.\n            ",
            "$ref": "#/components/schemas/CheckinPassengerRestrictionType"
          },
          "description": {
            "type": "string",
            "description": "The description of the restriction.\n            ",
            "nullable": true
          }
        }
      },
      "CheckinPassengerRestrictionType": {
        "type": "integer",
        "description": "Defines the checkin passenger restriction types.\n            \n\n0 = NotFound\n1 = MissingDestinationAddress\n2 = MissingCountryOrResidence\n3 = OnLockQueue\n4 = MissingRequiredSsrs\n5 = ContainsRestrictedSsrs\n6 = IsSelectee\n7 = MissingSeat\n8 = NotConfirmed\n9 = NotStandby\n10 = ContainsUnknownSsr\n11 = MissingApisRequirement\n12 = MissingDocuments\n13 = MissingName\n14 = MissingInfantName\n15 = MissingDateOfBirth\n16 = MissingInfantDateOfBirth\n17 = RestrictedInfantInLap",
        "x-enumNames": [
          "NotFound",
          "MissingDestinationAddress",
          "MissingCountryOrResidence",
          "OnLockQueue",
          "MissingRequiredSsrs",
          "ContainsRestrictedSsrs",
          "IsSelectee",
          "MissingSeat",
          "NotConfirmed",
          "NotStandby",
          "ContainsUnknownSsr",
          "MissingApisRequirement",
          "MissingDocuments",
          "MissingName",
          "MissingInfantName",
          "MissingDateOfBirth",
          "MissingInfantDateOfBirth",
          "RestrictedInfantInLap"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17
        ]
      },
      "GovernmentProgramRequirements": {
        "type": "object",
        "description": "Defines a government programs document requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "governmentInstance": {
            "type": "string",
            "description": "Identifies which instance of government security is associated with these specific requirements.\n            ",
            "nullable": true
          },
          "requiredDocumentFields": {
            "type": "array",
            "description": "The collection of required document fields to be collected.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GovernmentDocumentFieldType"
            }
          },
          "additionalDataRequired": {
            "type": "array",
            "description": "The collection of additional data that is required that are not related to documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GovernmentAdditionalDataType"
            }
          }
        }
      },
      "GovernmentDocumentFieldType": {
        "type": "integer",
        "description": "Defines all the different travel document fields that a government program can require to be prompted/required.\n            \n\n0 = FirstName\n1 = MiddleName\n2 = LastName\n3 = Title\n4 = Suffix\n5 = DateOfBirth\n6 = BirthCountry\n7 = Gender\n8 = Nationality\n9 = Number\n10 = IssuingCountry\n11 = ExpirationDate\n12 = IssuedDate\n13 = Verified",
        "x-enumNames": [
          "FirstName",
          "MiddleName",
          "LastName",
          "Title",
          "Suffix",
          "DateOfBirth",
          "BirthCountry",
          "Gender",
          "Nationality",
          "Number",
          "IssuingCountry",
          "ExpirationDate",
          "IssuedDate",
          "Verified"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      "GovernmentAdditionalDataType": {
        "type": "integer",
        "description": "Defines the additional data that is required for a government program but are not collected with documents.\n            \n\n0 = CountryOfResidence\n1 = InTransitOrigin\n2 = InTransitDestination\n3 = DateOfBirth\n4 = Gender\n5 = FirstName\n6 = LastName",
        "x-enumNames": [
          "CountryOfResidence",
          "InTransitOrigin",
          "InTransitDestination",
          "DateOfBirth",
          "Gender",
          "FirstName",
          "LastName"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "CheckinRestrictionType": {
        "type": "integer",
        "description": "Defines the checkin level restriction types.\n            \n\n0 = Closed\n1 = NotOpened\n2 = PnrLocked\n3 = MarketingCodeShareNotAllowed\n4 = NotPaidInFull\n5 = PaymentsPending\n6 = PaymentsPendingCustomerAction\n7 = RestrictedOnAnotherSystem\n8 = NotAllowed\n9 = ApisNotAllowed\n10 = AppsNotAllowed\n11 = SegmentNotFound\n12 = InvalidPrice\n13 = MissingEMDCoupon",
        "x-enumNames": [
          "Closed",
          "NotOpened",
          "PnrLocked",
          "MarketingCodeShareNotAllowed",
          "NotPaidInFull",
          "PaymentsPending",
          "PaymentsPendingCustomerAction",
          "RestrictedOnAnotherSystem",
          "NotAllowed",
          "ApisNotAllowed",
          "AppsNotAllowed",
          "SegmentNotFound",
          "InvalidPrice",
          "MissingEMDCoupon"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      "CheckinPassengersRequest": {
        "type": "object",
        "description": "Defines the checkin passengers request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers"
        ],
        "properties": {
          "seatsRequired": {
            "type": "boolean",
            "description": "The flag indicating whether a seat is required for checkin.\n            ",
            "nullable": true
          },
          "skipSecurityChecks": {
            "type": "boolean",
            "description": "The flag indicating whether checkin requirement validation will be skipped.\n            ",
            "nullable": true
          },
          "isStandby": {
            "type": "boolean",
            "description": "The flag indicating whether the collection of passengers are for standby checkin.\n            ",
            "nullable": true
          },
          "passengers": {
            "type": "array",
            "description": "The collection of passengers to checkin.\n            ",
            "items": {
              "$ref": "#/components/schemas/CheckinPassengerRequest"
            }
          }
        }
      },
      "CheckinPassengerRequest": {
        "type": "object",
        "description": "Defines the individual passenger checkin request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerKey"
        ],
        "properties": {
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger key being checked in.\n            ",
            "minLength": 1
          },
          "transitType": {
            "description": "The passengers transit type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransitType"
          },
          "processApps": {
            "type": "boolean",
            "description": "Flag indicating to process APPS.\n            ",
            "nullable": true
          },
          "verifiedReference": {
            "type": "string",
            "description": "The value specifying the verified travel document(s) associated with this checkin.\n            ",
            "nullable": true
          }
        }
      },
      "TransitType": {
        "type": "integer",
        "description": "Defines the different type of transit states.\n            \n\n0 = Default\n1 = Origin\n2 = Destination\n3 = Both",
        "x-enumNames": [
          "Default",
          "Origin",
          "Destination",
          "Both"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfIListOfClassAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ClassAvailability"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ClassAvailability": {
        "type": "object",
        "description": "Defines a class of service availability for a segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "transportationIdentifier": {
            "description": "The identifier for the segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "departureTime": {
            "type": "string",
            "description": "The standard time of departure.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "The departure station.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "The arrival station.\n            ",
            "nullable": true
          },
          "classesOfService": {
            "type": "array",
            "description": "The list of available classes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ClassModify"
            }
          },
          "segmentKey": {
            "type": "string",
            "description": "The segment key this associates to.\n            ",
            "nullable": true
          }
        }
      },
      "ClassModify": {
        "type": "object",
        "description": "Defines the class modify information.\n            ",
        "additionalProperties": false,
        "properties": {
          "classModifyKey": {
            "type": "string",
            "description": "The class modify key.\n            ",
            "nullable": true
          },
          "originalClassOfService": {
            "type": "string",
            "description": "The current/original class of service.\n            ",
            "nullable": true
          },
          "newClassOfService": {
            "type": "string",
            "description": "The new/changed class of service.\n            ",
            "nullable": true
          },
          "available": {
            "type": "integer",
            "description": "The remaining downgrade count.\n            "
          },
          "fee": {
            "description": "The passenger fee details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerFee"
          }
        }
      },
      "FeePricingMode": {
        "type": "integer",
        "description": "The fee pricing mode enumeration.\n            \n\n0 = MonetaryOnly\n1 = PointsOnly",
        "x-enumNames": [
          "MonetaryOnly",
          "PointsOnly"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ClassModifyBaseRequest": {
        "type": "object",
        "description": "Defines the base class modify request.\n            ",
        "additionalProperties": false,
        "properties": {
          "inventoryControl": {
            "description": "The reserving inventory action of an upgrade or downgrade once sold by the system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryControlType"
          },
          "feePricingMode": {
            "description": "Fee pricing mode.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Collected currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feeOverride": {
            "type": "boolean",
            "description": "Fee override flag. Applicable role settings that allow waiving or overriding\nof upgrade/downgrade fees are required when this is enabled.\n            ",
            "nullable": true
          }
        }
      },
      "InventoryControlType": {
        "type": "integer",
        "description": "Defines the different ways inventory is held at the time of sell.\n            \n\n0 = HoldSpace\n1 = SoftHoldSpace\n2 = ClaimSpace\n3 = OversellSpace\n4 = StandBy",
        "x-enumNames": [
          "HoldSpace",
          "SoftHoldSpace",
          "ClaimSpace",
          "OversellSpace",
          "StandBy"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfIListOfBookingComment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingComment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingPointOfSaleEditRequest": {
        "type": "object",
        "description": "Model related to the booking point of sale edit request.  This is to be used for update operations only.\n            ",
        "additionalProperties": false,
        "required": [
          "agentCode",
          "organizationCode"
        ],
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The point of sale agent code.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "domainCode": {
            "type": "string",
            "description": "The point of sale domain code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The point of sale location code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The point of sale organization code.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "isoCountryCode": {
            "type": "string",
            "description": "Two character country code, optionally supplied in GDS message\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "sourceSystemCode": {
            "type": "string",
            "description": "Two character system code, optionally supplied in GDS message\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeltaMapperOfBookingPointOfSaleEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentCode": {
            "type": "string",
            "description": "The point of sale agent code.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "domainCode": {
            "type": "string",
            "description": "The point of sale domain code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The point of sale location code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The point of sale organization code.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "isoCountryCode": {
            "type": "string",
            "description": "Two character country code, optionally supplied in GDS message\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "sourceSystemCode": {
            "type": "string",
            "description": "Two character system code, optionally supplied in GDS message\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PromotionRequest": {
        "type": "object",
        "description": "Defines the simple request to apply a promotion code.\n            ",
        "additionalProperties": false,
        "required": [
          "promotionCode"
        ],
        "properties": {
          "promotionCode": {
            "type": "string",
            "description": "The promotion code to be applied.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "organizationCode": {
            "type": "string",
            "description": "The point of sale organization code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfRecordLocator": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RecordLocator"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfRecordLocator": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecordLocator"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "RecordLocatorCreateRequest": {
        "type": "object",
        "description": "The record locator create request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemDomainCode": {
            "type": "string",
            "description": "The system domain code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "bookingSystemCode": {
            "type": "string",
            "description": "The system code of where the booking was created.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "hostedCarrierCode": {
            "type": "string",
            "description": "The hosted carrier's code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "recordCode": {
            "type": "string",
            "description": "The system domain code.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "owningSystemCode": {
            "type": "string",
            "description": "The owning system code for the booking.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "RecordLocatorEditRequest": {
        "type": "object",
        "description": "The record locator edit request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemDomainCode": {
            "type": "string",
            "description": "The system domain code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "bookingSystemCode": {
            "type": "string",
            "description": "The system code of where the booking was created.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "hostedCarrierCode": {
            "type": "string",
            "description": "The hosted carrier's code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeltaMapperOfRecordLocatorEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemDomainCode": {
            "type": "string",
            "description": "The system domain code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "bookingSystemCode": {
            "type": "string",
            "description": "The system code of where the booking was created.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "hostedCarrierCode": {
            "type": "string",
            "description": "The hosted carrier's code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "OverrideChannelType": {
        "type": "integer",
        "description": "Defines the available channel types to override to.\n            \n\n0 = Direct\n1 = Web\n2 = Api\n3 = DigitalApi\n4 = DigitalWeb\n5 = Ndc",
        "x-enumNames": [
          "Direct",
          "Web",
          "Api",
          "DigitalApi",
          "DigitalWeb",
          "Ndc"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "IJsonResponseOfBookingValidationResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingValidationResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingValidationResponse": {
        "type": "object",
        "description": "Represents the booking validation response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "issueHeldSeatWarning": {
            "type": "boolean",
            "description": "Indicates that if a booking is committed, the seats might be lost based on the NewSkies configuration.\n            "
          },
          "bookingStatus": {
            "description": "The forecasted status that will be applied if the booking is committed.\nThis will be reflected in the info.status node during a get booking call.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          }
        }
      },
      "IJsonResponseOfIListOfSeatMapAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatMapAvailability"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SeatMapAvailability": {
        "type": "object",
        "description": "Defines the equipment availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "seatMap": {
            "description": "The seat map.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatMap"
          },
          "fees": {
            "type": "object",
            "description": "The collection passenger seat group fees to go along with the collection of seat maps.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSeatGroupInfo"
            }
          },
          "ssrLookup": {
            "type": "object",
            "description": "The list of SSR's available.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Ssr"
            }
          }
        }
      },
      "SeatMap": {
        "type": "object",
        "description": "Defines a single equipment type and all it's units.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the equipment.\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "The arrival station.\n            ",
            "nullable": true
          },
          "departureStation": {
            "type": "string",
            "description": "The departure station.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The marketing code on the inventory equipment.\n            ",
            "nullable": true
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment label.\n            ",
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment code/suffix.\n            ",
            "nullable": true
          },
          "category": {
            "description": "The categorization of the equipment.\n            ",
            "$ref": "#/components/schemas/EquipmentCategory"
          },
          "availableUnits": {
            "type": "integer",
            "description": "Number of available units on the inventory equipment.\n            ",
            "format": "int32"
          },
          "decks": {
            "type": "object",
            "description": "The collection of decks/levels for the equipment.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/DeckInformation"
            }
          },
          "seatmapReference": {
            "type": "string",
            "description": "The reference identifying what seatmap the leg is in associated to.\n            ",
            "nullable": true
          }
        }
      },
      "EquipmentCategory": {
        "type": "integer",
        "description": "Represents the category of the equipment used for reservation operations.\n            \n\n0 = None\n1 = JetAircraft\n2 = PistonAircraft\n3 = TurbopropAircraft\n4 = Helicopter\n5 = Surface\n6 = Train\n7 = Bus\n8 = AllCategories",
        "x-enumNames": [
          "None",
          "JetAircraft",
          "PistonAircraft",
          "TurbopropAircraft",
          "Helicopter",
          "Surface",
          "Train",
          "Bus",
          "AllCategories"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      "DeckInformation": {
        "type": "object",
        "description": "Defines a deck within an equipment.\n            ",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "integer",
            "description": "The deck number.\n            ",
            "format": "int32"
          },
          "compartments": {
            "type": "object",
            "description": "The collection of compartments within the deck.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/CompartmentInformation"
            }
          }
        }
      },
      "CompartmentInformation": {
        "type": "object",
        "description": "Defines a compartment within an equipment -> deck.\n            ",
        "additionalProperties": false,
        "properties": {
          "availableUnits": {
            "type": "integer",
            "description": "The number of available units in the compartment.\n            ",
            "format": "int32"
          },
          "designator": {
            "type": "string",
            "description": "The unique designator for the compartment.\n            ",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "description": "The length of the compartment.\n            ",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "The width of the compartment.\n            ",
            "format": "int32"
          },
          "sequence": {
            "type": "integer",
            "description": "The compartment's sequence number in the equipments deck.\n            "
          },
          "orientation": {
            "type": "integer",
            "description": "The facing orientation this compartment is in.\n            "
          },
          "units": {
            "type": "array",
            "description": "The list of units contained in the compartment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UnitInformation"
            }
          }
        }
      },
      "UnitInformation": {
        "type": "object",
        "description": "Defines a unit within an equipment -> decks -> compartment.\n            ",
        "additionalProperties": false,
        "properties": {
          "unitKey": {
            "type": "string",
            "description": "The key used to assign the unit to a passenger.\n            ",
            "nullable": true
          },
          "assignable": {
            "type": "boolean",
            "description": "Flag indicating if the unit is assignable (aka is a seat). If false this means that the unit is a fixture.\n            "
          },
          "availability": {
            "description": "The availability of the seat.\n            ",
            "$ref": "#/components/schemas/SeatAvailability"
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "Defines compartment designator of the compartment to which unit belongs to.\n            ",
            "nullable": true
          },
          "designator": {
            "type": "string",
            "description": "Defines unique designator for the unit within the compartment.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The type of the unit.\n            ",
            "$ref": "#/components/schemas/UnitType"
          },
          "travelClassCode": {
            "type": "string",
            "description": "The designated travel class code.\n            ",
            "nullable": true
          },
          "set": {
            "type": "integer",
            "description": "The designator of the group the unit belongs to.\n            ",
            "format": "int32"
          },
          "group": {
            "type": "integer",
            "description": "Indicates the logical group where this unit belongs. Also indicating the pricing value of this unit via seat fees.\n            "
          },
          "priority": {
            "type": "integer",
            "description": "Indicates the priority level of this unit, if this unit is among the best seats computed by the seat assignment\nalgorithm.\n            "
          },
          "text": {
            "type": "string",
            "description": "The text associated to a unit.\n            ",
            "nullable": true
          },
          "setVacancy": {
            "type": "integer",
            "description": "The number of available units in the group.\n            ",
            "format": "int32"
          },
          "angle": {
            "type": "integer",
            "description": "This angle of the unit in the grid.\n            "
          },
          "width": {
            "type": "integer",
            "description": "The grid width of the unit.\n            "
          },
          "height": {
            "type": "integer",
            "description": "The grid height of the unit.\n            "
          },
          "zone": {
            "type": "integer",
            "description": "Indicates the location of this unit, thereby controlling bookings and reservations on this unit based on customer\nrecognition levels and user role settings.\n            "
          },
          "x": {
            "type": "integer",
            "description": "The horizontal position of the unit in the grid.\n            "
          },
          "y": {
            "type": "integer",
            "description": "This vertical position of the unit in the grid.\n            "
          },
          "allowedSsrs": {
            "type": "array",
            "description": "The collection of allowed SSR's.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "array",
            "description": "The collection of properties for the specific unit.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatMapProperty"
            }
          }
        }
      },
      "SeatAvailability": {
        "type": "integer",
        "description": "Defines the type of hold placed on the seat (unit).\n            \n\n0 = Unknown\n1 = Reserved\n2 = Blocked\n3 = HeldForAnotherSession\n4 = HeldForThisSession\n5 = Open\n6 = Missing\n7 = CheckedIn\n8 = FleetBlocked\n9 = Restricted\n10 = Broken\n11 = ReservedForPnr\n12 = SoftBlocked\n13 = Unavailable",
        "x-enumNames": [
          "Unknown",
          "Reserved",
          "Blocked",
          "HeldForAnotherSession",
          "HeldForThisSession",
          "Open",
          "Missing",
          "CheckedIn",
          "FleetBlocked",
          "Restricted",
          "Broken",
          "ReservedForPnr",
          "SoftBlocked",
          "Unavailable"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      "UnitType": {
        "type": "integer",
        "description": "Defines the type of unit.\n            \n\n0 = None\n1 = NormalSeat\n2 = LargeSeat\n3 = Couchette\n4 = Compartment\n5 = Table\n6 = Wall\n7 = Window\n8 = Door\n9 = Stairs\n10 = Wing\n12 = Other\n13 = Bulkhead\n14 = BedOneOfThree\n15 = BedTwoOfThree\n16 = BedThreeOfThree\n17 = BedOneOfTwo\n18 = BedTwoOfTwo\n19 = Bed\n20 = Exit\n21 = LabelRuler\n22 = GenericUnitResizableArea\n23 = Lavatory\n24 = LavatoryWithHandicappedFacilities\n25 = Luggage\n26 = MovableCompartmentDivider\n27 = Bar\n28 = Closet\n29 = Galley\n30 = MovieScreen\n31 = Storage",
        "x-enumNames": [
          "None",
          "NormalSeat",
          "LargeSeat",
          "Couchette",
          "Compartment",
          "Table",
          "Wall",
          "Window",
          "Door",
          "Stairs",
          "Wing",
          "Other",
          "Bulkhead",
          "BedOneOfThree",
          "BedTwoOfThree",
          "BedThreeOfThree",
          "BedOneOfTwo",
          "BedTwoOfTwo",
          "Bed",
          "Exit",
          "LabelRuler",
          "GenericUnitResizableArea",
          "Lavatory",
          "LavatoryWithHandicappedFacilities",
          "Luggage",
          "MovableCompartmentDivider",
          "Bar",
          "Closet",
          "Galley",
          "MovieScreen",
          "Storage"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31
        ]
      },
      "SeatMapProperty": {
        "type": "object",
        "description": "Defines a property of a equipment unit.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The dynamic equipment property code.\n            ",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The dynamic equipment property value.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerSeatGroupInfo": {
        "type": "object",
        "description": "Defines the equipment seat group details for a specific passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerKey": {
            "type": "string",
            "description": "The associated passenger key.\n            ",
            "nullable": true
          },
          "groups": {
            "type": "object",
            "description": "The collection of seat group fees.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/SeatGroupInfo"
            }
          }
        }
      },
      "SeatGroupInfo": {
        "type": "object",
        "description": "Information about a equipment seat group.\n            ",
        "additionalProperties": false,
        "properties": {
          "group": {
            "type": "integer",
            "description": "The seat group number.\n            "
          },
          "fees": {
            "type": "array",
            "description": "The list of seat group fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          }
        }
      },
      "Ssr": {
        "type": "object",
        "description": "The sell service request (SSR) model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The Ssr code.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true
          },
          "feeCode": {
            "type": "string",
            "description": "The fee code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "ssrNestCode": {
            "type": "string",
            "description": "The Ssr nest code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace queue code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "ssrType": {
            "description": "The Ssr type.\n            ",
            "$ref": "#/components/schemas/SsrType"
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "unitValue": {
            "type": "integer",
            "description": "The unit value.\n            "
          },
          "limitPerPassenger": {
            "type": "integer",
            "description": "The limit per passenger.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "boardingZone": {
            "type": "integer",
            "description": "The boarding zone.\n            ",
            "maximum": 99.0,
            "minimum": 0.0
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          },
          "seatMapCode": {
            "type": "string",
            "description": "The seat map code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "seatRestriction": {
            "description": "The seat restriction.\n            ",
            "$ref": "#/components/schemas/SeatRestriction"
          },
          "ruleSetName": {
            "type": "string",
            "description": "The rule set name.\n            ",
            "nullable": true
          }
        }
      },
      "SsrType": {
        "type": "integer",
        "description": "SsrType enumeration.\n            \n\n0 = Standard\n1 = Infant\n2 = Meal\n3 = BaggageAllowance\n4 = TravelLineMeal",
        "x-enumNames": [
          "Standard",
          "Infant",
          "Meal",
          "BaggageAllowance",
          "TravelLineMeal"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "SeatRestriction": {
        "type": "integer",
        "description": "The seat restriction enumeration.\n            \n\n0 = Undefined\n1 = AlwaysAllowed\n2 = DefaultAllowed\n3 = DefaultRestricted",
        "x-enumNames": [
          "Undefined",
          "AlwaysAllowed",
          "DefaultAllowed",
          "DefaultRestricted"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfIDictionaryOfCharAndContact": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfContact": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Contact"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ContactRequest": {
        "type": "object",
        "description": "Defines a contact create request.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "address": {
            "description": "The contact address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the contact.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "Source organization.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "distributionOption": {
            "description": "The contact distribution option.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DistributionOption"
          },
          "notificationPreference": {
            "description": "The notification preference of the contact.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "companyName": {
            "type": "string",
            "description": "The company name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The contact's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of phone numbers.\nSupported types: Home, Work, Fax, Other.\nThis collections can only contain one number for each supported type.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "DeltaMapperOfContactBase": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "address": {
            "description": "The contact address.\n            ",
            "nullable": true,
            "properties": {
              "lineOne": {
                "type": "string",
                "description": "The address line one.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineTwo": {
                "type": "string",
                "description": "The address line two.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "lineThree": {
                "type": "string",
                "description": "The address line 3.\n            ",
                "maxLength": 128,
                "minLength": 0,
                "nullable": true
              },
              "countryCode": {
                "type": "string",
                "description": "The country code.\n            ",
                "maxLength": 2,
                "minLength": 0,
                "nullable": true
              },
              "provinceState": {
                "type": "string",
                "description": "The province state.\n            ",
                "maxLength": 3,
                "minLength": 0,
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "The city.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "postalCode": {
                "type": "string",
                "description": "The postal code.\n            ",
                "maxLength": 10,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the contact.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "Source organization.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "distributionOption": {
            "description": "The contact distribution option.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DistributionOption"
          },
          "notificationPreference": {
            "description": "The notification preference of the contact.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "companyName": {
            "type": "string",
            "description": "The company name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The contact's name.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          }
        }
      },
      "ContactBase": {
        "type": "object",
        "description": "Contact model describing a primary contact information.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "address": {
            "description": "The contact address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the contact.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "Source organization.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "distributionOption": {
            "description": "The contact distribution option.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DistributionOption"
          },
          "notificationPreference": {
            "description": "The notification preference of the contact.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "companyName": {
            "type": "string",
            "description": "The company name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The contact's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "IJsonResponseOfIListOfPhoneNumber": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPhoneNumber": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PhoneNumberBase": {
        "type": "object",
        "description": "Defines a common phone number base.\n            ",
        "additionalProperties": false,
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The phone number without any formatting characters.\n            ",
            "maxLength": 20,
            "minLength": 0
          }
        }
      },
      "IJsonResponseOfCurrencyConversion": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CurrencyConversion"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CurrencyConversion": {
        "type": "object",
        "description": "Model with the information needed to calculate from one currency to another.\n            ",
        "additionalProperties": false,
        "required": [
          "fromCurrencyCode",
          "toCurrencyCode",
          "amount",
          "convertedAmount",
          "exchangeRate"
        ],
        "properties": {
          "fromCurrencyCode": {
            "type": "string",
            "description": "The currency code that the amount is currently in.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "toCurrencyCode": {
            "type": "string",
            "description": "The currency code we want the amount converted to.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "amount": {
            "type": "number",
            "description": "The amount to be converted. This will be in the FromCurrencyCode currency.\n            ",
            "format": "decimal"
          },
          "convertedAmount": {
            "type": "number",
            "description": "The converted amount. This will be in the ToCurrencyCode currency.\n            ",
            "format": "decimal"
          },
          "exchangeRate": {
            "type": "number",
            "description": "Gets or sets the exchange rate for this external rate.\n            ",
            "format": "decimal"
          },
          "roundingFactor": {
            "type": "number",
            "description": "The default rounding factor of the currency conversion.\n            ",
            "format": "decimal"
          },
          "marketingRoundingFactor": {
            "type": "number",
            "description": "The marketing rounding factor of the currency conversion.\n            ",
            "format": "decimal"
          }
        }
      },
      "IJsonResponseOfBoolean": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "boolean",
            "description": "The payload data.\n            "
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfFareRule": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareRule"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FareRule": {
        "type": "object",
        "description": "Defines a fare rule and its data.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareSellKey": {
            "type": "string",
            "description": "The fare sell key that is in reference to the fare rule.\n            ",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The fare rule content.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfCategory50Response": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Category50Response"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Category50Response": {
        "type": "object",
        "description": "Represents a cat 50 response.\n            ",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the category 50 fare rule information.\n            ",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "The formatted text for the category 50 fare rule information..\n            ",
            "format": "byte",
            "nullable": true
          },
          "dataType": {
            "description": "The content data type of the text.\n            ",
            "$ref": "#/components/schemas/ContentDataType"
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ContentDataType": {
        "type": "integer",
        "description": "Defines the content data type enumeration.\n            \n\n0 = Default\n1 = Text\n2 = RichTextFormat\n3 = ImageJpg\n4 = ImageGif\n5 = ImageBmp\n6 = ImagePng\n7 = WordDoc\n8 = Html\n9 = Pdf\n10 = Uri\n11 = WordDocx\n-1 = Unmapped",
        "x-enumNames": [
          "Default",
          "Text",
          "RichTextFormat",
          "ImageJpg",
          "ImageGif",
          "ImageBmp",
          "ImagePng",
          "WordDoc",
          "Html",
          "Pdf",
          "Uri",
          "WordDocx",
          "Unmapped"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          -1
        ]
      },
      "Category50Request": {
        "type": "object",
        "description": "Represents a cat 50 request.\n            ",
        "additionalProperties": false,
        "required": [
          "fareAvailabilityKey",
          "passengerPriceTypes"
        ],
        "properties": {
          "fareAvailabilityKey": {
            "type": "string",
            "description": "The fare availability key.\n            ",
            "minLength": 1
          },
          "passengerPriceTypes": {
            "type": "array",
            "description": "The list of passenger types and the counts for each.\n            ",
            "items": {
              "$ref": "#/components/schemas/PassengerPriceType"
            }
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerPriceType": {
        "type": "object",
        "description": "Represents a cat 50 request.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The passenger type code assigned to this group of passengers.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerDiscountCode": {
            "type": "string",
            "description": "The passenger discount code assigned to this group of passengers.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerCount": {
            "type": "integer",
            "description": "The number of passengers in this group with the specified passenger type\nand discount code.\n            ",
            "format": "int32"
          }
        }
      },
      "IJsonResponseOfIListOfServiceCharge": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CommitPassengerFeeRequest": {
        "type": "object",
        "description": "Defines the request to retrieve a service fee.\n            ",
        "additionalProperties": false,
        "required": [
          "feeCode"
        ],
        "properties": {
          "note": {
            "type": "string",
            "description": "The note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The collected currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "feeCode": {
            "type": "string",
            "description": "The fee code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "feePricingMode": {
            "description": "Determines if fees are to be paid in points or with currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "nullable": true
          }
        }
      },
      "FeeRequestBase": {
        "type": "object",
        "description": "Defines the request to retrieve a service fee.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The override amount.\n            ",
            "format": "decimal"
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The collected currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "MultipleFeeOverrideRequest": {
        "type": "object",
        "description": "Defines the multiple fee override request.\n            ",
        "additionalProperties": false,
        "properties": {
          "feeRequests": {
            "type": "array",
            "description": "The list of fee requests.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeRequest"
            }
          }
        }
      },
      "FeeRequest": {
        "type": "object",
        "description": "Defines the request to retrieve a service fee.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "feeKey"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The override amount.\n            ",
            "format": "decimal"
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The collected currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "feeKey": {
            "type": "string",
            "description": "The passenger fee key.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfPassengerFee": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerFee"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "WaiveFeeType": {
        "type": "integer",
        "description": "Defines the fee type that can be waived.\n            \n\n0 = None\n1 = PenaltyFee\n2 = SpoilageFee\n3 = NameChangeFee",
        "x-enumNames": [
          "None",
          "PenaltyFee",
          "SpoilageFee",
          "NameChangeFee"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfIListOfFeeDetail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeDetail"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FeeDetail": {
        "type": "object",
        "description": "Fee detail model.\n            ",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "integer",
            "description": "Gets or sets the fee option number of this fee option.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "feeRules": {
            "type": "array",
            "description": "Gets or sets the fee rules for this fee option.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeRule"
            }
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name for this fee option.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "regionFees": {
            "type": "array",
            "description": "Gets or sets the region fees for this fee option.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RegionFee"
            }
          },
          "taxApplicationOverride": {
            "description": "Gets or sets the override of how to apply the taxes.\n            ",
            "$ref": "#/components/schemas/TaxApplication"
          },
          "travelComponentOverride": {
            "description": "Gets or sets the override for the travel component.\n            ",
            "$ref": "#/components/schemas/TravelComponent"
          },
          "useOverrides": {
            "type": "boolean",
            "description": "Gets or sets the flag for using the overrides.\n            "
          },
          "feeApplicationOverride": {
            "description": "Gets or sets the override for where to apply this fee option.\n            ",
            "$ref": "#/components/schemas/FeeApplication"
          }
        }
      },
      "FeeRule": {
        "type": "object",
        "description": "Fee rule model.\n            ",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "integer",
            "description": "Gets or sets the fee option number for this fee rule.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "ruleNumber": {
            "type": "integer",
            "description": "Gets or sets the fee rule number for this fee rule.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "properties": {
            "type": "array",
            "description": "Gets or sets the list of fee rule properties for this fee rule.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeRuleProperty"
            }
          },
          "operator": {
            "description": "Gets or sets the fee rule operator for this fee rule.\n            ",
            "$ref": "#/components/schemas/FeeRuleOperator"
          }
        }
      },
      "FeeRuleProperty": {
        "type": "object",
        "description": "Fee rule property model.\n            ",
        "additionalProperties": false,
        "properties": {
          "propertyNumber": {
            "type": "integer",
            "description": "Gets or sets the fee property number of this fee rule property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "ruleNumber": {
            "type": "integer",
            "description": "Gets or sets the fee rule number of this fee rule property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "operator": {
            "description": "Gets or sets the property operator of this fee rule property.\n            ",
            "$ref": "#/components/schemas/FeeRulePropertyOperator"
          },
          "type": {
            "description": "Gets or sets the property type of this fee rule property.\n            ",
            "$ref": "#/components/schemas/FeeRulePropertyType"
          },
          "propertyValue": {
            "type": "string",
            "description": "Gets or sets the property value of this fee rule property.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "FeeRulePropertyOperator": {
        "type": "integer",
        "description": "Enum representing the fee rule property operator.\n            \n\n0 = Default\n1 = MustBe\n2 = MustNotBe\n3 = AllMustBe",
        "x-enumNames": [
          "Default",
          "MustBe",
          "MustNotBe",
          "AllMustBe"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "FeeRulePropertyType": {
        "type": "integer",
        "description": "Types of fee rules available.\n            \n\n0 = Default\n1 = PassengerType\n2 = FromStationClass\n3 = FareClass\n4 = PassengerResidentCountry\n5 = FeeCode\n6 = ToStationClass\n7 = EventChannel\n8 = OrganizationGroup\n9 = OrganizationCode\n10 = AgentRole\n11 = BestCustomerProgramLevel\n12 = WorstCustomerProgramLevel\n13 = ExactCustomerProgramLevel\n14 = CarrierCode\n15 = SeatGroup\n16 = FeeType\n17 = ProductClass\n18 = SystemCode\n19 = TripType\n20 = PaymentType\n21 = TicketAccountingCode\n22 = SoldChannel\n23 = ItineraryFullyWithinCountry\n24 = ChangeReasonCode\n25 = GuestRecognitionLevel\n26 = FlightType\n27 = FareType\n28 = DayOfWeek\n29 = StartTimeOfDay\n30 = EndTimeOfDay\n31 = StartFlightNumberRange\n32 = EndFlightNumberRange\n33 = MinAdvancedPurchaseDays\n34 = FareDiscount\n35 = BookingStatus\n36 = EarliestAdvancedPurchaseDays\n37 = SalesStartTimeOfDay\n38 = SalesEndTimeOfDay\n39 = BookingCurrency\n40 = CardSubType\n41 = PaymentMethodCode\n42 = ServiceBundle\n43 = CreatedAgentRoleCode\n44 = StartExtraBagRange\n45 = EndExtraBagRange\n46 = JourneyDepartureStation\n47 = JourneyDepartureCountry\n48 = GSTStateCode\n49 = SystemType\n50 = FarePriceType\n51 = GSTTaxOption\n52 = LatestAdvancedPurchaseDays",
        "x-enumNames": [
          "Default",
          "PassengerType",
          "FromStationClass",
          "FareClass",
          "PassengerResidentCountry",
          "FeeCode",
          "ToStationClass",
          "EventChannel",
          "OrganizationGroup",
          "OrganizationCode",
          "AgentRole",
          "BestCustomerProgramLevel",
          "WorstCustomerProgramLevel",
          "ExactCustomerProgramLevel",
          "CarrierCode",
          "SeatGroup",
          "FeeType",
          "ProductClass",
          "SystemCode",
          "TripType",
          "PaymentType",
          "TicketAccountingCode",
          "SoldChannel",
          "ItineraryFullyWithinCountry",
          "ChangeReasonCode",
          "GuestRecognitionLevel",
          "FlightType",
          "FareType",
          "DayOfWeek",
          "StartTimeOfDay",
          "EndTimeOfDay",
          "StartFlightNumberRange",
          "EndFlightNumberRange",
          "MinAdvancedPurchaseDays",
          "FareDiscount",
          "BookingStatus",
          "EarliestAdvancedPurchaseDays",
          "SalesStartTimeOfDay",
          "SalesEndTimeOfDay",
          "BookingCurrency",
          "CardSubType",
          "PaymentMethodCode",
          "ServiceBundle",
          "CreatedAgentRoleCode",
          "StartExtraBagRange",
          "EndExtraBagRange",
          "JourneyDepartureStation",
          "JourneyDepartureCountry",
          "GSTStateCode",
          "SystemType",
          "FarePriceType",
          "GSTTaxOption",
          "LatestAdvancedPurchaseDays"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52
        ]
      },
      "FeeRuleOperator": {
        "type": "integer",
        "description": "Enum for fee rule operator.\n            \n\n0 = Default\n1 = MustBe\n2 = MustNotBe",
        "x-enumNames": [
          "Default",
          "MustBe",
          "MustNotBe"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "RegionFee": {
        "type": "object",
        "description": "Region fee model.\n            ",
        "additionalProperties": false,
        "properties": {
          "controlLimit": {
            "type": "integer",
            "description": "Gets or sets the control limit of this region fee.\n            "
          },
          "countryCode": {
            "type": "string",
            "description": "Gets or sets the country code of this region fee.\n            ",
            "nullable": true
          },
          "deducted": {
            "type": "boolean",
            "description": "Gets or sets the deducted flag of this region fee.\n            "
          },
          "deductionType": {
            "description": "Gets or sets the deduction type of this region fee.\n            ",
            "$ref": "#/components/schemas/DeductionType"
          },
          "defaultCurrencyCode": {
            "type": "string",
            "description": "Gets or sets the default currency code of this region fee.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "directionality": {
            "description": "Gets or sets the directionality of this region fee.\n            ",
            "$ref": "#/components/schemas/Directionality"
          },
          "discontinueDate": {
            "type": "string",
            "description": "Gets or sets the discontinue date of this region fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "feeOptionNumber": {
            "type": "integer",
            "description": "Gets or sets the fee option number for this region fee.\n            "
          },
          "ratePercent": {
            "type": "number",
            "description": "Gets or sets the rate percent for this region fee.\n            ",
            "format": "decimal"
          },
          "regionCode": {
            "type": "string",
            "description": "Gets or sets the region code for this region fee.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "baggage": {
            "description": "Gets or sets the baggage for this region fee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegionFeeBaggage"
          },
          "id": {
            "type": "integer",
            "description": "Gets or sets the id for this region fee.\n            ",
            "format": "int64",
            "nullable": true
          },
          "regionRates": {
            "type": "array",
            "description": "Gets or sets the list for region rates for this region fee.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RegionRate"
            }
          },
          "regionType": {
            "description": "Gets or sets the region type for this region fee.\n            ",
            "$ref": "#/components/schemas/RegionType"
          },
          "releaseDate": {
            "type": "string",
            "description": "Gets or sets the release date for this region fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "travelCountryCode": {
            "type": "string",
            "description": "Gets or sets the travel country code for this region fee.\n            ",
            "nullable": true
          },
          "travelDiscontinueDate": {
            "type": "string",
            "description": "Gets or sets the travel discount date for this region fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "travelRegionCode": {
            "type": "string",
            "description": "Gets or sets the travel region code for this region.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "travelRegionType": {
            "description": "Gets or sets the travel region type for this region.\n            ",
            "$ref": "#/components/schemas/RegionType"
          },
          "travelReleaseDate": {
            "type": "string",
            "description": "Gets or sets the travel release date for this region.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "travelSegmentIndicator": {
            "description": "Gets or sets the travel segment indicator for this region.\n            ",
            "$ref": "#/components/schemas/TravelSegmentIndicator"
          }
        }
      },
      "DeductionType": {
        "type": "integer",
        "description": "Enumeration representing the deduction type to be applied to fees/taxes.\n            \n\n0 = All\n1 = First\n2 = Last\n3 = ExceptForFirst\n4 = ExceptForLast\n5 = None",
        "x-enumNames": [
          "All",
          "First",
          "Last",
          "ExceptForFirst",
          "ExceptForLast",
          "None"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "Directionality": {
        "type": "integer",
        "description": "Enum representing direction of an object.\n            \n\n0 = None\n1 = To\n2 = From\n3 = Between",
        "x-enumNames": [
          "None",
          "To",
          "From",
          "Between"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "RegionFeeBaggage": {
        "type": "object",
        "description": "Region rate model.\n            ",
        "additionalProperties": false,
        "properties": {
          "weightDivisorKgs": {
            "type": "integer",
            "description": "Divisor value for weight in Kilograms.\n            "
          },
          "weightDivisorLbs": {
            "type": "integer",
            "description": "Divisor value for weight in pounds.\n            "
          }
        }
      },
      "RegionRate": {
        "type": "object",
        "description": "Region rate model.\n            ",
        "additionalProperties": false,
        "required": [
          "regionCode"
        ],
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code of this region rate.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "rateAmount": {
            "type": "number",
            "description": "The rate amount of this region rate.\n            ",
            "format": "decimal"
          },
          "regionCode": {
            "type": "string",
            "description": "The region code of this region rate.\n            ",
            "maxLength": 5,
            "minLength": 0
          },
          "regionFeeId": {
            "type": "integer",
            "description": "The region fee ID of this region rate.\n            ",
            "format": "int64",
            "nullable": true
          },
          "regionRateId": {
            "type": "integer",
            "description": "The region rate ID of this region rate.\n            ",
            "format": "int64"
          },
          "regionType": {
            "description": "The type of this region rate.\n            ",
            "$ref": "#/components/schemas/RegionType"
          }
        }
      },
      "RegionType": {
        "type": "integer",
        "description": "Enum reprenting the the region type used to indicate the kind of region an item is associated with.\n            \n\n0 = Default\n1 = Station\n2 = City\n3 = ProvinceState\n4 = Country\n5 = FeeZone\n6 = SubZone\n7 = Area\n8 = All\n9 = Mac",
        "x-enumNames": [
          "Default",
          "Station",
          "City",
          "ProvinceState",
          "Country",
          "FeeZone",
          "SubZone",
          "Area",
          "All",
          "Mac"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "TravelSegmentIndicator": {
        "type": "integer",
        "description": "Enumeration representing TSI Codes\n            \n\n0 = None\n1 = CheckAgainstJourney\n2 = CheckAgainstTrip\n100 = Departure\n101 = DepartureOfTripOrigin\n102 = DepartureAtConnection\n103 = DepartureWithinStopoverTime\n104 = DepartureAtPointOfTurnaround\n105 = DepartureOfTransOceanicSegment\n106 = DepartureFromGateway\n107 = DepartureOfLastSegment\n108 = DepartureExceedsStopoverTime\n109 = NotDepartingViaConnection\n110 = GroundTimeBeforeDepartureOfJourneyWithin\n111 = GroundTimeBeforeDepartureOfJourneyExceeds\n200 = Arrival\n201 = ArrivalOfTransOceanicSegment\n202 = ArrivalAtGateway\n203 = ArrivalAtPointOfTurnaround\n204 = ArrivalAtConnection\n206 = ArrivalAtTripOrigin\n207 = NotDepartingViaConnectionOnSameCalendarDay\n208 = CheckAgainstItinerary\n209 = GroundTimeAfterArrivalAtConnectionWithin\n210 = GroundTimeAfterArrivalAtConnectionExceeds\n211 = GroundTimeAfterArrivalOfJourneyWithin\n212 = GroundTimeAfterArrivalOfJourneyExceeds",
        "x-enumNames": [
          "None",
          "CheckAgainstJourney",
          "CheckAgainstTrip",
          "Departure",
          "DepartureOfTripOrigin",
          "DepartureAtConnection",
          "DepartureWithinStopoverTime",
          "DepartureAtPointOfTurnaround",
          "DepartureOfTransOceanicSegment",
          "DepartureFromGateway",
          "DepartureOfLastSegment",
          "DepartureExceedsStopoverTime",
          "NotDepartingViaConnection",
          "GroundTimeBeforeDepartureOfJourneyWithin",
          "GroundTimeBeforeDepartureOfJourneyExceeds",
          "Arrival",
          "ArrivalOfTransOceanicSegment",
          "ArrivalAtGateway",
          "ArrivalAtPointOfTurnaround",
          "ArrivalAtConnection",
          "ArrivalAtTripOrigin",
          "NotDepartingViaConnectionOnSameCalendarDay",
          "CheckAgainstItinerary",
          "GroundTimeAfterArrivalAtConnectionWithin",
          "GroundTimeAfterArrivalAtConnectionExceeds",
          "GroundTimeAfterArrivalOfJourneyWithin",
          "GroundTimeAfterArrivalOfJourneyExceeds"
        ],
        "enum": [
          0,
          1,
          2,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          200,
          201,
          202,
          203,
          204,
          206,
          207,
          208,
          209,
          210,
          211,
          212
        ]
      },
      "TaxApplication": {
        "type": "integer",
        "description": "Enumeration representing how taxes are applied to a fee.\n            \n\n0 = Unknown\n1 = Taxable\n2 = TaxableLocal\n3 = NonTaxable\n4 = NonTaxableApplyToBaseFareOnly\n5 = TaxableByTrip\n6 = TaxableByItinerary",
        "x-enumNames": [
          "Unknown",
          "Taxable",
          "TaxableLocal",
          "NonTaxable",
          "NonTaxableApplyToBaseFareOnly",
          "TaxableByTrip",
          "TaxableByItinerary"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "TravelComponent": {
        "type": "integer",
        "description": "Enumeration for a travel component type.\n            \n\n0 = Unknown\n1 = Itinerary\n2 = Trip\n3 = Journey\n4 = Segment\n5 = Leg\n9 = ItineraryWithJourneySalesDate\n10 = TripWithJourneySalesDate\n11 = JourneyWithBookingSalesDate\n12 = JourneyWithJourneySalesDate\n13 = SegmentWithJourneySalesDate\n14 = LegWithJourneySalesDate\n15 = Fare",
        "x-enumNames": [
          "Unknown",
          "Itinerary",
          "Trip",
          "Journey",
          "Segment",
          "Leg",
          "ItineraryWithJourneySalesDate",
          "TripWithJourneySalesDate",
          "JourneyWithBookingSalesDate",
          "JourneyWithJourneySalesDate",
          "SegmentWithJourneySalesDate",
          "LegWithJourneySalesDate",
          "Fare"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          9,
          10,
          11,
          12,
          13,
          14,
          15
        ]
      },
      "FeeApplication": {
        "type": "integer",
        "description": "Enumeration representing how and where fees are to be applied.\n            \n\n0 = Pnr\n1 = TravelComponent\n2 = EachPassenger\n3 = EachPassengerTravelComponent\n4 = SpecifyPassenger\n5 = AllPaxCheckingBagsTogether\n6 = PerBookingNoLimit",
        "x-enumNames": [
          "Pnr",
          "TravelComponent",
          "EachPassenger",
          "EachPassengerTravelComponent",
          "SpecifyPassenger",
          "AllPaxCheckingBagsTogether",
          "PerBookingNoLimit"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "IJsonResponseOfIListOfJourney": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Journey"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfJourney": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Journey"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CancelJourneyRequest": {
        "type": "object",
        "description": "Defines the options available when canceling a journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "waivePenaltyFee": {
            "type": "boolean",
            "description": "Flag indicating to waive penalty fees if role permitting.\n            ",
            "nullable": true
          },
          "waiveSpoilageFee": {
            "type": "boolean",
            "description": "Flag indicating to waive spoilage fees if role permitting.\n            ",
            "nullable": true
          },
          "preventReprice": {
            "type": "boolean",
            "description": "Flag indicating to prevent reprice if role permitting.\n            ",
            "nullable": true
          },
          "forceRefareForItineraryIntegrity": {
            "type": "boolean",
            "description": "Flag indicating to invoke price with force refare itinerary set to true (default value is set to true).\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfTrip": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Trip"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Trip": {
        "type": "object",
        "description": "Trip model representing a slim version of a core Availability Schedule.\n            ",
        "additionalProperties": false,
        "required": [
          "origin",
          "destination"
        ],
        "properties": {
          "origin": {
            "type": "string",
            "description": "The arrival station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The destination station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "journeysAvailable": {
            "type": "array",
            "description": "Journey collection.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneyAvailability"
            }
          }
        }
      },
      "JourneyAvailability": {
        "type": "object",
        "description": "Defines a journey availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The unique identifier for this journey sell information.\n            ",
            "nullable": true
          },
          "notForGeneralUser": {
            "type": "boolean",
            "description": "A value indicating whether the journey is for a general user.\n            "
          },
          "flightType": {
            "description": "Returns a flight type enumeration. (NonStop, Thru, etc.)\n            ",
            "$ref": "#/components/schemas/FlightType"
          },
          "stops": {
            "type": "integer",
            "description": "The total number of stops this flight takes.\n            ",
            "format": "int32"
          },
          "designator": {
            "description": "This is a summary of all the segments. It will contain the details\nof the transportation from the first and last segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "fares": {
            "type": "object",
            "description": "The journey fares which contain only the key and journey specific information of the fare.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/JourneyFareAvailability"
            }
          },
          "segments": {
            "type": "array",
            "description": "The collection of segments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AvailabilitySegment"
            }
          }
        }
      },
      "JourneyFareAvailability": {
        "type": "object",
        "description": "Model describing the basic fare information that is displayed per availability segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareAvailabilityKey": {
            "type": "string",
            "description": "Unique key for this type of fare.\n            ",
            "nullable": true
          },
          "fareCode": {
            "type": "string",
            "description": "The fare basis code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "availableCount": {
            "type": "integer",
            "description": "The number of available fares.\n            ",
            "nullable": true
          },
          "isSumOfSector": {
            "type": "boolean",
            "description": "The value indicating if the fare is sum of sector.\n            "
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AvailabilitySegment": {
        "type": "object",
        "description": "Availability segment defines segment information before being booked.\n            ",
        "additionalProperties": false,
        "properties": {
          "isSeatmapViewable": {
            "type": "boolean",
            "description": "Indicates if the seatmaps associated with the segment are retrievable.\nSets to `false` for passive segments, and `true` for non-passive segments.\n            "
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "externalIdentifier": {
            "description": "The external transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "segmentType": {
            "description": "The type of the segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Represents the blocked status of the segment.\n            "
          },
          "isHosted": {
            "type": "boolean",
            "description": "Represents the hosted status of the segment.\n            "
          },
          "isChangeOfGauge": {
            "type": "boolean",
            "description": "Represents the change of gauge status of the segment.\n            "
          },
          "designator": {
            "description": "This is a summary of all the legs on the segment. It will contain the details\nof the transportation from the first and last leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for this segment sell information.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "changeReasonCode": {
            "description": "The change reason code.\n            ",
            "$ref": "#/components/schemas/ChangeReasonCodes"
          },
          "international": {
            "type": "boolean",
            "description": "The value indicating if this segment is international.\n            "
          },
          "legs": {
            "type": "array",
            "description": "The legs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          }
        }
      },
      "AvailabilityFlyAheadRequest": {
        "type": "object",
        "description": "Defines a fly ahead availability criteria search.\n            ",
        "additionalProperties": false,
        "required": [
          "journeyKey",
          "stations",
          "dates"
        ],
        "properties": {
          "filters": {
            "description": "The filtering criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityMoveFilterCriteria"
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey sell key to move.\n            ",
            "minLength": 1
          },
          "stations": {
            "description": "The station criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityStationCriteria"
          },
          "dates": {
            "description": "The date criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityDateCriteria"
          },
          "flightFilters": {
            "description": "The flight search criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFlightCriteria"
          },
          "type": {
            "description": "Defines the type of fares to be returned.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityType"
          },
          "passengerKeys": {
            "type": "array",
            "description": "The list of passengers for whom availability is being requested.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AvailabilityMoveFilterCriteria": {
        "type": "object",
        "description": "Filter criteria filters the move availability responses results.\n            ",
        "additionalProperties": false,
        "properties": {
          "filter": {
            "description": "Filters the type of journeys to return.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFilter"
          },
          "sortKeys": {
            "type": "array",
            "description": "The list of inventory journey sort keys. Used for filtering journeys on the response.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneySortKey"
            }
          }
        }
      },
      "AvailabilityFilter": {
        "type": "integer",
        "description": "Filter used to filter the types of journeys to return on availability.\n            \n\n0 = Default\n1 = ExcludeDeparted\n2 = ExcludeImminent\n3 = ExcludeUnavailable",
        "x-enumNames": [
          "Default",
          "ExcludeDeparted",
          "ExcludeImminent",
          "ExcludeUnavailable"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "JourneySortKey": {
        "type": "integer",
        "description": "Defines the sorting keys for the journeys on availability.\n            \n\n0 = ServiceType\n1 = ShortestTravelTime\n2 = LowestFare\n3 = HighestFare\n4 = EarliestDeparture\n5 = LatestDeparture\n6 = EarliestArrival\n7 = LatestArrival\n8 = NoSort\n9 = BiasOnlineCommercialDuplicates\n10 = JourneyNumber",
        "x-enumNames": [
          "ServiceType",
          "ShortestTravelTime",
          "LowestFare",
          "HighestFare",
          "EarliestDeparture",
          "LatestDeparture",
          "EarliestArrival",
          "LatestArrival",
          "NoSort",
          "BiasOnlineCommercialDuplicates",
          "JourneyNumber"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "AvailabilityStationCriteria": {
        "type": "object",
        "description": "Defines the availability criteria stations.\n            ",
        "additionalProperties": false,
        "required": [
          "destinationStationCodes",
          "originStationCodes"
        ],
        "properties": {
          "destinationStationCodes": {
            "type": "array",
            "description": "The Arrival Station Codes.\n            ",
            "items": {
              "type": "string"
            }
          },
          "originStationCodes": {
            "type": "array",
            "description": "The Departure Station Codes.\n            ",
            "items": {
              "type": "string"
            }
          },
          "searchDestinationMacs": {
            "type": "boolean",
            "description": "Flag indicating to search by the corresponding MAC associated with station codes provided.\n            ",
            "nullable": true
          },
          "searchOriginMacs": {
            "type": "boolean",
            "description": "Flag indicating to search by the corresponding MAC associated with station codes provided.\n            ",
            "nullable": true
          }
        }
      },
      "AvailabilityDateCriteria": {
        "type": "object",
        "description": "Defines the availability criteria dates.\n            ",
        "additionalProperties": false,
        "required": [
          "beginDate"
        ],
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The beginning date to include flights for.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "startTimeInterval": {
            "type": "string",
            "description": "The beginning time interval to include flights from regardless of the days.\n            ",
            "format": "duration",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The ending date to include flights for.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "endTimeInterval": {
            "type": "string",
            "description": "The ending time interval to include flights from regardless of the days.\n            ",
            "format": "duration",
            "nullable": true
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week to include in the provided date range.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          }
        }
      },
      "DayOfWeek": {
        "type": "integer",
        "description": "Defines the day of the week with none as an option.\n            \n\n0 = None\n1 = Monday\n2 = Tuesday\n3 = Wednesday\n4 = Thursday\n5 = Friday\n6 = Saturday\n7 = Sunday",
        "x-enumNames": [
          "None",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "AvailabilityFlightCriteria": {
        "type": "object",
        "description": "The specific flight criteria for the availability criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The desired carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "The desired flight number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The flight type filtering based on connections.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FlightType"
          },
          "maxConnectingFlights": {
            "type": "integer",
            "description": "The number of max connecting flights.\n            ",
            "nullable": true
          }
        }
      },
      "AvailabilityType": {
        "type": "integer",
        "description": "Availability type defines the type of fares to be returned.\n            \n\n0 = Default\n1 = Standby\n2 = Overbook\n3 = NoPricing",
        "x-enumNames": [
          "Default",
          "Standby",
          "Overbook",
          "NoPricing"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Availability"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Availability": {
        "type": "object",
        "description": "Availability contains all information returned when requesting flight availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "trips": {
            "type": "array",
            "description": "The collection of trips.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Trip"
            }
          },
          "faresAvailable": {
            "type": "object",
            "description": "The aggregate collection of fares available for all trips.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/FareAvailability"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code used on all trips.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "includeTaxesAndFees": {
            "type": "boolean",
            "description": "Flag indicating if the trip includes taxes and fees.\n            "
          }
        }
      },
      "FareAvailability": {
        "type": "object",
        "description": "Model describing common fare availability information for an entire availability request.\n            ",
        "additionalProperties": false,
        "properties": {
          "isGoverning": {
            "type": "boolean",
            "description": "Flag that indicates if the fare is the governing fare.\n            "
          },
          "downgradeAvailable": {
            "type": "boolean",
            "description": "Flag indicating if a downgrade is available.\n            "
          },
          "fareAvailabilityKey": {
            "type": "string",
            "description": "Unique key for this type of fare.\n            ",
            "nullable": true
          },
          "fareCode": {
            "type": "string",
            "description": "The fare basis code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "isSumOfSector": {
            "type": "boolean",
            "description": "The value indicating if the fare is sum of sector.\n            "
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "classType": {
            "type": "string",
            "description": "The fares type of the class.\n            ",
            "nullable": true
          },
          "fareApplicationType": {
            "description": "The type of the fare application.\n            ",
            "$ref": "#/components/schemas/FareApplicationType"
          },
          "fareClassOfService": {
            "type": "string",
            "description": "The fare class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "fareSequence": {
            "type": "integer",
            "description": "The fare sequence.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "fareStatus": {
            "description": "The fare status.\n            ",
            "$ref": "#/components/schemas/FareStatus"
          },
          "inboundOutBound": {
            "description": "The inbound and outbound.\n            ",
            "$ref": "#/components/schemas/InboundOutbound"
          },
          "isAllotmentMarketFare": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this fare is an allotment marker.\n            "
          },
          "productClass": {
            "type": "string",
            "description": "The product class.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "ruleNumber": {
            "type": "string",
            "description": "The rule number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ruleTariff": {
            "type": "string",
            "description": "The rule tariff.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "travelClassCode": {
            "type": "string",
            "description": "The travel class code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "passengerFares": {
            "type": "array",
            "description": "The list of passenger fares on the fare.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFareAvailability"
            }
          }
        }
      },
      "PassengerFareAvailability": {
        "type": "object",
        "description": "Model describing common fare availability information for an entire availability request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerType"
        ],
        "properties": {
          "fareDiscountCode": {
            "type": "string",
            "description": "The fare discount code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "passengerDiscountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerType": {
            "type": "string",
            "description": "The type of the passenger.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "fareAmount": {
            "type": "number",
            "description": "The passenger fare total fare amount.\n            ",
            "format": "decimal"
          },
          "revenueFare": {
            "type": "number",
            "description": "The passenger fare revenue fare amount.\n            ",
            "format": "decimal"
          },
          "publishedFare": {
            "type": "number",
            "description": "The passenger fare published fare amount.\n            ",
            "format": "decimal"
          },
          "loyaltyPoints": {
            "type": "number",
            "description": "The passenger fare loyalty points.\n            ",
            "format": "decimal"
          },
          "discountedFare": {
            "type": "number",
            "description": "The discounted fare amount.\n            ",
            "format": "decimal"
          },
          "serviceCharges": {
            "type": "array",
            "description": "The service charges.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "multiplier": {
            "type": "integer",
            "description": "The number of passengers with the same fare information represented by passenger type and discount code pair.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          }
        }
      },
      "MoveRequest": {
        "type": "object",
        "description": "Defines the move journey request for a booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "fromJourneyKey",
          "journeyKey",
          "fareKey"
        ],
        "properties": {
          "fromJourneyKey": {
            "type": "string",
            "description": "The journey key to move from.\n            ",
            "minLength": 1
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key to move to.\n            ",
            "minLength": 1
          },
          "fareKey": {
            "type": "string",
            "description": "The fare key to move to.\n            ",
            "minLength": 1
          },
          "moveType": {
            "description": "The type of move that is requested.\n            ",
            "$ref": "#/components/schemas/MovePassengerJourneyType"
          },
          "keepWaitListStatus": {
            "type": "boolean",
            "description": "If true and the FromJourney is waitlisted, then the newly moved-to journey will\nalso be waitlisted.  This interacts with ChangeStatus.  See documentation for\nChangeStatus for further details.\n            "
          },
          "ignoreClosedFlightStatus": {
            "type": "boolean",
            "description": "If true then the move will be allowed even if the legs of FromJourney have been\nmarked as Closed.\nIf false, the move will be disallowed if any one of the legs\nof FromJourney has been marked as Closed.\n            "
          },
          "ignoreLiftStatus": {
            "description": "Controls whether the Move is allowed to ignore boarded and/or\nchecked-in statuses.\n            ",
            "$ref": "#/components/schemas/IgnoreLiftStatus"
          },
          "changeStatus": {
            "type": "boolean",
            "description": "Set ChangeStatus to false and KeepWaitListStatus to false if you wish the\nstatus of the new segments to be set based upon the ActionStatusCodes\nspecified in the ToJourney.\nSet ChangeStatus to false and KeepWaitListStatus to true if you wish the\nstatus of the new segments to be set based upon the ActionStatusCodes\nspecified in the ToJourney EXCEPT when the original segments (being moved\nfrom) are waitlisted.  If the original segments are waitlisted, then the\nnew segments will also be forced to be waitlisted, regardless of which\nActionStatusCodes were specified in ToJourney.\nIf ChangeStatus is true, the status of the new segments will be set to\nthe opposite of the status of the original (moving from) segment.  If the\noriginal segments were waitlisted, then new segments will not be.  If the\noriginal segments were not waitlisted, the new segments will be waitlisted.\nThis does not need to be set to true if moving to a standby journey that is\nalready part of the booking.\n            "
          },
          "oversell": {
            "type": "boolean",
            "description": "If set to true and the active Agent has appropriate permissions, the move will\nbe allowed even if no space is available on the ToJourney.\n            "
          },
          "boardingSequenceOffset": {
            "type": "integer",
            "description": "If set to zero and MovePassengerJourneyType is not Diversion, the boarding sequence\nof the original segments will be copied to the new (moved to) segments.\nIf set to a value other than zero and MovePassengerJourneyType is not Diversion,\nthe boarding sequence of the original segments will be copied to the new (moved to)\nsegments and then incremented by the specified BoardingSequenceOffset.\nBoarding sequence is not preserved for Diversion moves.\n            "
          },
          "moveSsrOption": {
            "description": "Controls whether to move SSRs from FromJourney to ToJourney.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MoveSsrOption"
          }
        }
      },
      "MovePassengerJourneyType": {
        "type": "integer",
        "description": "The type of move to perform for the passengers on the journey.\n            \n\n0 = None\n1 = Irop\n2 = Diversion\n4 = FlightClose\n5 = FlyAhead\n6 = SplitJourney\n7 = SelfServiceRebooking",
        "x-enumNames": [
          "None",
          "Irop",
          "Diversion",
          "FlightClose",
          "FlyAhead",
          "SplitJourney",
          "SelfServiceRebooking"
        ],
        "enum": [
          0,
          1,
          2,
          4,
          5,
          6,
          7
        ]
      },
      "IgnoreLiftStatus": {
        "type": "integer",
        "description": "Defines the lift status ignore level for Journey Move/Cancel.\n            \n\n0 = IgnoreNotAllowed\n1 = IgnoreCheckin\n2 = IgnoreBoarded",
        "x-enumNames": [
          "IgnoreNotAllowed",
          "IgnoreCheckin",
          "IgnoreBoarded"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "MoveSsrOption": {
        "type": "integer",
        "description": "How to handle SSRs on move.\n            \n\n0 = OverbookSsr\n1 = MoveAvailableSsr\n2 = MoveNone",
        "x-enumNames": [
          "OverbookSsr",
          "MoveAvailableSsr",
          "MoveNone"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IropMoveRequest": {
        "type": "object",
        "description": "Defines the irop move request for a booking.\n            ",
        "additionalProperties": false,
        "required": [
          "fromJourneyKey",
          "journeyKey",
          "fareKey"
        ],
        "properties": {
          "fromJourneyKey": {
            "type": "string",
            "description": "The journey key to move from.\n            ",
            "minLength": 1
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key to move to.\n            ",
            "minLength": 1
          },
          "fareKey": {
            "type": "string",
            "description": "The fare key to move to.\n            ",
            "minLength": 1
          },
          "moveAsDiversion": {
            "type": "boolean",
            "description": "Whether to perform the move as a diversion or not. Defaults to false.\n            "
          },
          "overSell": {
            "type": "boolean",
            "description": "If true then the move will be allowed even if the legs of FromJourney have been\nmarked as Closed.\nIf false, the move will be disallowed if any one of the legs\nof FromJourney has been marked as Closed.\n            "
          },
          "changeStatus": {
            "type": "boolean",
            "description": "If ChangeStatus is true, the status of the new segments will be set to\nthe opposite of the status of the original (moving from) segment.  If the\noriginal segments were waitlisted, then new segments will not be.  If the\noriginal segments were not waitlisted, the new segments will be waitlisted.\nThis does not need to be set to true if moving to a standby journey that is\nalready part of the booking.\n            "
          },
          "boardingSequenceOffset": {
            "type": "integer",
            "description": "If set to zero and MoveAsDiversion is false, the boarding sequence\nof the original segments will be copied to the new (moved to) segments.\nIf set to a value other than zero and MoveAsDiversion is false,\nthe boarding sequence of the original segments will be copied to the new (moved to)\nsegments and then incremented by the specified BoardingSequenceOffset.\nBoarding sequence is not preserved for Diversion moves.\n            "
          },
          "standbyPriorityCode": {
            "type": "string",
            "description": "Standby priority code.\n            ",
            "nullable": true
          },
          "inventoryControlType": {
            "description": "The IROP inventory control type.\n            ",
            "$ref": "#/components/schemas/IropInventoryControlType"
          }
        }
      },
      "IropInventoryControlType": {
        "type": "integer",
        "description": "Defines the different ways inventory is held at the time of sell for an irop move.\n            \n\n0 = ClaimSpace\n1 = OversellSpace\n2 = StandBy",
        "x-enumNames": [
          "ClaimSpace",
          "OversellSpace",
          "StandBy"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OneTimeNotificationCreateRequest": {
        "type": "object",
        "description": "Request for one time notification creation.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          },
          "events": {
            "type": "array",
            "description": "The list of one time travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OneTimeNotificationEventCreateRequest"
            }
          },
          "timedEvents": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
            }
          },
          "marketInformation": {
            "description": "The market to create a notification for.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "NotificationDestination": {
        "type": "object",
        "description": "A travel notification destination.\n            ",
        "additionalProperties": false,
        "required": [
          "deliveryMethodCode"
        ],
        "properties": {
          "deliveryMethodCode": {
            "description": "The delivery method code.\n            ",
            "$ref": "#/components/schemas/DeliveryMethodCode"
          },
          "destination": {
            "type": "string",
            "description": "The notification destination, an email or phone number.\n            ",
            "nullable": true
          }
        }
      },
      "DeliveryMethodCode": {
        "type": "integer",
        "description": "Represents the delivery method codes.\n            \n\n0 = Email\n1 = Sms\n2 = Push",
        "x-enumNames": [
          "Email",
          "Sms",
          "Push"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OneTimeNotificationEventCreateRequest": {
        "type": "object",
        "description": "A one time travel notification event create request.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The one time travel notification event type.\n            ",
            "$ref": "#/components/schemas/OneTimeNotificationEventType"
          }
        }
      },
      "OneTimeNotificationEventType": {
        "type": "integer",
        "description": "Represents the type of notification event type for a one time travel notification event.\n            \n\n0 = DepartureDelay\n1 = ArrivalDelay",
        "x-enumNames": [
          "DepartureDelay",
          "ArrivalDelay"
        ],
        "enum": [
          0,
          1
        ]
      },
      "NotificationTimedEventCreateRequest": {
        "type": "object",
        "description": "A travel notification timed event create request.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "minutesToEvent": {
            "type": "integer",
            "description": "The minutes to the event.\n            ",
            "format": "int32"
          },
          "type": {
            "description": "The travel notification timed event type.\n            ",
            "$ref": "#/components/schemas/NotificationTimedEventType"
          }
        }
      },
      "NotificationTimedEventType": {
        "type": "integer",
        "description": "Represents the type of timed notification event type for a travel notification event.\nThese are events that have an associated property minutes to event.\n            \n\n0 = Departure\n1 = Arrival",
        "x-enumNames": [
          "Departure",
          "Arrival"
        ],
        "enum": [
          0,
          1
        ]
      },
      "IJsonResponseOfOneTimeTravelNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OneTimeTravelNotification"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OneTimeTravelNotification": {
        "type": "object",
        "description": "A one time travel notification.\n            ",
        "additionalProperties": false,
        "properties": {
          "oneTimeTravelNotificationKey": {
            "type": "string",
            "description": "The one time travel notification key.\n            ",
            "nullable": true
          },
          "events": {
            "type": "array",
            "description": "The list of one time travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OneTimeNotificationEvent"
            }
          },
          "timedEvents": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEvent"
            }
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "OneTimeNotificationEvent": {
        "type": "object",
        "description": "A one time notification event.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The one time travel notification event type.\n            ",
            "$ref": "#/components/schemas/OneTimeNotificationEventType"
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "NotificationTimedEvent": {
        "type": "object",
        "description": "A travel notification timed event.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The travel notification timed event type.\n            ",
            "$ref": "#/components/schemas/NotificationTimedEventType"
          },
          "minutesToEvent": {
            "type": "integer",
            "description": "The minutes to the event.\n            ",
            "format": "int32"
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPassengerSegment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerSegment"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerAddress": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerAddress"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerAddress": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerAddress"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndPassengerPriceBreakdown": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerPriceBreakdown"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndPassengerTypePriceBreakdown": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerTypePriceBreakdown"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerTypePriceBreakdown": {
        "type": "object",
        "description": "Defines the unique passenger type level pricing breakdown.\n            ",
        "additionalProperties": false,
        "properties": {
          "services": {
            "description": "The charge breakdown of the service fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "specialServices": {
            "description": "The charge breakdown of the special service requests.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "seats": {
            "description": "The charge breakdown of seat fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "upgrades": {
            "description": "The charge breakdown of upgrade fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "spoilage": {
            "description": "The charge breakdown of spoilage fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "nameChanges": {
            "description": "The charge breakdown of name change fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "convenience": {
            "description": "The charge breakdown of convenience fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "infant": {
            "description": "The charge breakdown of infant fees.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChargeBreakdown"
          },
          "passengerTypeCode": {
            "type": "string",
            "description": "The passenger type code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPassengerPriceBreakdown": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerPriceBreakdown"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndPassenger": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassenger": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Passenger"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerEmdCoupon": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerEmdCoupon"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerEmdCoupon": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerEmdCoupon"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerInfant": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInfant"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerInfantCreateRequest": {
        "type": "object",
        "description": "Model representing infant data that can be set.\n            ",
        "additionalProperties": false,
        "properties": {
          "nationality": {
            "type": "string",
            "description": "The nationality of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The residentCountry of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "travelDocuments": {
            "type": "array",
            "description": "Travel Documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerTravelDocument": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerTravelDocument": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTravelDocument"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NotificationEventCreateRequest": {
        "type": "object",
        "description": "A travel notification event create request.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The travel notification event type.\n            ",
            "$ref": "#/components/schemas/NotificationEventType"
          }
        }
      },
      "NotificationEventType": {
        "type": "integer",
        "description": "Represents the type of notification event type for a travel notification event.\n            \n\n0 = DepartureDelay\n1 = ArrivalDelay\n2 = ScheduleChange\n3 = CheckIn\n4 = GateInformation",
        "x-enumNames": [
          "DepartureDelay",
          "ArrivalDelay",
          "ScheduleChange",
          "CheckIn",
          "GateInformation"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfIListOfNotificationEvent": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationEvent"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NotificationEvent": {
        "type": "object",
        "description": "A travel notification event.\n            ",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The travel notification event type.\n            ",
            "$ref": "#/components/schemas/NotificationEventType"
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfNotificationEvent": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationEvent"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfNotificationTimedEvent": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEvent"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfNotificationTimedEvent": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationTimedEvent"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NotificationTimedEventEditRequest": {
        "type": "object",
        "description": "A travel notification timed event edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "minutesToEvent": {
            "type": "integer",
            "description": "The minutes to the event.\n            ",
            "format": "int32"
          }
        }
      },
      "TravelNotificationCreateRequest": {
        "type": "object",
        "description": "Create request for travel notifications.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          },
          "events": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationEventCreateRequest"
            }
          },
          "timedEvents": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEventCreateRequest"
            }
          }
        }
      },
      "IJsonResponseOfIListOfTravelNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelNotification"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelNotification": {
        "type": "object",
        "description": "A travel notification.\n            ",
        "additionalProperties": false,
        "properties": {
          "travelNotificationKey": {
            "type": "string",
            "description": "The travel notification key.\n            ",
            "nullable": true
          },
          "events": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationEvent"
            }
          },
          "timedEvents": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEvent"
            }
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfTravelNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelNotification"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelNotificationEditRequest": {
        "type": "object",
        "description": "Request base for travel notifications.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfTravelNotificationEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "properties": {
              "deliveryMethodCode": {
                "description": "The delivery method code.\n            ",
                "$ref": "#/components/schemas/DeliveryMethodCode"
              },
              "destination": {
                "type": "string",
                "description": "The notification destination, an email or phone number.\n            ",
                "nullable": true
              }
            }
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfThreeDSecureResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ThreeDSecureResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ThreeDSecureResponse": {
        "type": "object",
        "description": "Defines three D secure response.\n            ",
        "additionalProperties": false,
        "properties": {
          "redirectUrl": {
            "type": "string",
            "description": "The url to visit for 3DS verification.\n            ",
            "nullable": true
          },
          "paReq": {
            "type": "string",
            "description": "The 3DS standard PaReq verification token.\n            ",
            "nullable": true
          },
          "responseUrl": {
            "type": "string",
            "description": "The response url for the bank to use after verification.\n            ",
            "nullable": true
          },
          "md": {
            "type": "string",
            "description": "The 3DS standard MD field used for the merchant session tracker.\n            ",
            "nullable": true
          },
          "raw": {
            "type": "string",
            "description": "The raw html used for a form post as sent by sky pay.\n            ",
            "nullable": true
          },
          "paymentTransactionKey": {
            "type": "string",
            "description": "The payment transaction key.\n            ",
            "nullable": true
          }
        }
      },
      "DirectCurrencyConversionOfferStatus": {
        "type": "integer",
        "description": "Enumeration that determines the status of a DCC offer.\n            \n\n0 = DccNotOffered\n1 = DccOfferRejected\n2 = DccOfferAccepted",
        "x-enumNames": [
          "DccNotOffered",
          "DccOfferRejected",
          "DccOfferAccepted"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIDictionaryOfStringAndPaymentMethod": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "description": "The payment method model.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodCode",
          "name"
        ],
        "properties": {
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code for this payment method.\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "allowDeposit": {
            "type": "boolean",
            "description": "The allow deposit flag for this payment method.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          },
          "allowZeroAmount": {
            "type": "boolean",
            "description": "The allow zero amount flag for this payment method.\n            "
          },
          "commissionable": {
            "type": "boolean",
            "description": "The commissionable flag for this payment method.\n            "
          },
          "dccType": {
            "description": "The DCC type for this payment method.\n            ",
            "$ref": "#/components/schemas/DccType"
          },
          "disallowPartialRefund": {
            "type": "boolean",
            "description": "The disallow partial refund flag for this payment method.\n            "
          },
          "feeCode": {
            "type": "string",
            "description": "The fee code for this payment method.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for this payment method.\n            "
          },
          "maxInstallments": {
            "type": "integer",
            "description": "The max installments for this payment method.\n            "
          },
          "name": {
            "type": "string",
            "description": "The name for this payment method.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "paymentMethodFields": {
            "type": "object",
            "description": "The payment method fields for this payment method.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PaymentMethodField"
            }
          },
          "paymentMethodType": {
            "description": "The payment method type for this payment method.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "paymentRefundType": {
            "description": "The payment refund type for this payment method.\n            ",
            "$ref": "#/components/schemas/PaymentRefundType"
          },
          "proportionalRefund": {
            "type": "boolean",
            "description": "The proportional refund flag for this payment method.\n            "
          },
          "refundableByAgent": {
            "type": "boolean",
            "description": "The refundable by agent flag for this payment method.\n            "
          },
          "refundCurrencyControl": {
            "description": "The refund currency control for this payment method.\n            ",
            "$ref": "#/components/schemas/RefundCurrencyControl"
          },
          "restrictionHours": {
            "type": "integer",
            "description": "The hours of restriction for this payment method.\n            "
          },
          "systemControlled": {
            "type": "boolean",
            "description": "The system controlled flag for this payment method.\n            "
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace queue code for this payment method.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "validationRequired": {
            "type": "boolean",
            "description": "The validation required flag for this payment method.\n            "
          }
        }
      },
      "DccType": {
        "type": "integer",
        "description": "Dynamic Currency Conversion (DCC) types.\n            \n\n0 = None\n1 = ZeroRate\n2 = FullAmount",
        "x-enumNames": [
          "None",
          "ZeroRate",
          "FullAmount"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PaymentMethodField": {
        "type": "object",
        "description": "The payment method field model.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodFieldCode",
          "name",
          "paymentMethodCode"
        ],
        "properties": {
          "paymentMethodFieldCode": {
            "type": "string",
            "description": "The code for this payment field\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "bookingPaymentField": {
            "description": "The field category for this payment field.\n            ",
            "$ref": "#/components/schemas/BookingPaymentField"
          },
          "name": {
            "type": "string",
            "description": "The name of this payment field\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "ordinal": {
            "type": "integer",
            "description": "The order number for this payment field.\n            "
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code for this payment field.\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "paymentMethodType": {
            "description": "The payment method type for this payment field.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "persistData": {
            "type": "boolean",
            "description": "The persist data flag for this payment field.\n            "
          },
          "refundUiState": {
            "description": "The refund ui state for this payment field.\n            ",
            "$ref": "#/components/schemas/RefundState"
          },
          "requiredType": {
            "description": "The required type for this payment field.\n            ",
            "$ref": "#/components/schemas/RequiredType"
          },
          "valueMaxLength": {
            "type": "integer",
            "description": "The value max length for this payment field.\n            "
          },
          "valueMinLength": {
            "type": "integer",
            "description": "The value min length for this payment field.\n            "
          },
          "valueRegEx": {
            "type": "string",
            "description": "The Regular Expression for this payment field.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "valueType": {
            "description": "The value type for this payment field.\n            ",
            "$ref": "#/components/schemas/ValueType"
          }
        }
      },
      "BookingPaymentField": {
        "type": "integer",
        "description": "This enum represents payment field categories.\n            \n\n0 = Miscellaneous\n1 = AccountNumber\n2 = Amount\n3 = ExpirationDate\n4 = CurrencyCode\n5 = PaymentText\n6 = PrepaidApprovalCode\n7 = Deposit",
        "x-enumNames": [
          "Miscellaneous",
          "AccountNumber",
          "Amount",
          "ExpirationDate",
          "CurrencyCode",
          "PaymentText",
          "PrepaidApprovalCode",
          "Deposit"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "RefundState": {
        "type": "integer",
        "description": "Enumeration representing the refund ui state.\n            \n\n0 = Enabled\n1 = Disabled\n2 = Hidden",
        "x-enumNames": [
          "Enabled",
          "Disabled",
          "Hidden"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "RequiredType": {
        "type": "integer",
        "description": "This enum represents the state of a payment field.\n            \n\n0 = Required\n1 = Optional\n2 = NotAllowed",
        "x-enumNames": [
          "Required",
          "Optional",
          "NotAllowed"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ValueType": {
        "type": "integer",
        "description": "This enum represents the value type of an input box.\n            \n\n0 = Unknown\n1 = String\n2 = UpperCaseString\n3 = Numeric\n4 = Alphanumeric\n5 = Amount\n6 = Date\n7 = Mod10\n8 = Name\n9 = Address\n10 = State\n11 = Zip\n12 = Country\n13 = City\n14 = Boolean\n15 = Email",
        "x-enumNames": [
          "Unknown",
          "String",
          "UpperCaseString",
          "Numeric",
          "Alphanumeric",
          "Amount",
          "Date",
          "Mod10",
          "Name",
          "Address",
          "State",
          "Zip",
          "Country",
          "City",
          "Boolean",
          "Email"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15
        ]
      },
      "PaymentRefundType": {
        "type": "integer",
        "description": "Enum representing whether or not a payment can be refunded.\n            \n\n0 = NotAllowed\n1 = LineItemLevel\n2 = AccountLevel\n3 = BookingLevel",
        "x-enumNames": [
          "NotAllowed",
          "LineItemLevel",
          "AccountLevel",
          "BookingLevel"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "RefundCurrencyControl": {
        "type": "integer",
        "description": "Enum representing the currency control on a refund.\n            \n\n0 = UseCollectedCurrency\n1 = UseQuotedCurrency",
        "x-enumNames": [
          "UseCollectedCurrency",
          "UseQuotedCurrency"
        ],
        "enum": [
          0,
          1
        ]
      },
      "PaymentReversalRequest": {
        "type": "object",
        "description": "Defines information needed for reversing a payment in the state booking.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "paymentMethodCode"
        ],
        "properties": {
          "parentPaymentKey": {
            "type": "string",
            "description": "The payment identifier used if this refund is being reversed from an existing payment, which in turn, creates a line item refund.\nWhen set to null, a booking level refund is made instead.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal"
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "Payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "accountTransactionCode": {
            "type": "string",
            "description": "The account transaction code associated with the account.\n            ",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The payment refund comment.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPayment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPayment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Payment"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PaymentRequest": {
        "type": "object",
        "description": "Defines a request to apply payment to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfVoucherInformation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VoucherInformation"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "VoucherInformation": {
        "type": "object",
        "description": "Voucher information. This model describes a voucher information after being queried by the voucher code.\n            ",
        "additionalProperties": false,
        "properties": {
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The amount of foreign currency.\n            ",
            "format": "decimal"
          },
          "type": {
            "description": "The voucher type.\n            ",
            "$ref": "#/components/schemas/VoucherType"
          },
          "password": {
            "type": "string",
            "description": "The password for the voucher.\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator associated with the voucher.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "description": "The voucher transactions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            }
          },
          "voucherKey": {
            "type": "string",
            "description": "The voucher key.\n            ",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "The reference number for the voucher.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The voucher status.\n            ",
            "$ref": "#/components/schemas/VoucherStatus"
          },
          "available": {
            "type": "number",
            "description": "The availability count of the voucher.\n            ",
            "format": "decimal"
          },
          "firstName": {
            "type": "string",
            "description": "The first name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The person key associated with the voucher.\n            ",
            "nullable": true
          },
          "voucherIssuanceKey": {
            "type": "string",
            "description": "The voucher issuance key.\n            ",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "calculatedAmount": {
            "type": "number",
            "description": "The total amount of the booking that is payable by the voucher.\n            ",
            "format": "decimal"
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number associated to the voucher.\n            ",
            "nullable": true
          },
          "foreignCalculatedAmount": {
            "type": "number",
            "description": "The total amount of the booking that is payable by the voucher,\nconverted to a foreign currency specified by the ForeignCalculatededCurrencyCode.\nUsed if the booking and voucher are in different currencies.\n            ",
            "format": "decimal"
          },
          "foreignCalculatededCurrencyCode": {
            "type": "string",
            "description": "The currency code for used with the ForeignCalculatedAmount field.\nUsed if the booking and voucher are in different currencies, this would be the currency code being converted to.\n            ",
            "nullable": true
          },
          "foreignReversableAmount": {
            "type": "number",
            "description": "Returns the original available amount of the voucher, converted to a foreign currency.\nUsed if the booking and voucher are in different currencies.\n            ",
            "format": "decimal"
          },
          "nameRestriction": {
            "description": "The name restriction for the voucher.\n            ",
            "$ref": "#/components/schemas/VoucherNameRestriction"
          },
          "redeemableAmount": {
            "type": "number",
            "description": "The total amount of the booking that the voucher can pay for up to the full amount of the voucher.\n            ",
            "format": "decimal"
          },
          "reversableAmount": {
            "type": "number",
            "description": "Returns the original available amount of the voucher.\n            ",
            "format": "decimal"
          },
          "foreignAvailableCurrencyCode": {
            "type": "string",
            "description": "The currency code for used with the ForeignAvailableAmount field.\nUsed if the booking and voucher are in different currencies, this\nwould be the currency code being converted to.\n            ",
            "nullable": true
          },
          "availableAmount": {
            "type": "number",
            "description": "The total amount available on the voucher for use in the currency that the booking in state is in.\n            ",
            "format": "decimal"
          }
        }
      },
      "VoucherType": {
        "type": "integer",
        "description": "Defines the type of voucher.\n            \n\n0 = Credit\n1 = SingleUseCredit\n2 = Service\n3 = SingleUse\n4 = MultiUse\n5 = SingleUseNegativeAdjustment",
        "x-enumNames": [
          "Credit",
          "SingleUseCredit",
          "Service",
          "SingleUse",
          "MultiUse",
          "SingleUseNegativeAdjustment"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "VoucherTransaction": {
        "type": "object",
        "description": "The voucher transaction model.\n            ",
        "additionalProperties": false,
        "properties": {
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The amount of foreign currency.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "voucherTransactionKey": {
            "type": "string",
            "description": "The voucher transaction key.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The voucher transaction type.\n            ",
            "$ref": "#/components/schemas/VoucherTransactionType"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator associated with the voucher transaction.\n            ",
            "nullable": true
          }
        }
      },
      "VoucherTransactionType": {
        "type": "integer",
        "description": "Defines voucher transaction type.\n            \n\n0 = Debit\n1 = Credit\n2 = Void\n3 = Reinstate\n4 = Adjustment",
        "x-enumNames": [
          "Debit",
          "Credit",
          "Void",
          "Reinstate",
          "Adjustment"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "VoucherStatus": {
        "type": "integer",
        "description": "Defines the status of a voucher.\n            \n\n0 = Available\n1 = Void\n2 = Redeemed\n3 = Expired",
        "x-enumNames": [
          "Available",
          "Void",
          "Redeemed",
          "Expired"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "VoucherNameRestriction": {
        "type": "integer",
        "description": "Defines how the name on the voucher will be validated.\n            \n\n0 = None\n1 = MustBePassenger\n2 = MustBePassengerOrContact",
        "x-enumNames": [
          "None",
          "MustBePassenger",
          "MustBePassengerOrContact"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AutoAssignRequest": {
        "type": "object",
        "description": "Defines the auto assign seat request.\n            ",
        "additionalProperties": false,
        "properties": {
          "waiveFee": {
            "type": "boolean",
            "description": "The flag indicating to waive the seat fees if permissions permit.\n            ",
            "nullable": true
          },
          "inventoryControl": {
            "description": "Indicates the type of hold placed on a unit.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UnitInventoryControlType"
          },
          "seatAssignmentMode": {
            "description": "The seat assignment mode.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatAssignmentMode"
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Optional collection currency code. If different from the booking currency,\nfees in the collected currency will be returned if a currency conversion configuration exists.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feePricingMode": {
            "description": "Indicates if the seat is to be sold in currency or points.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "preferences": {
            "description": "The list of seat preferences for the primary passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatPreferences"
          },
          "seatedNearPrimary": {
            "type": "array",
            "description": "The list of passenger keys for seating assignments near the primary passenger.\nOnly passengers on the list and the primary passenger will be assigned\nseats. If the list is empty, seats will be assigned to all passengers.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "changeOfGaugeDetails": {
            "description": "The change of gauge details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChangeOfGaugeDetails"
          }
        }
      },
      "SeatAssignmentMode": {
        "type": "integer",
        "description": "Represents the seat assignment mode.\n            \n\n0 = AutoDetermine\n1 = PreSeatAssignment\n2 = WebCheckIn",
        "x-enumNames": [
          "AutoDetermine",
          "PreSeatAssignment",
          "WebCheckIn"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ChangeOfGaugeDetails": {
        "type": "object",
        "description": "Defines the change of gauge details.\n            ",
        "additionalProperties": false,
        "properties": {
          "equipmentType": {
            "type": "string",
            "description": "The equipment type of the legs to be auto-assigned seats. This is used for change\nof gauge (meaning that the legs have different equipment) and works in conjunction\nwith EquipmentTypeSuffix. If both are null or empty, or segment is not change of gauge,\nseats will be assigned to all legs. Else, seats will be assigned to legs matching\nthis EquipmentType and the EquipmentTypeSuffix.\n            ",
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The equipment type suffix of the legs to be auto-assigned seats. This is used for\nchange of gauge (meaning that the legs have different equipment) and works in\nconjunction with EquipmentType. If both are null or empty, or segment is not\nchange of gauge, seats will be assigned to all legs. Else, seats will be assigned\nto legs matching the EquipmentType and this EquipmentTypeSuffix.\n            ",
            "nullable": true
          }
        }
      },
      "ModifySegmentStatus": {
        "type": "integer",
        "description": "The status in which the segment can be changed to.\n            \n\n0 = UnknownStatus\n1 = NoActionTaken\n2 = UnableToConfirmSegment\n3 = HeldConfirmed\n4 = HeldCancelled\n5 = ConfirmedTimeChange",
        "x-enumNames": [
          "UnknownStatus",
          "NoActionTaken",
          "UnableToConfirmSegment",
          "HeldConfirmed",
          "HeldCancelled",
          "ConfirmedTimeChange"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "SsrsRequest": {
        "type": "object",
        "description": "Request to add multiple leg, segment, or journey Ssr's.\n            ",
        "additionalProperties": false,
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "description": "Ssr requests by type of request (Journey, Leg, Segment).\n            ",
            "items": {
              "$ref": "#/components/schemas/SsrsByType"
            }
          },
          "forceWaveOnSell": {
            "type": "boolean",
            "description": "Force wave on sell. Default value is false.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Set the currency code if different than the booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feePricingMode": {
            "description": "Indicates whether the SSR is meant to be sold in points or in currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          }
        }
      },
      "SsrsByType": {
        "type": "object",
        "description": "Ssrs by type model allows multiple Ssr requests for a specific type.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "market",
          "items"
        ],
        "properties": {
          "type": {
            "description": "Defines the duration type of the Ssr.\n            ",
            "$ref": "#/components/schemas/SsrDurationType"
          },
          "market": {
            "description": "Market for the corresponding type.\n            ",
            "$ref": "#/components/schemas/MarketInformation"
          },
          "items": {
            "type": "array",
            "description": "SSR request items.\n            ",
            "items": {
              "$ref": "#/components/schemas/SsrRequest"
            }
          }
        }
      },
      "SsrRequest": {
        "type": "object",
        "description": "SSR request for a single Ssr.\n            ",
        "additionalProperties": false,
        "required": [
          "ssrCode",
          "passengerKey"
        ],
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The Ssr code.\n            ",
            "minLength": 1
          },
          "count": {
            "type": "integer",
            "description": "The number of items to include. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Notes associated with this Ssr.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "minLength": 1
          },
          "inBundle": {
            "type": "boolean",
            "description": "Indicates if the SSR is part of a bundle.\n            "
          }
        }
      },
      "PassengerSsrKey": {
        "type": "object",
        "description": "The model for the data needed to identify a passenger ssr key.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrDuration": {
            "description": "The length of the Ssr duration.\n            ",
            "$ref": "#/components/schemas/SsrDurationType"
          },
          "ssrCode": {
            "type": "string",
            "description": "The passenger SSR code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger key.\n            ",
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The passenger SSR number.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0,
            "nullable": true
          },
          "market": {
            "description": "The market for either the leg or segment depending on the Ssr type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "IJsonResponseOfIListOfPassengerSsr": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSsr"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerSsr": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerSsr"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfDateTime": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "The payload data.\n            ",
            "format": "date-time"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TicketRequest": {
        "type": "object",
        "description": "A ticket request.\n            ",
        "additionalProperties": false,
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number.\n            ",
            "maxLength": 14,
            "minLength": 13,
            "nullable": true
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The infant ticket number.\n            ",
            "maxLength": 14,
            "minLength": 13,
            "nullable": true
          },
          "ticketIndicator": {
            "description": "The ticket indicator.\n            ",
            "$ref": "#/components/schemas/TicketIndicatorCode"
          },
          "ticketStatus": {
            "description": "The ticket status.\n            ",
            "$ref": "#/components/schemas/TicketStatusCode"
          }
        }
      },
      "IJsonResponseOfTravelDocumentRequirements": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelDocumentRequirements"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelDocumentRequirements": {
        "type": "object",
        "description": "Defines the type of sale values.\n            ",
        "additionalProperties": false,
        "properties": {
          "atLeastOneDocumentRequired": {
            "type": "boolean",
            "description": "True if at least one travel document code in the travel document type codes list\nis required.\n            "
          },
          "travelDocumentTypeCodes": {
            "type": "array",
            "description": "The combined list of acceptable travel document type codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TripDowngradeRequest": {
        "type": "object",
        "description": "Defines a trip downgrade request.\n            ",
        "additionalProperties": false,
        "required": [
          "segmentKeys"
        ],
        "properties": {
          "segmentKeys": {
            "type": "array",
            "description": "The collection of segments that can be downgraded.\n            ",
            "items": {
              "type": "string"
            }
          },
          "inventoryControl": {
            "description": "The reserving inventory action of the upgrade once sold by the system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryControlType"
          }
        }
      },
      "IJsonResponseOfIListOfUpgradeSegment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpgradeSegment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UpgradeSegment": {
        "type": "object",
        "description": "Defines a available upgrade segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "transportationIdentifier": {
            "description": "The segments flight designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "departureTime": {
            "type": "string",
            "description": "The standard time of departure.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureStation": {
            "type": "string",
            "description": "The departure station.\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "The arrival station.\n            ",
            "nullable": true
          },
          "upgrades": {
            "type": "array",
            "description": "The list of available upgrades.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Upgrade"
            }
          }
        }
      },
      "Upgrade": {
        "type": "object",
        "description": "Defines the upgrade information.\n            ",
        "additionalProperties": false,
        "properties": {
          "upgradeKey": {
            "type": "string",
            "description": "The upgrade key.\n            ",
            "nullable": true
          },
          "originalClassOfService": {
            "type": "string",
            "description": "The current/original class of service.\n            ",
            "nullable": true
          },
          "upgradeClassOfService": {
            "type": "string",
            "description": "The new/upgrade class of service.\n            ",
            "nullable": true
          },
          "available": {
            "type": "integer",
            "description": "The count of upgrades available.\n            "
          },
          "fee": {
            "description": "The passenger fee amount.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerFee"
          }
        }
      },
      "TripUpgradeBaseRequest": {
        "type": "object",
        "description": "Defines the trip upgrade request.\n            ",
        "additionalProperties": false,
        "properties": {
          "inventoryControl": {
            "description": "The reserving inventory action of the upgrade once sold by the system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryControlType"
          },
          "overrideFee": {
            "type": "boolean",
            "description": "Flag indicating to override the fee if permissions allow it.\n            ",
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The option currency code if different than the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "TripUpgradeRequest": {
        "type": "object",
        "description": "Defines the trip upgrade request.\n            ",
        "additionalProperties": false,
        "required": [
          "upgradeKeys"
        ],
        "properties": {
          "inventoryControl": {
            "description": "The reserving inventory action of the upgrade once sold by the system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryControlType"
          },
          "overrideFee": {
            "type": "boolean",
            "description": "Flag indicating to override the fee if permissions allow it.\n            ",
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The option currency code if different than the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "upgradeKeys": {
            "type": "array",
            "description": "The list of segment upgrades.\n            ",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfVoucherConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherConfiguration"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "VoucherConfiguration": {
        "type": "object",
        "description": "The voucher configuration model.\n            ",
        "additionalProperties": false,
        "required": [
          "configurationCode",
          "name",
          "description",
          "type",
          "issuanceType",
          "expirationType"
        ],
        "properties": {
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The voucher configuration note.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The voucher configuration name.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "description": {
            "type": "string",
            "description": "The voucher configuration description.\n            ",
            "maxLength": 128,
            "minLength": 0
          },
          "type": {
            "description": "The voucher type.\n            ",
            "$ref": "#/components/schemas/VoucherType"
          },
          "issuanceType": {
            "description": "The issuance type.\n            ",
            "$ref": "#/components/schemas/IssuanceType"
          },
          "usageTypes": {
            "type": "array",
            "description": "The voucher usage types.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherUsageType"
            }
          },
          "tripType": {
            "description": "The voucher trip type.\n            ",
            "$ref": "#/components/schemas/VoucherTripType"
          },
          "expirationControl": {
            "description": "The voucher expiration control.\n            ",
            "$ref": "#/components/schemas/VoucherExpirationControl"
          },
          "expirationType": {
            "description": "The voucher expiration type.\n            ",
            "$ref": "#/components/schemas/VoucherExpirationType"
          },
          "expirationDays": {
            "type": "integer",
            "description": "The voucher expiration days.\n            "
          },
          "amountControl": {
            "description": "The voucher amount control.\n            ",
            "$ref": "#/components/schemas/AmountControl"
          },
          "calculatedAmountControl": {
            "description": "The voucher calculated amount control.\n            ",
            "$ref": "#/components/schemas/CalculatedAmountControl"
          },
          "maximumPassengers": {
            "type": "integer",
            "description": "The voucher maximum passenger total.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          },
          "maximumVouchersPerBooking": {
            "type": "integer",
            "description": "The voucher maximum number of vouchers per booking.\n            "
          },
          "travelDowRestriction": {
            "type": "array",
            "description": "The voucher day of week travel restrictions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "nameRestriction": {
            "description": "The voucher name restriction.\n            ",
            "$ref": "#/components/schemas/VoucherNameRestriction"
          },
          "isRecordLocatorRequired": {
            "type": "boolean",
            "description": "The flag to indicate if a record locator is required.\n            "
          },
          "isCustomerNumberRequired": {
            "type": "boolean",
            "description": "The flag to indicate if a customer number is required.\n            "
          },
          "nextReferenceNumber": {
            "type": "integer",
            "description": "The next reference number for the voucher configuration.\n            ",
            "format": "int64"
          },
          "maximumAmountIsPerPassenger": {
            "type": "boolean",
            "description": "Flag to indicate if the maximum amount is per passenger or not.\n            "
          },
          "calculatedPercentage": {
            "type": "number",
            "description": "The calculated percentage.\n            ",
            "format": "decimal"
          },
          "issuanceControl": {
            "description": "The voucher issuance control.\n            ",
            "$ref": "#/components/schemas/VoucherIssuanceControl"
          },
          "fareClasses": {
            "type": "array",
            "description": "The voucher configuration fare classes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherConfigurationFareClass"
            }
          },
          "marketRestrictions": {
            "type": "array",
            "description": "The voucher configuration market restrictions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherMarketRestriction"
            }
          },
          "travelRestrictions": {
            "type": "array",
            "description": "The voucher configuration travel restrictions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherTravelRestriction"
            }
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time"
          },
          "currencyCode": {
            "type": "string",
            "description": "The voucher currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "maximumAmount": {
            "type": "number",
            "description": "The maximum voucher amount.\n            ",
            "format": "decimal"
          },
          "createdDate": {
            "type": "string",
            "description": "The voucher creation date.\n            ",
            "format": "date-time"
          }
        }
      },
      "IssuanceType": {
        "type": "integer",
        "description": "The issuance type.\n            \n\n0 = Individual\n1 = Batch\n2 = FlightBatch\n3 = HighVolumeBatch\n4 = OdBatch",
        "x-enumNames": [
          "Individual",
          "Batch",
          "FlightBatch",
          "HighVolumeBatch",
          "OdBatch"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "VoucherUsageType": {
        "type": "integer",
        "description": "Voucher usage type specifies what parts of a booking this voucher can pay for.\n            \n\n0 = None\n1 = Fares\n2 = Taxes\n3 = TravelFees\n4 = ServiceFees\n5 = PenaltyFees\n6 = SsrFees\n7 = NonFlightServiceFees\n8 = UpgradeFees\n9 = SeatFees\n10 = SpoilageFees\n11 = NameChangeFees\n12 = ConvenienceFees\n13 = Car\n14 = Hotel\n15 = Insurance\n16 = Activities",
        "x-enumNames": [
          "None",
          "Fares",
          "Taxes",
          "TravelFees",
          "ServiceFees",
          "PenaltyFees",
          "SsrFees",
          "NonFlightServiceFees",
          "UpgradeFees",
          "SeatFees",
          "SpoilageFees",
          "NameChangeFees",
          "ConvenienceFees",
          "Car",
          "Hotel",
          "Insurance",
          "Activities"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ]
      },
      "VoucherTripType": {
        "type": "integer",
        "description": "The types of trips a voucher could be user for.\n            \n\n0 = Any\n1 = OneWay\n2 = RoundTrip\n3 = None",
        "x-enumNames": [
          "Any",
          "OneWay",
          "RoundTrip",
          "None"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "VoucherExpirationControl": {
        "type": "integer",
        "description": "The voucher expiration control.\n            \n\n0 = None\n1 = Fixed\n2 = FixedAtIssuance\n3 = Calculated",
        "x-enumNames": [
          "None",
          "Fixed",
          "FixedAtIssuance",
          "Calculated"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "VoucherExpirationType": {
        "type": "integer",
        "description": "The voucher expiration type.\n            \n\n0 = TravelBy\n1 = TravelCompleteBy\n2 = BookingBy",
        "x-enumNames": [
          "TravelBy",
          "TravelCompleteBy",
          "BookingBy"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AmountControl": {
        "type": "integer",
        "description": "The amount control enumeration.\n            \n\n0 = Fixed\n1 = FixedAtIssuance\n2 = Calculated",
        "x-enumNames": [
          "Fixed",
          "FixedAtIssuance",
          "Calculated"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "CalculatedAmountControl": {
        "type": "integer",
        "description": "Represents the different types of service a voucher could be used for.\n            \n\n0 = Default\n1 = Fares\n2 = FaresPlusTaxes\n3 = FaresTaxesAndFees\n4 = FaresTaxesFeesAndOtherServices",
        "x-enumNames": [
          "Default",
          "Fares",
          "FaresPlusTaxes",
          "FaresTaxesAndFees",
          "FaresTaxesFeesAndOtherServices"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "VoucherIssuanceControl": {
        "type": "integer",
        "description": "The voucher issuance control enumeration.\n            \n\n0 = IssuedToPassengers\n1 = IssuedToContact",
        "x-enumNames": [
          "IssuedToPassengers",
          "IssuedToContact"
        ],
        "enum": [
          0,
          1
        ]
      },
      "VoucherConfigurationFareClass": {
        "type": "object",
        "description": "The voucher configuration model.\n            ",
        "additionalProperties": false,
        "properties": {
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The voucher configuration fare class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "VoucherMarketRestriction": {
        "type": "object",
        "description": "The voucher market restriction model.\n            ",
        "additionalProperties": false,
        "properties": {
          "voucherConfigurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the voucher restriction.\n            "
          },
          "restrictionType": {
            "description": "The market restriction type.\n            ",
            "$ref": "#/components/schemas/MarketRestrictionType"
          },
          "directionality": {
            "description": "The directionality of the voucher market restriction.\n            ",
            "$ref": "#/components/schemas/Directionality"
          },
          "regionType": {
            "description": "The region type.\n            ",
            "$ref": "#/components/schemas/RegionType"
          },
          "regionCode": {
            "type": "string",
            "description": "The region code.\n            ",
            "nullable": true
          },
          "travelRegionType": {
            "description": "The travel region type.\n            ",
            "$ref": "#/components/schemas/RegionType"
          },
          "travelRegionCode": {
            "type": "string",
            "description": "The travel region code.\n            ",
            "nullable": true
          }
        }
      },
      "MarketRestrictionType": {
        "type": "integer",
        "description": "The market restriction type enumeration.\n            \n\n0 = MustBeOne\n1 = MustNot",
        "x-enumNames": [
          "MustBeOne",
          "MustNot"
        ],
        "enum": [
          0,
          1
        ]
      },
      "VoucherTravelRestriction": {
        "type": "object",
        "description": "The voucher configuration model.\n            ",
        "additionalProperties": false,
        "properties": {
          "voucherConfigurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the voucher restriction.\n            "
          },
          "restrictionType": {
            "description": "The travel restriction type.\n            ",
            "$ref": "#/components/schemas/TravelRestrictionType"
          },
          "initialTravelDate": {
            "type": "string",
            "description": "The beginning travel date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "endTravelDate": {
            "type": "string",
            "description": "The ending travel date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TravelRestrictionType": {
        "type": "integer",
        "description": "The travel restriction type.\n            \n\n0 = Default\n1 = Blackout\n2 = Season",
        "x-enumNames": [
          "Default",
          "Blackout",
          "Season"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfVoucherConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VoucherConfiguration"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfVoucher": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Voucher"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Voucher": {
        "type": "object",
        "description": "The voucher model.\n            ",
        "additionalProperties": false,
        "properties": {
          "voucherKey": {
            "type": "string",
            "description": "The voucher key.\n            ",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "The reference number for the voucher.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The voucher status.\n            ",
            "$ref": "#/components/schemas/VoucherStatus"
          },
          "available": {
            "type": "number",
            "description": "The availability count of the voucher.\n            ",
            "format": "decimal"
          },
          "firstName": {
            "type": "string",
            "description": "The first name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The person key associated with the voucher.\n            ",
            "nullable": true
          },
          "voucherIssuanceKey": {
            "type": "string",
            "description": "The voucher issuance key.\n            ",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The amount of foreign currency.\n            ",
            "format": "decimal"
          },
          "type": {
            "description": "The voucher type.\n            ",
            "$ref": "#/components/schemas/VoucherType"
          },
          "password": {
            "type": "string",
            "description": "The password for the voucher.\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator associated with the voucher.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "description": "The voucher transactions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            }
          }
        }
      },
      "IJsonResponseOfIListOfVoucherItem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherItem"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "VoucherItem": {
        "type": "object",
        "description": "The voucher item model.\n            ",
        "additionalProperties": false,
        "properties": {
          "voucherKey": {
            "type": "string",
            "description": "The voucher key.\n            ",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "The reference number for the voucher.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The voucher status.\n            ",
            "$ref": "#/components/schemas/VoucherStatus"
          },
          "available": {
            "type": "number",
            "description": "The availability count of the voucher.\n            ",
            "format": "decimal"
          },
          "firstName": {
            "type": "string",
            "description": "The first name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name associated with the voucher.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The person key associated with the voucher.\n            ",
            "nullable": true
          },
          "voucherIssuanceKey": {
            "type": "string",
            "description": "The voucher issuance key.\n            ",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "createdDate": {
            "type": "string",
            "description": "The created date for the voucher item.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfVouchersSummaryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VouchersSummaryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "VouchersSummaryResponse": {
        "type": "object",
        "description": "The voucher by date search response item.\n            ",
        "additionalProperties": false,
        "properties": {
          "lastPageKey": {
            "type": "string",
            "description": "The key for the last item returned from paging.\n            ",
            "nullable": true
          },
          "vouchers": {
            "type": "array",
            "description": "The collection of vouchers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherSummary"
            }
          }
        }
      },
      "VoucherSummary": {
        "type": "object",
        "description": "The voucher summary model.\n            ",
        "additionalProperties": false,
        "properties": {
          "voucherKey": {
            "type": "string",
            "description": "The unique identifier for the voucher.\n            ",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "The voucher reference.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator associated with the voucher.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The optional note associated with the voucher.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of the voucher.\n            ",
            "format": "decimal"
          },
          "expiration": {
            "type": "string",
            "description": "The voucher's expiration.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "VoucherUpdateRequest": {
        "type": "object",
        "description": "The voucher update request.\n            ",
        "additionalProperties": false,
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "The status to update the voucher to.\n            ",
            "$ref": "#/components/schemas/VoucherStatusUpdate"
          }
        }
      },
      "VoucherStatusUpdate": {
        "type": "integer",
        "description": "An enumeration to indicate what status the voucher should\nbe changed to.\n            \n\n0 = Reinstate\n1 = Void",
        "x-enumNames": [
          "Reinstate",
          "Void"
        ],
        "enum": [
          0,
          1
        ]
      },
      "VoucherIssuanceRequest": {
        "type": "object",
        "description": "The voucher issuance request model.\n            ",
        "additionalProperties": false,
        "required": [
          "configurationCode",
          "issuanceReasonCode"
        ],
        "properties": {
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "issuanceReasonCode": {
            "type": "string",
            "description": "The voucher issuance reason code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The voucher issuance note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "market": {
            "description": "Market details associated with the voucher issuance.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VoucherMarketInformation"
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The passenger's first name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The passenger's last name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The person key.\n            ",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The number of vouchers to issue.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "sendFiles": {
            "type": "boolean",
            "description": "Decides whether to send reference files over ftp for a HighVolumeBatch of vouchers.\n            "
          },
          "ssrCode": {
            "type": "string",
            "description": "The SSR filter value in this object.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "VoucherMarketInformation": {
        "type": "object",
        "description": "The voucher market request model.\n            ",
        "additionalProperties": false,
        "required": [
          "destination",
          "origin",
          "departureDate",
          "identifier",
          "carrierCode"
        ],
        "properties": {
          "destination": {
            "type": "string",
            "description": "Gets or sets the leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets the leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2
          },
          "opSuffix": {
            "type": "string",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfVoucherIssuance": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VoucherIssuance"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "VoucherIssuance": {
        "type": "object",
        "description": "The voucher issuance model.\n            ",
        "additionalProperties": false,
        "required": [
          "configurationCode",
          "issuanceReasonCode"
        ],
        "properties": {
          "configurationCode": {
            "type": "string",
            "description": "The voucher configuration code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "issuanceReasonCode": {
            "type": "string",
            "description": "The voucher issuance reason code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The voucher issuance note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "market": {
            "description": "Market details associated with the voucher issuance.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/VoucherMarketInformation"
          },
          "expiration": {
            "type": "string",
            "description": "The voucher expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "voucherIssuanceKey": {
            "type": "string",
            "description": "The voucher issuance key.\n            ",
            "nullable": true
          }
        }
      },
      "PassiveSegmentRequest": {
        "type": "object",
        "description": "Passive segment request represents the data that will be added as a passive segment on a booking.\n            ",
        "additionalProperties": false,
        "required": [
          "carrierCode",
          "flightNumber",
          "classOfService",
          "arrivalTime",
          "departureTime",
          "origin",
          "destination"
        ],
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2
          },
          "flightNumber": {
            "type": "string",
            "description": "The flight number.\n            ",
            "maxLength": 4,
            "minLength": 1
          },
          "opSuffix": {
            "type": "string",
            "description": "The op suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "totalPassengers": {
            "type": "integer",
            "description": "The total number of passengers.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "arrivalTime": {
            "type": "string",
            "description": "The arrival date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "departureTime": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "origin": {
            "type": "string",
            "description": "The origin station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "destination": {
            "type": "string",
            "description": "The destination station.\n            ",
            "maxLength": 3,
            "minLength": 0
          }
        }
      },
      "PassengerRequest": {
        "type": "object",
        "description": "Defines the passenger request details.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerTypeCode"
        ],
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "The passenger customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The passenger's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code associated with the passenger type.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The passenger programs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerProgram"
          },
          "info": {
            "description": "Additional passenger information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          },
          "travelDocuments": {
            "type": "array",
            "description": "Travel Documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelDocumentCreateRequest"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The passengers addresses.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerAddress"
            }
          },
          "infant": {
            "description": "The optional infant associated with this passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Infant"
          },
          "passengerTypeCode": {
            "type": "string",
            "description": "The passenger type code.\n            ",
            "minLength": 1
          }
        }
      },
      "TravelDocumentCreateRequest": {
        "type": "object",
        "description": "Defines a create travel documents request.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode"
        ],
        "properties": {
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "documentTypeCode": {
            "type": "string",
            "description": "The unique travel document type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "issuedByCode": {
            "type": "string",
            "description": "The issuer code for the travel document (country code).\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "Infant": {
        "type": "object",
        "description": "Model representing an infant.\n            ",
        "additionalProperties": false,
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The nationality of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The residentCountry of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPromotionBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromotionBase"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PromotionBase": {
        "type": "object",
        "description": "Defines a promotion base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The promotion code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "isPassengerPromotion": {
            "type": "boolean",
            "description": "The promotion discount is applied at the passenger level.\n            "
          },
          "isBookingPromotion": {
            "type": "boolean",
            "description": "The promotion discount is applied to the entire booking.\n            "
          },
          "description": {
            "type": "string",
            "description": "The description of the promotion.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "activeDate": {
            "type": "string",
            "description": "The date that the promotion becomes active.\n            ",
            "format": "date-time"
          },
          "discontinueDate": {
            "type": "string",
            "description": "The date that the promotion is discontinued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "discontinueFeeCode": {
            "type": "string",
            "description": "The discount fee code representing the calculated discount\nfor the promotion.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "fareTypes": {
            "type": "array",
            "description": "The list of fare types associated with the promotion.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerDiscountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerDiscountLimit": {
            "type": "integer",
            "description": "The passenger discount limit.\n            "
          },
          "passengerDiscountSet": {
            "type": "integer",
            "description": "The passenger discount set.\n            "
          },
          "inventoryControl": {
            "description": "The promotion inventory control.\n            ",
            "$ref": "#/components/schemas/PromotionInventoryControl"
          },
          "totalUnitCount": {
            "type": "integer",
            "description": "The total unit count.\n            "
          },
          "unitsSold": {
            "type": "integer",
            "description": "The total number of units sold.\n            "
          }
        }
      },
      "PromotionInventoryControl": {
        "type": "integer",
        "description": "Enumeration representing promotion inventory control.\n            \n\n0 = Open\n1 = IfAvailable\n2 = Closed",
        "x-enumNames": [
          "Open",
          "IfAvailable",
          "Closed"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "MatchCriteria": {
        "type": "integer",
        "description": "Defines the matching criteria for strings.\n            \n\n0 = StartsWith\n1 = EndsWith\n2 = Contains\n3 = ExactMatch",
        "x-enumNames": [
          "StartsWith",
          "EndsWith",
          "Contains",
          "ExactMatch"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfPromotion": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Promotion"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Promotion": {
        "type": "object",
        "description": "Defines a promotion model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The promotion code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "isPassengerPromotion": {
            "type": "boolean",
            "description": "The promotion discount is applied at the passenger level.\n            "
          },
          "isBookingPromotion": {
            "type": "boolean",
            "description": "The promotion discount is applied to the entire booking.\n            "
          },
          "description": {
            "type": "string",
            "description": "The description of the promotion.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "activeDate": {
            "type": "string",
            "description": "The date that the promotion becomes active.\n            ",
            "format": "date-time"
          },
          "discontinueDate": {
            "type": "string",
            "description": "The date that the promotion is discontinued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "discontinueFeeCode": {
            "type": "string",
            "description": "The discount fee code representing the calculated discount\nfor the promotion.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "fareTypes": {
            "type": "array",
            "description": "The list of fare types associated with the promotion.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerDiscountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "passengerDiscountLimit": {
            "type": "integer",
            "description": "The passenger discount limit.\n            "
          },
          "passengerDiscountSet": {
            "type": "integer",
            "description": "The passenger discount set.\n            "
          },
          "inventoryControl": {
            "description": "The promotion inventory control.\n            ",
            "$ref": "#/components/schemas/PromotionInventoryControl"
          },
          "totalUnitCount": {
            "type": "integer",
            "description": "The total unit count.\n            "
          },
          "unitsSold": {
            "type": "integer",
            "description": "The total number of units sold.\n            "
          },
          "allowedOrganizations": {
            "type": "array",
            "description": "The list of organizations that have access to the promotion.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "settings": {
            "type": "array",
            "description": "The list of applicable promotion settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromotionSetting"
            }
          }
        }
      },
      "PromotionSetting": {
        "type": "object",
        "description": "Defines a promotion setting model.\n            ",
        "additionalProperties": false,
        "required": [
          "promotionSettingTypeCode"
        ],
        "properties": {
          "promotionSettingTypeCode": {
            "type": "string",
            "description": "The promotion setting type code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The setting type name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "In active\n            "
          },
          "schema": {
            "type": "string",
            "description": "The data schema.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          },
          "dataVersion": {
            "type": "integer",
            "description": "The promotion setting data version.\n            "
          },
          "data": {
            "type": "string",
            "description": "The promotion setting data.\n            ",
            "nullable": true
          }
        }
      },
      "BlacklistPaymentEntry": {
        "type": "object",
        "description": "Defines the request for a card used in an external payment to be blacklisted.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentKey",
          "startDate",
          "endDate"
        ],
        "properties": {
          "paymentKey": {
            "type": "string",
            "description": "The unique identifier of the external payment with the card number to be blacklist.\n            ",
            "minLength": 1
          },
          "reason": {
            "description": "The reason why the card is being blacklisted.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BlacklistReasonCode"
          },
          "notes": {
            "type": "string",
            "description": "Additional description of the reason for blacklisting the card.\n            ",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "The start date for the card to be blacklisted.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The date when the card will be removed from the blacklist.\n            ",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "BlacklistReasonCode": {
        "type": "integer",
        "description": "Defines the reason for blacklisting a card used in an external payment.\n            \n\n0 = None\n1 = ChargedBack\n2 = Lost\n3 = Other\n4 = ProvidedByBank\n5 = Stolen",
        "x-enumNames": [
          "None",
          "ChargedBack",
          "Lost",
          "Other",
          "ProvidedByBank",
          "Stolen"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "IJsonResponseOfBlacklistPaymentEntry": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BlacklistPaymentEntry"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPaymentFeeResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentFeeResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PaymentFeeResponse": {
        "type": "object",
        "description": "Defines information for the payment fee response.\n            ",
        "additionalProperties": false,
        "required": [
          "feeAmount"
        ],
        "properties": {
          "feeAmount": {
            "type": "number",
            "description": "The amount being payed.\n            ",
            "format": "decimal"
          },
          "isFixedAmount": {
            "type": "boolean",
            "description": "Is a fixed amount.\n            "
          },
          "passengerFees": {
            "type": "array",
            "description": "Passenger fee details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          }
        }
      },
      "ManualPaymentFeeRequest": {
        "type": "object",
        "description": "Defines information to be converted to the payment request v2 for a payment fee price request\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount being payed.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The optional collected currency code. This will be needed for MCC requests.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number that is used for the PaymentFeePriceRequest\n            ",
            "maxLength": 34,
            "minLength": 0,
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code that is used for the PaymentFeePriceRequest\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PaymentMethodRequest": {
        "type": "object",
        "description": "Defines a request to apply payment to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "paymentMethodCode"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "Payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "deposit": {
            "type": "boolean",
            "description": "Whether to add the payment as a deposit.\n            ",
            "nullable": true
          },
          "waiveFees": {
            "type": "boolean",
            "description": "Determines if the system calculated payment fee should be waived when adding this payment. This flag is for agents\nonly.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPaymentInformation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentInformation"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PaymentInformation": {
        "type": "object",
        "description": "Defines the extra payment information.\n            ",
        "additionalProperties": false,
        "properties": {
          "threeDSecureResponse": {
            "description": "The three d secure response after making an initial payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ThreeDSecureResponse"
          },
          "directCurrencyConversionOffer": {
            "description": "The direct currency conversion offer after making an initial payment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DirectCurrencyConversionOffer"
          }
        }
      },
      "DirectCurrencyConversionOffer": {
        "type": "object",
        "description": "Defines the direct currency conversion offer.\n            ",
        "additionalProperties": false,
        "properties": {
          "dccPaymentTransactionKey": {
            "type": "string",
            "description": "The dcc payment transaction key.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code converted to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "rateValue": {
            "type": "number",
            "description": "The conversion rate value.\n            ",
            "format": "decimal"
          },
          "amount": {
            "type": "number",
            "description": "The conversion rate amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "StoredPaymentRequest": {
        "type": "object",
        "description": "Defines a request to apply person stored payment to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "waiveFees": {
            "type": "boolean",
            "description": "Determines if the system calculated payment fee should be waived when adding this payment. This flag is for agents\nonly.\n            ",
            "nullable": true
          }
        }
      },
      "DccRequestBasev2": {
        "type": "object",
        "description": "Model representing the DCC request without a unique key.\n            ",
        "additionalProperties": false,
        "properties": {
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "offerAccepted": {
            "type": "boolean",
            "description": "Indication of whether the dcc offer was accepted or not. This will default to true if not set.\n            ",
            "nullable": true
          }
        }
      },
      "MccPaymentMethodRequest": {
        "type": "object",
        "description": "Defines information needed for a mcc payment requested to be added to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodCode",
          "amount"
        ],
        "properties": {
          "paymentMethodCode": {
            "type": "string",
            "description": "Payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "deposit": {
            "type": "boolean",
            "description": "Whether to add the payment as a deposit.\n            ",
            "nullable": true
          },
          "waiveFees": {
            "type": "boolean",
            "description": "Determines if the system calculated payment fee should be waived when adding this payment. This flag is for agents\nonly.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "thirdPartyExternalRate": {
            "description": "The third party external rate.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalRate"
          }
        }
      },
      "ExternalRate": {
        "type": "object",
        "description": "External rate model.\n            ",
        "additionalProperties": false,
        "properties": {
          "rateId": {
            "type": "string",
            "description": "The id for this external rate.\n            ",
            "nullable": true
          },
          "quotedCurrency": {
            "type": "string",
            "description": "The quoted currency for this external rate.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collectedCurrency": {
            "type": "string",
            "description": "The collected currency for this external rate.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate for this external rate.\n            ",
            "format": "decimal"
          }
        }
      },
      "MccPaymentRequest": {
        "type": "object",
        "description": "Defines information needed for a mcc stored payment requested to be added to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "thirdPartyExternalRate": {
            "description": "The third party external rate.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalRate"
          }
        }
      },
      "ThreeDSecurePaymentMethodRequestv3": {
        "type": "object",
        "description": "Defines information needed for a generic payment requested with ThreeDSecure validation.\n            ",
        "additionalProperties": false,
        "required": [
          "paRes",
          "paymentTransactionKey"
        ],
        "properties": {
          "paRes": {
            "type": "string",
            "description": "The response that comes back from the bank to verify ThreeDSecure validation.\n            ",
            "minLength": 1
          },
          "paReq": {
            "type": "string",
            "description": "The original payment authorization request.\n            ",
            "nullable": true
          },
          "paymentTransactionKey": {
            "type": "string",
            "description": "The payment transaction key.\n            ",
            "minLength": 1
          }
        }
      },
      "PaymentRefundRequest": {
        "type": "object",
        "description": "Defines information needed for a generic voucher payment requested to be added to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "paymentMethodCode"
        ],
        "properties": {
          "parentPaymentKey": {
            "type": "string",
            "description": "The payment identifier used if this refund is being reversed from an existing payment, which in turn, creates a line item refund.\nWhen set to null, a booking level refund is made instead.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal"
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "Payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "accountTransactionCode": {
            "type": "string",
            "description": "The account transaction code associated with the account.\n            ",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The payment refund comment.\n            ",
            "nullable": true
          }
        }
      },
      "VoucherPaymentRequest": {
        "type": "object",
        "description": "Model to request a voucher payment.\n            ",
        "additionalProperties": false,
        "required": [
          "referenceCode",
          "paymentMethodCode"
        ],
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of currency.\n            ",
            "format": "decimal"
          },
          "referenceCode": {
            "type": "string",
            "description": "The voucher reference code.\n            ",
            "maxLength": 20,
            "minLength": 1
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method to apply the voucher to. This will default to primary voucher code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "overrideRestrictions": {
            "type": "boolean",
            "description": "Whether to override voucher restrictions.\n            ",
            "nullable": true
          }
        }
      },
      "ThreeDSecurePaymentMethodRequestv2": {
        "type": "object",
        "description": "Defines information needed for a generic payment requested with ThreeDSecure validation.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodCode",
          "paRes",
          "amount",
          "paReq",
          "paymentTransactionKey"
        ],
        "properties": {
          "paymentMethodCode": {
            "type": "string",
            "description": "Payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "paRes": {
            "type": "string",
            "description": "The response that comes back from the bank to verify ThreeDSecure validation.\n            ",
            "minLength": 1
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "installments": {
            "type": "integer",
            "description": "The requested number of installments. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "paReq": {
            "type": "string",
            "description": "The original payment authorization request.\n            ",
            "minLength": 1
          },
          "paymentTransactionKey": {
            "type": "string",
            "description": "The payment transaction key.\n            ",
            "minLength": 1
          }
        }
      },
      "ApplyCreditRequest": {
        "type": "object",
        "description": "Defines a request to apply credit from state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of credit.\n            ",
            "format": "decimal"
          },
          "comment": {
            "type": "string",
            "description": "The payment comment, also known as the text details.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndMccCurrencyInformationv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/MccCurrencyInformationv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "MccCurrencyInformationv2": {
        "type": "object",
        "description": "Model with the Mcc curency and rate information.\n            ",
        "additionalProperties": false,
        "properties": {
          "rate": {
            "description": "The external rate.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalRate"
          },
          "currency": {
            "description": "The currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Currencyv2"
          },
          "balanceDue": {
            "type": "number",
            "description": "The total balance due using this currency code.\n            ",
            "format": "decimal"
          }
        }
      },
      "Currencyv2": {
        "type": "object",
        "description": "The currency model.\n            ",
        "additionalProperties": false,
        "required": [
          "currencyCode"
        ],
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The unique currency code of currency.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The description of currency.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "roundFactor": {
            "type": "number",
            "description": "The round factor of currency.\n            ",
            "format": "decimal"
          },
          "displayDigits": {
            "type": "integer",
            "description": "The display digits of currency.\n            ",
            "format": "int32"
          },
          "displayPrefix": {
            "type": "string",
            "description": "The digit prefix of currency.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "displaySuffix": {
            "type": "string",
            "description": "The digit suffix of currency.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the currency is inactive.\n            "
          }
        }
      },
      "ApplyOrganizationCreditRequest": {
        "type": "object",
        "description": "Defines a request to apply organization credit to the booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of credit.\n            ",
            "format": "decimal"
          },
          "comment": {
            "type": "string",
            "description": "The payment comment, also known as the text details.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "waiveFees": {
            "type": "boolean",
            "description": "Determines if the system calculated payment fee should be waived when adding this payment. This flag is for agents\nonly.\n            ",
            "nullable": true
          },
          "organizationCreditCode": {
            "type": "string",
            "description": "The payment method credit code of the agent credit line. If not set, will default to the default organization\ncredit code.\nNOTE: It is not recommended to use a custom agency credit payment as it will not have the same\nbehavior nor be validated like the pre-configured `AG` credit payment.\n            ",
            "nullable": true
          }
        }
      },
      "ApplyCreditAccountRequestv2": {
        "type": "object",
        "description": "Defines a request to apply credit for an account.\n            ",
        "additionalProperties": false,
        "required": [
          "referenceNumber",
          "amount"
        ],
        "properties": {
          "referenceNumber": {
            "type": "string",
            "description": "The account reference. This will be the record locator, customer account number, or organization code depending on\nthe type.\n            ",
            "maxLength": 20,
            "minLength": 1
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "Defines the type of credit being applied.\n            ",
            "$ref": "#/components/schemas/CreditType"
          },
          "amount": {
            "type": "number",
            "description": "The amount of credit.\n            ",
            "format": "decimal"
          },
          "addAsDeposit": {
            "type": "boolean",
            "description": "The flag indicating whether to add credit as a deposit.\n            ",
            "nullable": true
          },
          "waiveFees": {
            "type": "boolean",
            "description": "Determines if the system calculated payment fee should be waived when adding this payment. This flag is for agents\nonly.\n            ",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The payment comment, also known as the text details.\n            ",
            "nullable": true
          }
        }
      },
      "CreditType": {
        "type": "integer",
        "description": "Defines the different possible credit types.\n            \n\n0 = Customer\n1 = Booking\n2 = Organization",
        "x-enumNames": [
          "Customer",
          "Booking",
          "Organization"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfCreditAccount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CreditAccount"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CreditAccount": {
        "type": "object",
        "description": "Defines a credit account information.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountReference": {
            "type": "string",
            "description": "The account reference.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of credit.\n            ",
            "format": "decimal"
          },
          "foreignAmount": {
            "type": "number",
            "description": "The foreign amount of credit.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ApplyBookingCreditRequestv2": {
        "type": "object",
        "description": "Defines a request to apply credit from state.\n            ",
        "additionalProperties": false,
        "required": [
          "request",
          "validation"
        ],
        "properties": {
          "request": {
            "description": "The credit details requested.\n            ",
            "$ref": "#/components/schemas/ApplyCreditRequest"
          },
          "validation": {
            "description": "The query to retrieve the booking.\n            ",
            "$ref": "#/components/schemas/RetrieveBookingv2"
          }
        }
      },
      "RetrieveBookingv2": {
        "type": "object",
        "description": "Model representing the retrieve booking data.\n            ",
        "additionalProperties": false,
        "required": [
          "recordLocator"
        ],
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "Record locator being requested.\n            ",
            "maxLength": 12,
            "minLength": 0
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of a contact.\n            ",
            "maxLength": 266,
            "minLength": 0,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of a passenger or contact.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name of a passenger or contact.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "One of the passengers customer numbers applied.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "departureDate": {
            "type": "string",
            "description": "The first journeys departure date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ApplyCreditAccountRequest": {
        "type": "object",
        "description": "Defines a request to apply credit for an account.\n            ",
        "additionalProperties": false,
        "required": [
          "referenceNumber",
          "amount"
        ],
        "properties": {
          "referenceNumber": {
            "type": "string",
            "description": "The account reference. This will be the record locator, customer account number, or organization code depending on\nthe type.\n            ",
            "maxLength": 20,
            "minLength": 1
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the account.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "Defines the type of credit being applied.\n            ",
            "$ref": "#/components/schemas/CreditType"
          },
          "amount": {
            "type": "number",
            "description": "The amount of credit.\n            ",
            "format": "decimal"
          },
          "addAsDeposit": {
            "type": "boolean",
            "description": "The flag indicating whether to add credit as a deposit.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfSsrPrice": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrPrice"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SsrPrice": {
        "type": "object",
        "description": "Ssr price model.\n            ",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "This key can be either a journey or segment key depending on the ssr type.\n            ",
            "nullable": true
          },
          "passengerFee": {
            "description": "The passenger fee.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerFee"
          },
          "ssrType": {
            "description": "The type of ssr.\n            ",
            "$ref": "#/components/schemas/TravelComponent"
          }
        }
      },
      "ResellSsrRequest": {
        "type": "object",
        "description": "The resell Ssr request.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "Journey to resell the previously cancelled SSRs on.\n            ",
            "nullable": true
          },
          "resellSsrs": {
            "type": "boolean",
            "description": "Indicates whether to resell \"standard\" (non seat-restricted) SSRs.\n            "
          },
          "resellUnitSsrs": {
            "type": "boolean",
            "description": "Indicates whether to resell the unit SSRs, i.e autoassign a new Unit that supports\nthe same SSRs.\n            "
          },
          "waiveSeatFee": {
            "type": "boolean",
            "description": "Indicates whether to waive a seat fee for the new seat assigned in order to resell unit SSRs.\n            "
          }
        }
      },
      "PassengerKeyResponse": {
        "type": "object",
        "description": "Model representing passenger's old and new key in the event of a key change.\n            ",
        "additionalProperties": false,
        "properties": {
          "oldPassengerKey": {
            "type": "string",
            "description": "The old passenger key.\n            ",
            "nullable": true
          },
          "newPassengerKey": {
            "type": "string",
            "description": "The new passenger key.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerTypeCodeEditRequest": {
        "type": "object",
        "description": "A model for a request to update the passenger type code.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerTypeCode"
        ],
        "properties": {
          "passengerTypeCode": {
            "type": "string",
            "description": "The new passenger type code to update the passenger to.\n            ",
            "minLength": 1
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth for the passenger.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The new gender of the passenger.\nOnly required if GDPR is enabled.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          }
        }
      },
      "LoyaltyFilter": {
        "type": "integer",
        "description": "Availability loyalty filter enumeration for filtering the returning fares on availability.\n            \n\n0 = MonetaryOnly\n1 = PointsOnly\n2 = PointsAndMonetary\n3 = PreserveCurrent",
        "x-enumNames": [
          "MonetaryOnly",
          "PointsOnly",
          "PointsAndMonetary",
          "PreserveCurrent"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "AvailabilityRebookRequest": {
        "type": "object",
        "description": "Model representing a availability rebook search.\n            ",
        "additionalProperties": false,
        "required": [
          "criteria"
        ],
        "properties": {
          "criteria": {
            "type": "array",
            "description": "The list of availability search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/AvailabilityByTrip"
            }
          },
          "fareFilters": {
            "description": "The fare search criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFareCriteria"
          },
          "taxesAndFees": {
            "description": "The taxes and fees rollup mode which affects the pricing information.\n            ",
            "$ref": "#/components/schemas/TaxesAndFeesRollupMode"
          },
          "codes": {
            "description": "The code criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCodeCriteria"
          },
          "lowFareMode": {
            "type": "boolean",
            "description": "The flag indicating to search low fare mode (only returning the lowest fare).\n            ",
            "nullable": true
          }
        }
      },
      "AvailabilityByTrip": {
        "type": "object",
        "description": "Defines a availability rebook criteria search which includes all the previous passengers on the booking.\n            ",
        "additionalProperties": false,
        "required": [
          "stations",
          "dates"
        ],
        "properties": {
          "stations": {
            "description": "The station criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityStationCriteria"
          },
          "dates": {
            "description": "The date criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityDateCriteria"
          },
          "flightFilters": {
            "description": "The flight search criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFlightCriteria"
          },
          "type": {
            "description": "Defines the type of fares to be returned.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityType"
          },
          "filters": {
            "description": "The filtering criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFilterCriteria"
          },
          "lowFarePrice": {
            "type": "number",
            "description": "Used to validate that the low fare prices retrieved earlier to match the results now shown in the availability\ncall.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "ssrCollectionsMode": {
            "description": "Determines how and when to return the Ssr nest information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilitySsrCollectionsMode"
          }
        }
      },
      "AvailabilityFilterCriteria": {
        "type": "object",
        "description": "Filter criteria filters the availability responses results.\n            ",
        "additionalProperties": false,
        "properties": {
          "filter": {
            "description": "Filters the type of journeys to return.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFilter"
          },
          "sortKeys": {
            "type": "array",
            "description": "The list of inventory journey sort keys. Used for filtering journeys on the response.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneySortKey"
            }
          },
          "includeAllotments": {
            "type": "boolean",
            "description": "Flag indicating to include allotted fare classes of service.\n            ",
            "nullable": true
          },
          "productClasses": {
            "type": "array",
            "description": "The list of product class codes to filter with.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "travelClasses": {
            "type": "array",
            "description": "The list of travel class codes to filter with.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AvailabilitySsrCollectionsMode": {
        "type": "integer",
        "description": "SSR collection mode determines whethere SSR availability should be checked and returned on availability.\n            \n\n0 = None\n1 = Leg",
        "x-enumNames": [
          "None",
          "Leg"
        ],
        "enum": [
          0,
          1
        ]
      },
      "AvailabilityFareCriteria": {
        "type": "object",
        "description": "Defines a availability fare search criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "classControl": {
            "description": "The fare class control.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareClassControl"
          },
          "maxPrice": {
            "type": "number",
            "description": "The max fare price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The min fare price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "loyalty": {
            "description": "Filters fares based on loyalty.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LoyaltyFilter"
          },
          "types": {
            "type": "array",
            "description": "The list of fare types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "classes": {
            "type": "array",
            "description": "The list of fare classes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FareClassControl": {
        "type": "integer",
        "description": "Fare class control enumeration for controlling the number and type of fares applied to the search response.\n            \n\n0 = LowestFareClass\n1 = CompressByProductClass\n2 = Default",
        "x-enumNames": [
          "LowestFareClass",
          "CompressByProductClass",
          "Default"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "TaxesAndFeesRollupMode": {
        "type": "integer",
        "description": "Indicates how \"all-up\" service charges will be rolled-up in the availability response.\n            \n\n0 = None\n1 = Taxes\n2 = TaxesAndFees",
        "x-enumNames": [
          "None",
          "Taxes",
          "TaxesAndFees"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AvailabilityCodeCriteria": {
        "type": "object",
        "description": "Describes the availability criteria code criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency code for the fares.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "fareDiscountCode": {
            "type": "string",
            "description": "The fare discount code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code to be applied.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The organization to use when evaluating availability of private fares. If specified, this organization code will\nalso be used for evaluation of any organization rules on sales taxes and travel fees (if included in the response).\nIf blank or not specified, the logged-in user's organization will be used.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "currentSourceOrganization": {
            "type": "string",
            "description": "The current source point of sale organization on the PNR. May be blank or unspecified if the source point of sale\norganization has not yet been set on the PNR. If blank or unspecified, the logged-in user's organization will be\nused.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerAddressEditRequestv2": {
        "type": "object",
        "description": "Defines a passenger address edit request v2.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfPassengerAddressEditRequestv2": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerBase": {
        "type": "object",
        "description": "Defines the base passenger details.\n            ",
        "additionalProperties": false,
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "The passenger customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The passenger's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code associated with the passenger type.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The passenger programs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerProgram"
          },
          "info": {
            "description": "Additional passenger information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          }
        }
      },
      "DeltaMapperOfPassengerBase": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "The passenger customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "description": "The passenger's name.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code associated with the passenger type.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The passenger programs.\n            ",
            "nullable": true,
            "properties": {
              "code": {
                "type": "string",
                "description": "The program code.\n            ",
                "maxLength": 3,
                "minLength": 0,
                "pattern": "^[^|]*$",
                "nullable": true
              },
              "levelCode": {
                "type": "string",
                "description": "The program level code.\n            ",
                "maxLength": 3,
                "minLength": 0,
                "pattern": "^[^|]*$",
                "nullable": true
              },
              "number": {
                "type": "string",
                "description": "The program number.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "info": {
            "description": "Additional passenger information.\n            ",
            "nullable": true,
            "properties": {
              "nationality": {
                "type": "string",
                "description": "The passenger nationality.\n            ",
                "maxLength": 2,
                "minLength": 0,
                "nullable": true
              },
              "residentCountry": {
                "type": "string",
                "description": "The resident country.\n            ",
                "maxLength": 2,
                "minLength": 2,
                "nullable": true
              },
              "gender": {
                "description": "Gets or sets passenger gender.\n            ",
                "nullable": true,
                "$ref": "#/components/schemas/Gender"
              },
              "dateOfBirth": {
                "type": "string",
                "description": "The passenger's date of birth.\n            ",
                "format": "date-time",
                "nullable": true
              },
              "familyNumber": {
                "type": "integer",
                "description": "The unique identifier of a family registered in the system.\n            ",
                "nullable": true
              }
            }
          }
        }
      },
      "IJsonResponseOfDirectCurrencyConversionAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DirectCurrencyConversionAvailability"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DirectCurrencyConversionAvailability": {
        "type": "object",
        "description": "Defines a direct currency conversion availability model.\n            ",
        "additionalProperties": false,
        "properties": {
          "dccKey": {
            "type": "string",
            "description": "The direct currency conversion key.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code converting available to convert to.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The conversion rate value.\n            ",
            "format": "decimal"
          },
          "amount": {
            "type": "number",
            "description": "The conversion rate amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "IJsonResponseOfBoardingPassesCollectionv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassesCollectionv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BoardingPassesCollectionv2": {
        "type": "object",
        "description": "Defines the boarding passes base that contains all the common boarding pass details that is not specific to bar\ncode type.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator in reference.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "contactPhoneNumber": {
            "type": "string",
            "description": "The booking contacts phone number.\n            ",
            "nullable": true
          },
          "boardingPasses": {
            "type": "array",
            "description": "The collection of boarding passes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassv2"
            }
          }
        }
      },
      "BoardingPassv2": {
        "type": "object",
        "description": "Defines the top level boarding pass details.\n            ",
        "additionalProperties": false,
        "properties": {
          "userName": {
            "type": "string",
            "description": "The user name of the logged in user.\n            ",
            "nullable": true
          },
          "iataCode": {
            "type": "string",
            "description": "The IATA code.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The acting fare basis code.\n            ",
            "nullable": true
          },
          "fareClass": {
            "type": "string",
            "description": "The acting fare class.\n            ",
            "nullable": true
          },
          "baseFare": {
            "type": "number",
            "description": "The base fare amount.\n            ",
            "format": "decimal"
          },
          "totalFare": {
            "type": "number",
            "description": "The total fare amount.\n            ",
            "format": "decimal"
          },
          "totalCost": {
            "type": "number",
            "description": "The total cost amount.\n            ",
            "format": "decimal"
          },
          "discountedFare": {
            "type": "number",
            "description": "The discounted fare amount.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "The total amount of tax.\n            ",
            "format": "decimal"
          },
          "receiptNumber": {
            "type": "string",
            "description": "The receipt number.\n            ",
            "nullable": true
          },
          "serviceCharges": {
            "type": "array",
            "description": "The collection of service charges for this segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "passenger": {
            "description": "The passenger details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassPassengerDetailsv2"
          },
          "segments": {
            "type": "array",
            "description": "The collection of segments for the barcode.\nNote these can represent leg information on a change of gauge flight.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassSegment"
            }
          }
        }
      },
      "BoardingPassPassengerDetailsv2": {
        "type": "object",
        "description": "Defines the boarding pass passenger details.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The passenger type.\n            ",
            "nullable": true
          },
          "selecteeString": {
            "type": "string",
            "description": "The string that indicates a selectee.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number.\n            ",
            "nullable": true
          },
          "score": {
            "description": "The passenger score.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassPassengerScore"
          },
          "infant": {
            "description": "The passengers infant details if an infant exists.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassInfantDetails"
          },
          "name": {
            "description": "The given name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "isoName": {
            "description": "The given name converted to ISO standard.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender.\n            ",
            "$ref": "#/components/schemas/Gender"
          },
          "documents": {
            "type": "array",
            "description": "The collection of travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "barCode": {
            "type": "string",
            "description": "The passenger bar code.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassFilterRequest": {
        "type": "object",
        "description": "Defines the boarding pass request that is responsible for filtering the boarding pass response.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerKeys": {
            "type": "array",
            "description": "The selected passenger keys to be returned. If null all passengers will be returned that have been checked in.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "Name of the application requesting for boarding pass print.\nPlease note that this should be a char and not a string.\nValid values are 'O', 'K', 'M', 'W', and ' '.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "skipLogToHistory": {
            "type": "boolean",
            "description": "Whether to add event to history log.\n            "
          },
          "segmentKeys": {
            "type": "array",
            "description": "The selected segment keys to be returned. If null all segments will be returned that have been checked into.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CheckinPassengersRequestv3": {
        "type": "object",
        "description": "Defines the checkin passengers request v3 model.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers"
        ],
        "properties": {
          "passengers": {
            "type": "array",
            "description": "The collection of passengers to checkin.\n            ",
            "items": {
              "$ref": "#/components/schemas/CheckinPassengerRequestv2"
            }
          },
          "seatsRequired": {
            "type": "boolean",
            "description": "The flag indicating whether a seat is required for checkin.\n            ",
            "nullable": true
          },
          "skipSecurityChecks": {
            "type": "boolean",
            "description": "The flag indicating whether checkin requirement validation will be skipped.\n            ",
            "nullable": true
          }
        }
      },
      "CheckinPassengerRequestv2": {
        "type": "object",
        "description": "Defines the individual passenger checkin request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerKey"
        ],
        "properties": {
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger key being checked in.\n            ",
            "minLength": 1
          },
          "transitType": {
            "description": "The passengers transit type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransitType"
          },
          "processApps": {
            "type": "boolean",
            "description": "Flag indicating to process APPS.\n            ",
            "nullable": true
          },
          "verifiedTravelDocumentKeys": {
            "type": "array",
            "description": "The value specifying the verified travel document(s) associated with this checkin.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfSeatMapStatelessAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatMapStatelessAvailability"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SeatMapStatelessAvailability": {
        "type": "object",
        "description": "Defines the equipment availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "seatMap": {
            "description": "The seat map.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatMap"
          },
          "ssrLookup": {
            "type": "object",
            "description": "The list of SSR's available.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Ssr"
            }
          }
        }
      },
      "SingleSsrByKeyRequestv2": {
        "type": "object",
        "description": "The single ssr by key request model, v2.\n            ",
        "additionalProperties": false,
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of items to include. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Notes associated with this Ssr.\n            ",
            "nullable": true
          },
          "forceWaveOnSell": {
            "type": "boolean",
            "description": "Force wave on sell. Default value is false.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Set the Currency Code if different than the booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feePricingMode": {
            "description": "Indicates whether the SSR is meant to be sold in points or in currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "ssrSellMode": {
            "description": "Indicates whether the SSR is meant to be sold in the passenger's service bundle.\n            ",
            "$ref": "#/components/schemas/SsrSellMode"
          }
        }
      },
      "SsrSellMode": {
        "type": "integer",
        "description": "The ssr sell mode enumeration.\n            \n\n0 = NonBundle\n1 = Bundle\n2 = BundleSsrSwap",
        "x-enumNames": [
          "NonBundle",
          "Bundle",
          "BundleSsrSwap"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "SsrByKeysRequestv2": {
        "type": "object",
        "description": "Request to add a leg, segment, or journey Ssr.\n            ",
        "additionalProperties": false,
        "required": [
          "keys"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "description": "Keys for the request.\n            ",
            "items": {
              "$ref": "#/components/schemas/SsrByKeyRequest"
            }
          },
          "forceWaveOnSell": {
            "type": "boolean",
            "description": "Force wave on sell. Default value is false.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Set the Currency Code if different than the booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feePricingMode": {
            "description": "Indicates whether the SSR is meant to be sold in points or in currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          }
        }
      },
      "SsrByKeyRequest": {
        "type": "object",
        "description": "SSR detail for a specific passenger number.\n            ",
        "additionalProperties": false,
        "required": [
          "ssrKey"
        ],
        "properties": {
          "ssrKey": {
            "type": "string",
            "description": "The Ssr key.\n            ",
            "minLength": 1
          },
          "count": {
            "type": "integer",
            "description": "The number of items to include. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Notes associated with this Ssr.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfAvailabilityv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Availabilityv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Availabilityv2": {
        "type": "object",
        "description": "Availabilityv2 represents the availability response based on the search criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "The collection of trip results based on date and markets.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripResult"
            }
          },
          "faresAvailable": {
            "type": "object",
            "description": "The aggregate collection of fares available for all the provided journeys.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/FareReference"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code for all displayed fares.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "includeTaxesAndFees": {
            "type": "boolean",
            "description": "Flag indicating if the trip includes taxes and fees.\n            "
          },
          "bundleOffers": {
            "type": "object",
            "description": "The collection of service bundle offers available for all the provided journeys, if requested.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/BundleOffer"
            }
          }
        }
      },
      "TripResult": {
        "type": "object",
        "description": "The trip results represents a wrapper class for the potential collection of multiple selected dates (flex days or\nrange) selected on the availability request.\n            ",
        "additionalProperties": false,
        "properties": {
          "trips": {
            "type": "array",
            "description": "The collection of available trip by date that contain a collection of markets.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripDateMarket"
            }
          }
        }
      },
      "TripDateMarket": {
        "type": "object",
        "description": "The trip date market represents a specific dates collection of markets.\n            ",
        "additionalProperties": false,
        "properties": {
          "multipleOriginStations": {
            "type": "boolean",
            "description": "Flag indicating if multiple origin stations exist in the journeys available by market dictionary.\n            "
          },
          "multipleDestinationStations": {
            "type": "boolean",
            "description": "Flag indicating if multiple destination stations exist in the journeys available by market dictionary.\n            "
          },
          "date": {
            "type": "string",
            "description": "The date all the different markets are for.\n            ",
            "format": "date-time"
          },
          "journeysAvailableByMarket": {
            "type": "object",
            "description": "The dictionary of available journeys for the date per market.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AvailableJourney"
              }
            }
          }
        }
      },
      "AvailableJourney": {
        "type": "object",
        "description": "The available journey represents a specific date, market journey that can be sold.\n            ",
        "additionalProperties": false,
        "properties": {
          "flightType": {
            "description": "The flight type of the journey.\n            ",
            "$ref": "#/components/schemas/FlightType"
          },
          "stops": {
            "type": "integer",
            "description": "The number of stops the journey will make.\n            ",
            "format": "int32"
          },
          "designator": {
            "description": "The journeys transportation designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "journeyKey": {
            "type": "string",
            "description": "The unique journey key.\n            ",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "The collection of segments on the journey.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AvailableSegment"
            }
          },
          "fares": {
            "type": "array",
            "description": "The collection of available fares to be sold for this journey.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AvailableJourneyFare"
            }
          },
          "notForGeneralUser": {
            "type": "boolean",
            "description": "A value indicating whether the journey is for a general user.\n            "
          }
        }
      },
      "AvailableSegment": {
        "type": "object",
        "description": "Available segment represents an available segment on a available journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "isSeatmapViewable": {
            "type": "boolean",
            "description": "Indicates if the seatmaps associated with the segment are retrievable.\nSets to `false` for passive segments, and `true` for non-passive segments.\n            "
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "externalIdentifier": {
            "description": "The external transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "segmentType": {
            "description": "The type of the segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "isChangeOfGauge": {
            "type": "boolean",
            "description": "Flag indicating if the segment is a change of gauge.\n            "
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Flag indicating if the segment is blocked.\n            "
          },
          "isHosted": {
            "type": "boolean",
            "description": "Flag indicating if the segment is hosted.\n            "
          },
          "designator": {
            "description": "The segments transportation designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique segment key.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The segments cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "international": {
            "type": "boolean",
            "description": "Flag indicating if the segment is international.\n            "
          },
          "legs": {
            "type": "array",
            "description": "The collection of legs on the segment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          }
        }
      },
      "AvailableJourneyFare": {
        "type": "object",
        "description": "The available journey fare represents a journeys fare offering. If the journey is multi segment multiple fare\ndetails will be present so each fare can be shown its unique details.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareAvailabilityKey": {
            "type": "string",
            "description": "The unique fare availability key.\n            ",
            "nullable": true
          },
          "details": {
            "type": "array",
            "description": "The collection of fare details for a specific fare.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AvailableJourneyFareDetail"
            }
          },
          "isSumOfSector": {
            "type": "boolean",
            "description": "Flag indicating if the journey fare is sum of sector.\n            "
          }
        }
      },
      "AvailableJourneyFareDetail": {
        "type": "object",
        "description": "The available journey fare details represents a journeys fare availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "availableCount": {
            "type": "integer",
            "description": "The availability left.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The classes status.\n            ",
            "$ref": "#/components/schemas/ClassStatus"
          },
          "reference": {
            "type": "string",
            "description": "The reference to the fare in the master fare collection.\n            ",
            "nullable": true
          },
          "serviceBundleSetCode": {
            "type": "string",
            "description": "Service bundle set code.\n            ",
            "nullable": true
          },
          "bundleReferences": {
            "type": "array",
            "description": "The references to the service bundle offers in the master bundle offer collection.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "ssrReferences": {
            "type": "array",
            "description": "The SSR references that correspond to the applicable SSR prices in AvailabilityWithSSRResponse's IncludedSsrs.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FareReference": {
        "type": "object",
        "description": "The fare reference represents a master reference of the full fare details.\n            ",
        "additionalProperties": false,
        "properties": {
          "totals": {
            "description": "The summed up totals for the collection of fares.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareReferenceTotals"
          },
          "isSumOfSector": {
            "type": "boolean",
            "description": "Flag indicating if the fare reference is a sum of sector.\n            "
          },
          "fareAvailabilityKey": {
            "type": "string",
            "description": "The unique fare availability key.\n            ",
            "nullable": true
          },
          "fares": {
            "type": "array",
            "description": "The collection of fares for this reference.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareAvailabilityv2"
            }
          }
        }
      },
      "FareReferenceTotals": {
        "type": "object",
        "description": "The fare reference totals represents the sum of all the fares for a specific available journey fare. If individual\npassenger fare breakdown in needed that will need to be calculated using the master fare collection.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareTotal": {
            "type": "number",
            "description": "The fares total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "revenueTotal": {
            "type": "number",
            "description": "The fares revenue total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "publishedTotal": {
            "type": "number",
            "description": "The fares published total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "loyaltyTotal": {
            "type": "number",
            "description": "The fares loyalty total.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "description": "The fares discounted total.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "FareAvailabilityv2": {
        "type": "object",
        "description": "The fare availability represents a master fare reference with all the fare details.\n            ",
        "additionalProperties": false,
        "properties": {
          "isGoverning": {
            "type": "boolean",
            "description": "Flag indicating of the fare is the governing fare.\n            "
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis code.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "nullable": true
          },
          "classType": {
            "type": "string",
            "description": "The fare class type.\n            ",
            "nullable": true
          },
          "fareApplicationType": {
            "description": "The fare application type.\n            ",
            "$ref": "#/components/schemas/FareApplicationType"
          },
          "fareStatus": {
            "description": "The fare status.\n            ",
            "$ref": "#/components/schemas/FareStatus"
          },
          "productClass": {
            "type": "string",
            "description": "The fare product class.\n            ",
            "nullable": true
          },
          "ruleNumber": {
            "type": "string",
            "description": "The fare rule number.\n            ",
            "nullable": true
          },
          "ruleTariff": {
            "type": "string",
            "description": "The fare rule tariff.\n            ",
            "nullable": true
          },
          "passengerFares": {
            "type": "array",
            "description": "The fare collection of passenger price breakdown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFareAvailability"
            }
          },
          "travelClassCode": {
            "type": "string",
            "description": "The travel class code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "isAllotmentMarketFare": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this fare is an allotment market fare.\n            "
          },
          "reference": {
            "type": "string",
            "description": "The reference to the fare from the journey fare available.\n            ",
            "nullable": true
          }
        }
      },
      "BundleOffer": {
        "type": "object",
        "description": "The bundle offer model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleCode": {
            "type": "string",
            "description": "The bundle code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "bundlePrices": {
            "type": "array",
            "description": "A list of possible price variants of the service\nbundle and SSRs per journey in the availability.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundlePrice"
            }
          }
        }
      },
      "BundlePrice": {
        "type": "object",
        "description": "The bundle price model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "The total price for the service bundle, minus taxes.\nIncludes any fees associated with the bundle.\n            ",
            "format": "decimal"
          },
          "taxTotal": {
            "type": "number",
            "description": "The total sales taxes that are applicable to the\nservice bundle.\n            ",
            "format": "decimal"
          },
          "feePrice": {
            "type": "number",
            "description": "The fee price associated with the bundle if there is any.\n            ",
            "format": "decimal"
          },
          "passengerType": {
            "type": "string",
            "description": "The passenger type that is applicable to the service\nbundle.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The program details that are applicable to the service\nbundle.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleProgramDetails"
          },
          "bundleSsrPrices": {
            "type": "array",
            "description": "The list of bundle SSR prices.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSsrPrice"
            }
          }
        }
      },
      "BundleProgramDetails": {
        "type": "object",
        "description": "Represents the bundle program details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "level": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "BundleSsrPrice": {
        "type": "object",
        "description": "The bundle SSR price model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleSsrPrice": {
            "type": "number",
            "description": "The total price of the applied fee.\n            ",
            "format": "decimal"
          },
          "taxTotal": {
            "type": "number",
            "description": "The applied sales tax.\n            ",
            "format": "decimal"
          },
          "ssrCode": {
            "type": "string",
            "description": "The SSR code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AvailabilityRebookRequestv2": {
        "type": "object",
        "description": "Model representing an availability rebook search.\n            ",
        "additionalProperties": false,
        "required": [
          "criteria"
        ],
        "properties": {
          "criteria": {
            "type": "array",
            "description": "The list of availability search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/AvailabilityCriteria"
            }
          },
          "fareFilters": {
            "description": "The fare search criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFareCriteria"
          },
          "taxesAndFees": {
            "description": "The taxes and fees rollup mode which affects the pricing information.\n            ",
            "$ref": "#/components/schemas/TaxesAndFeesRollupMode"
          },
          "codes": {
            "description": "The different code criteria that can be set that can influence availability response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCodeCriteriav2"
          },
          "lowFareMode": {
            "type": "boolean",
            "description": "The flag indicating to search low fare mode (only returning the lowest fare).\n            ",
            "nullable": true
          },
          "returnEmptyResults": {
            "type": "boolean",
            "description": "Whether to include empty results in the returned object.\n            ",
            "nullable": true
          },
          "numberOfFaresPerJourney": {
            "type": "integer",
            "description": "The number of fares desired per journey.\n            ",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "AvailabilityCriteria": {
        "type": "object",
        "description": "Defines a single direction search criteria far an availability call.\n            ",
        "additionalProperties": false,
        "required": [
          "stations",
          "dates"
        ],
        "properties": {
          "stations": {
            "description": "The station criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityStationCriteria"
          },
          "dates": {
            "description": "The date criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityDateCriteria"
          },
          "filters": {
            "description": "Filters applied to the response for a single direction.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCriteriaFilter"
          },
          "lowFarePrice": {
            "type": "number",
            "description": "Used to validate that the low fare prices retrieved from the low fare endpoint is valid.\n            ",
            "format": "decimal",
            "deprecated": true,
            "x-deprecatedMessage": "4.3.0 - This property is not valid when using the dotRez API.",
            "nullable": true
          },
          "ssrCollectionsMode": {
            "description": "Determines if SSR nest information will be returned on the legs for each available journey segments.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilitySsrCollectionsMode"
          }
        }
      },
      "AvailabilityCriteriaFilter": {
        "type": "object",
        "description": "Defines all the different ways the availability response can be filtered.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareInclusionType": {
            "description": "Defines the type of fares to be included in the response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityType"
          },
          "compressionType": {
            "description": "The class compression type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareClassControl"
          },
          "maxPrice": {
            "type": "number",
            "description": "The max fare price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "description": "The min fare price.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "loyalty": {
            "description": "Filters fares based on loyalty.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LoyaltyFilter"
          },
          "includeAllotments": {
            "type": "boolean",
            "description": "Flag indicating to include allotted fare classes of service.\n            ",
            "nullable": true
          },
          "exclusionType": {
            "description": "Filters the type of journeys to return.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFilter"
          },
          "sortOptions": {
            "type": "array",
            "description": "The list of inventory journey sort options, used for filtering journeys on the response.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneySortKey"
            }
          },
          "productClasses": {
            "type": "array",
            "description": "The list of product class codes to filter with.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "travelClasses": {
            "type": "array",
            "description": "The list of travel class codes to filter with.\nPlease note that this should be an array of chars and not an array of string.\n            ",
            "nullable": true,
            "items": {
              "type": "string",
              "maxLength": 1
            }
          },
          "fareTypes": {
            "type": "array",
            "description": "The list of fare types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "classesOfService": {
            "type": "array",
            "description": "The list of classes of service.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "carrierCode": {
            "type": "string",
            "description": "The desired carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "The desired identifier number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type filtering based on connections.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FlightType"
          },
          "connectionType": {
            "description": "Specifies the type of sold as connection when segment connects with passive segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SoldAsConnectionType"
          },
          "maxConnections": {
            "type": "integer",
            "description": "The number of max connections.\n            ",
            "nullable": true
          },
          "includeServiceBundleSetCodes": {
            "type": "boolean",
            "description": "Indicates if service bundle set codes will need to be returned in the response.\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "4.4.1 - this flag is already redundant with BundleControlFilter in place, please use BundleControlFilter instead.",
            "nullable": true
          },
          "bundleControlFilter": {
            "description": "Determines what level of service bundle information should be returned with flight availability.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleControlFilter"
          }
        }
      },
      "SoldAsConnectionType": {
        "type": "integer",
        "description": "Enum to define if a connection is sold as domestic or international.\n            \n\n0 = None\n1 = Domestic\n2 = International\n3 = Both",
        "x-enumNames": [
          "None",
          "Domestic",
          "International",
          "Both"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "BundleControlFilter": {
        "type": "integer",
        "description": "Filter used to segregate the bundle information to return on flight availability.\n            \n\n0 = Disabled\n1 = ReturnBundleSets\n2 = ReturnBundleOffers",
        "x-enumNames": [
          "Disabled",
          "ReturnBundleSets",
          "ReturnBundleOffers"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AvailabilityCodeCriteriav2": {
        "type": "object",
        "description": "Describes the different code criteria that can be set that can influence availability response.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code for fare pricing.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code to be applied.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The organization to use when evaluating availability of private fares. If specified, this organization code will\nalso be used for evaluation of any organization rules on sales taxes and travel fees (if included in the response).\nIf blank or not specified, the logged-in user's organization will be used.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "currentSourceOrganization": {
            "type": "string",
            "description": "The current source point of sale organization on the PNR. May be blank or unspecified if the source point of sale\norganization has not yet been set on the PNR. If blank or unspecified, the logged-in user's organization will be\nused.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "AvailabilityMoveRequest": {
        "type": "object",
        "description": "Defines the availability move request.\n            ",
        "additionalProperties": false,
        "required": [
          "journeyKey",
          "stations",
          "dates"
        ],
        "properties": {
          "filters": {
            "description": "The filtering criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityMoveFilterCriteria"
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey sell key to move.\n            ",
            "minLength": 1
          },
          "stations": {
            "description": "The station criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityStationCriteria"
          },
          "dates": {
            "description": "The date criteria.\n            ",
            "$ref": "#/components/schemas/AvailabilityDateCriteria"
          },
          "flightFilters": {
            "description": "The flight search criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityFlightCriteria"
          },
          "type": {
            "description": "Defines the type of fares to be returned.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityType"
          },
          "passengerMoveType": {
            "description": "The passenger move type.\n            ",
            "$ref": "#/components/schemas/MovePassengerJourneyType"
          }
        }
      },
      "MoveRequestv2": {
        "type": "object",
        "description": "Defines the move journey request for a booking in state.\n            ",
        "additionalProperties": false,
        "required": [
          "fromJourneyKey",
          "journeyKey",
          "fareKey"
        ],
        "properties": {
          "fromJourneyKey": {
            "type": "string",
            "description": "The journey key to move from.\n            ",
            "minLength": 1
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key to move to.\n            ",
            "minLength": 1
          },
          "fareKey": {
            "type": "string",
            "description": "The fare key to move to.\n            ",
            "minLength": 1
          },
          "moveType": {
            "description": "The type of move that is requested.\n            ",
            "$ref": "#/components/schemas/MovePassengerJourneyType"
          },
          "ignoreClosedFlightStatus": {
            "type": "boolean",
            "description": "If true then the move will be allowed even if the legs of FromJourney have been\nmarked as Closed.\nIf false, the move will be disallowed if any one of the legs\nof FromJourney has been marked as Closed.\n            "
          },
          "ignoreLiftStatus": {
            "description": "Controls whether the Move is allowed to ignore boarded and/or\nchecked-in statuses.\n            ",
            "$ref": "#/components/schemas/IgnoreLiftStatus"
          },
          "boardingSequenceOffset": {
            "type": "integer",
            "description": "If set to zero and MovePassengerJourneyType is not Diversion, the boarding sequence\nof the original segments will be copied to the new (moved to) segments.\nIf set to a value other than zero and MovePassengerJourneyType is not Diversion,\nthe boarding sequence of the original segments will be copied to the new (moved to)\nsegments and then incremented by the specified BoardingSequenceOffset.\nBoarding sequence is not preserved for Diversion moves.\n            "
          },
          "moveSsrOption": {
            "description": "Controls whether to move SSRs from FromJourney to ToJourney.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MoveSsrOption"
          },
          "standbyPriorityCode": {
            "type": "string",
            "description": "Standby priority code.\n            ",
            "nullable": true
          },
          "inventoryControlType": {
            "description": "Inventory control.\n            ",
            "$ref": "#/components/schemas/InventoryControlType"
          },
          "changeReasonCode": {
            "description": "Change reason code.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChangeReasonCodes"
          }
        }
      },
      "BagTagPrintHistoryRequest": {
        "type": "object",
        "description": "Contains information needed to add bag tag print history for a specific passenger.\n            ",
        "additionalProperties": false,
        "required": [
          "legKey",
          "bagTagInformation"
        ],
        "properties": {
          "legKey": {
            "type": "string",
            "description": "Leg key where the bag is checked in.\n            ",
            "minLength": 1
          },
          "receivedBy": {
            "type": "string",
            "description": "Received by.\n            ",
            "nullable": true
          },
          "passengerName": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "isBagTagSelfPrinted": {
            "type": "boolean",
            "description": "Whether to make the bag tag status self printed.\n            ",
            "nullable": true
          },
          "bagTagInformation": {
            "type": "array",
            "description": "List of bags to add to bag tag print history.\n            ",
            "items": {
              "$ref": "#/components/schemas/BagTagInformation"
            }
          }
        }
      },
      "BagTagInformation": {
        "type": "object",
        "description": "Defines bag tag information.\n            ",
        "additionalProperties": false,
        "properties": {
          "osTag": {
            "type": "string",
            "description": "The os tag.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "taggedToStation": {
            "type": "string",
            "description": "The tagged to station on the baggage object.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the baggage.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "weightType": {
            "description": "The weight type of the baggage.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "originStation": {
            "type": "string",
            "description": "The origin station of the baggage.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfBagTagPrintHistory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BagTagPrintHistory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BagTagPrintHistory": {
        "type": "object",
        "description": "Defines bag tag print history.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time"
          },
          "identifier": {
            "description": "The unique transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "passengerName": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "osTag": {
            "type": "string",
            "description": "The os tag.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "taggedToStation": {
            "type": "string",
            "description": "The tagged to station on the baggage object.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The baggage weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "weightType": {
            "description": "The baggage weight type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "isBagTagSelfPrinted": {
            "type": "boolean",
            "description": "Whether the bag tag is self printed.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/HistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "HistoryResponse": {
        "type": "object",
        "description": "Defines a booking history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The booking history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingHistory"
            }
          }
        }
      },
      "IJsonResponseOfSeatAssignmentHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatAssignmentHistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SeatAssignmentHistoryResponse": {
        "type": "object",
        "description": "Defines a seat assignment history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The seat assignment history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatAssignmentHistory"
            }
          }
        }
      },
      "SeatAssignmentHistory": {
        "type": "object",
        "description": "Defines a seat assignment history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "designator": {
            "description": "The market designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketDesignator"
          },
          "identifier": {
            "type": "string",
            "description": "The unique transportation identifier.\n            ",
            "nullable": true
          },
          "seatAssignment": {
            "type": "string",
            "description": "The seat assignment.\n            ",
            "nullable": true
          },
          "compartment": {
            "type": "string",
            "description": "The compartment containing the seat.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "MarketDesignator": {
        "type": "object",
        "description": "Model information about the date market which identifies a market and the departure date.\n            ",
        "additionalProperties": false,
        "required": [
          "destination",
          "origin",
          "departureDate"
        ],
        "properties": {
          "destination": {
            "type": "string",
            "description": "Gets or sets the leg arrival station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets the leg departure station.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "SeatAssignmentEvent": {
        "type": "integer",
        "description": "Represents the different events that trigger an\nentry into the seat assignment history.\n            \n\n4 = AssignedSeat\n5 = RemoveSeat",
        "x-enumNames": [
          "AssignedSeat",
          "RemoveSeat"
        ],
        "enum": [
          4,
          5
        ]
      },
      "IJsonResponseOfSegmentChangeHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SegmentChangeHistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SegmentChangeHistoryResponse": {
        "type": "object",
        "description": "Defines a segment change history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The segment change history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SegmentChangeHistory"
            }
          }
        }
      },
      "SegmentChangeHistory": {
        "type": "object",
        "description": "Defines a segment change history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week of the operation.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "segmentNumber": {
            "type": "integer",
            "description": "The segment number.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "nullable": true
          },
          "market": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "stopCount": {
            "type": "integer",
            "description": "The number of stops in the reservation.\n            "
          },
          "connectionIndicator": {
            "type": "string",
            "description": "The connection indicator.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "passengerCount": {
            "type": "integer",
            "description": "The number of passengers on the booking.\n            "
          },
          "scheduledArrivalTime": {
            "type": "string",
            "description": "The scheduled time of arrival local to the arrival station.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "scheduledDepartureTime": {
            "type": "string",
            "description": "The scheduled time of departure local to the arrival station.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "fareBasis": {
            "type": "string",
            "description": "An alphanumeric identifier assigned to a fare.\n            ",
            "nullable": true
          },
          "fareAmount": {
            "type": "number",
            "description": "The cash value of the fare.\n            ",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "SegmentChangeEvent": {
        "type": "integer",
        "description": "Represents the different events that trigger an entry into the segment change history.\n            \n\n6 = AddedFlight\n7 = DeletedFlight",
        "x-enumNames": [
          "AddedFlight",
          "DeletedFlight"
        ],
        "enum": [
          6,
          7
        ]
      },
      "IJsonResponseOfFlightMoveHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FlightMoveHistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FlightMoveHistoryResponse": {
        "type": "object",
        "description": "Defines a flight move history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The flight move history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FlightMoveHistory"
            }
          }
        }
      },
      "FlightMoveHistory": {
        "type": "object",
        "description": "Defines a flight move history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "previousMarket": {
            "description": "The previous market designator for the journey the passenger\nwas moved from.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketDesignator"
          },
          "newMarket": {
            "description": "The new market designator for the journey the passenger\nwas moved to.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketDesignator"
          },
          "previousIdentifier": {
            "type": "string",
            "description": "The previous transportation identifier for the journey the passenger\nwas moved from.\n            ",
            "nullable": true
          },
          "newIdentifier": {
            "type": "string",
            "description": "The new transportation identifier for the journey the passenger\nwas moved to.\n            ",
            "nullable": true
          },
          "changeReason": {
            "description": "The reason for the move operation.\n            ",
            "$ref": "#/components/schemas/ChangeReasonCodes"
          }
        }
      },
      "IJsonResponseOfItinerarySentHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ItinerarySentHistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ItinerarySentHistoryResponse": {
        "type": "object",
        "description": "Defines an itinerary sent history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The itinerary sent history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItinerarySentHistory"
            }
          }
        }
      },
      "ItinerarySentHistory": {
        "type": "object",
        "description": "Defines an itinerary sent history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "description": "The booking contact triggering the sending of the itinerary.\n            ",
            "nullable": true
          },
          "distributionOption": {
            "description": "The distribution method in sending the itinerary.\n            ",
            "$ref": "#/components/schemas/DistributionOption"
          },
          "sent": {
            "type": "string",
            "description": "The timestamp on when the itinerary was sent.\n            ",
            "format": "date-time"
          }
        }
      },
      "IJsonResponseOfHoldDateChangeHistoryResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/HoldDateChangeHistoryResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "HoldDateChangeHistoryResponse": {
        "type": "object",
        "description": "Defines a hold date change history response.\n            ",
        "additionalProperties": false,
        "properties": {
          "pageKey": {
            "type": "string",
            "description": "The key of the last item in the history list.\n            ",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "description": "The hold date change history list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HoldDateChangeHistory"
            }
          }
        }
      },
      "HoldDateChangeHistory": {
        "type": "object",
        "description": "Defines a hold date change history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "pointOfSale": {
            "description": "The point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "sourcePointOfSale": {
            "description": "The source point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "receivedByReference": {
            "type": "string",
            "description": "The received by reference number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The the history entry was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "previousHoldTime": {
            "type": "string",
            "description": "The previous hold time for the booking.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "holdTime": {
            "type": "string",
            "description": "The current hold time for the booking.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "HoldDateChangeEvent": {
        "type": "integer",
        "description": "Represents the different events that trigger an\nentry into the hold date change history.\n            \n\n66 = Created\n67 = Removed\n68 = Changed",
        "x-enumNames": [
          "Created",
          "Removed",
          "Changed"
        ],
        "enum": [
          66,
          67,
          68
        ]
      },
      "IJsonResponseOfIListOfBookingMessageHistory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingMessageHistory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingMessageHistory": {
        "type": "object",
        "description": "Defines a booking message history log entry.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The message history type.\n            ",
            "$ref": "#/components/schemas/BookingMessageHistoryType"
          },
          "message": {
            "type": "string",
            "description": "The message.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time"
          }
        }
      },
      "BookingMessageHistoryType": {
        "type": "integer",
        "description": "Represents the booking message history types.\n            \n\n0 = TeletypeMessage\n1 = ETicket\n2 = GovernmentSecurity\n3 = PnrGovernment\n4 = BaggageMessage\n5 = Iatci",
        "x-enumNames": [
          "TeletypeMessage",
          "ETicket",
          "GovernmentSecurity",
          "PnrGovernment",
          "BaggageMessage",
          "Iatci"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "IJsonResponseOfIListOfBookingNotificationHistory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingNotificationHistory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingNotificationHistory": {
        "type": "object",
        "description": "Defines a booking notification history.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingNotificationHistoryKey": {
            "type": "string",
            "description": "The booking notification history key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Date and time the history was logged.\n            ",
            "format": "date-time"
          },
          "eventTypeCode": {
            "description": "Event type code of the notification.\n            ",
            "$ref": "#/components/schemas/SubscriptionEventType"
          },
          "deliveryMethodCode": {
            "type": "string",
            "description": "Delivery method code of the notification.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "Destination address of the notification.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "Culture code of the notification.\n            ",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Details of the booking notification history.\n            ",
            "nullable": true
          },
          "minutesToEvent": {
            "type": "integer",
            "description": "Reminder time for the notification.\n            ",
            "format": "int32"
          }
        }
      },
      "SubscriptionEventType": {
        "type": "integer",
        "description": "Represents the different subscription events.\n            \n\n0 = Unknown\n1 = Departure\n2 = DepartureDelay\n3 = Arrival\n4 = ArrivalDelay\n5 = ScheduleChange\n6 = CheckIn\n7 = Gate\n8 = IropMove\n9 = InventoryCancel",
        "x-enumNames": [
          "Unknown",
          "Departure",
          "DepartureDelay",
          "Arrival",
          "ArrivalDelay",
          "ScheduleChange",
          "CheckIn",
          "Gate",
          "IropMove",
          "InventoryCancel"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "IJsonResponseOfPassengerSeatFee": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerSeatFee"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerSeatFee": {
        "type": "object",
        "description": "Passenger seat fee model.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "type": {
            "description": "The fee type.\n            ",
            "$ref": "#/components/schemas/FeeType"
          },
          "ssrCode": {
            "type": "string",
            "description": "The SSR code.\n            ",
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The fee SSR number.\n            "
          },
          "paymentNumber": {
            "type": "integer",
            "description": "The fee payment number.\n            "
          },
          "isConfirmed": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee has been confirmed or not.\n            "
          },
          "isConfirming": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming or not.\n            "
          },
          "isConfirmingExternal": {
            "type": "boolean",
            "description": "A status flag to indicate if the fee is confirming external or not.\n            "
          },
          "code": {
            "type": "string",
            "description": "The fee code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "detail": {
            "type": "string",
            "description": "The fee detail.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "passengerFeeKey": {
            "type": "string",
            "description": "The passenger fee key.\n            ",
            "nullable": true
          },
          "override": {
            "type": "boolean",
            "description": "The fee override.\n            "
          },
          "flightReference": {
            "type": "string",
            "description": "The flight reference which signifies a link to a segment and or leg.\n            ",
            "maxLength": 22,
            "minLength": 0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The fee notes.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date for the fee.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "isProtected": {
            "type": "boolean",
            "description": "Indicates if the fee is protected.\n            "
          },
          "serviceCharges": {
            "type": "array",
            "description": "The list of service charges for the fee.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCharge"
            }
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "nullable": true
          }
        }
      },
      "SeatFeeQuoteRequest": {
        "type": "object",
        "description": "Represents a seat fee quote request.\n            ",
        "additionalProperties": false,
        "required": [
          "seatPreference"
        ],
        "properties": {
          "seatPreference": {
            "description": "The seat preference.\n            ",
            "$ref": "#/components/schemas/SeatPreference"
          },
          "inventoryControlType": {
            "description": "The type of hold placed on seats.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UnitInventoryControlType"
          },
          "ignoreSeatSSRs": {
            "type": "boolean",
            "description": "Determines whether or not SSRs associated with the seat will be ignored when determining\nunit availability.\n            ",
            "nullable": true
          },
          "seatAssignmentMode": {
            "description": "The seat assignment mode can affect available units in seat maps and whether or not\nseat fees are charged based on channel type, role settings, customer programs\nand/or class of service.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatAssignmentMode"
          },
          "monetaryOnly": {
            "type": "boolean",
            "description": "Indicates whether the fee to be priced is to be priced in money or points.\n            ",
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Optional currency code. If different than the booking currency code,\nfees in that currency will be returned if the conversion exists in new skies utilities\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndIListOfPassengerSeatFee": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PassengerSeatFee"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AutoAssignSeatFeeQuoteRequest": {
        "type": "object",
        "description": "Represents a seat fee quote request for auto-assigned seats.\n            ",
        "additionalProperties": false,
        "properties": {
          "seatedNearPrimary": {
            "type": "array",
            "description": "The list of passenger keys for seating assignments near the primary passenger.\nOnly passengers on the list and the primary passenger will be assigned\nseats. If the list is empty, seats will be assigned to all passengers.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "preferences": {
            "description": "The seat preference.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatPreferences"
          },
          "inventoryControlType": {
            "description": "The type of hold placed on seats.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UnitInventoryControlType"
          },
          "ignoreSeatSsrs": {
            "type": "boolean",
            "description": "Determines whether or not SSRs associated with the seat will be ignored when determining\nunit availability.\n            ",
            "nullable": true
          },
          "seatAssignmentMode": {
            "description": "The seat assignment mode can affect available units in seat maps and whether or not\nseat fees are charged based on channel type, role settings, customer programs\nand/or class of service.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatAssignmentMode"
          },
          "monetaryOnly": {
            "type": "boolean",
            "description": "Indicates whether the fee to be priced is to be priced in money or points.\n            ",
            "nullable": true
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Optional collection currency code. If different from the booking currency, \nfees in the collected currency will be returned if a currency conversion configuration exists.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIssueETicketResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/IssueETicketResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IssueETicketResponse": {
        "type": "object",
        "description": "The response from issuing an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "ticketNumbers": {
            "type": "array",
            "description": "The collection of issued or re-issued e-tickets.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfETicketBookingValidationResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketBookingValidationResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ETicketBookingValidationResponse": {
        "type": "object",
        "description": "The response for e-ticket booking validation.\n            ",
        "additionalProperties": false,
        "properties": {
          "eTicketQueueStatus": {
            "description": "The e-ticket queue status.\n            ",
            "$ref": "#/components/schemas/ETicketQueueStatus"
          }
        }
      },
      "ETicketQueueStatus": {
        "type": "integer",
        "description": "Defines the queueing status of e-tickets in the booking.\n            \n\n0 = None\n1 = NewIssue\n2 = Reissue",
        "x-enumNames": [
          "None",
          "NewIssue",
          "Reissue"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfETicketResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ETicketResponse": {
        "type": "object",
        "description": "The response for retrieving and displaying e-ticket information.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.2.0 - Please use ETicketResponsev2",
        "additionalProperties": false,
        "properties": {
          "eTicket": {
            "description": "The e-ticket which is equivalent to the New Skies passenger ticket.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTicket"
          },
          "status": {
            "description": "The status return code when retrieving e-tickets.\n            ",
            "$ref": "#/components/schemas/TicketReturnCode"
          },
          "alternateCarrierCode": {
            "type": "string",
            "description": "The alternate carrier code. This is also known as the e-ticket database, or the carrier code of the issuing\nairline.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerTicket": {
        "type": "object",
        "description": "Represents detailed information for an e-ticket issued to a passenger.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.2.0 - Please use PassengerTicketv2",
        "additionalProperties": false,
        "properties": {
          "passengerName": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "connectedETickets": {
            "type": "array",
            "description": "The list of e-tickets issued to the passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ETicket"
            }
          },
          "recordLocators": {
            "type": "array",
            "description": "Record locators associated with the e-ticket.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecordLocator"
            }
          },
          "fareCalculation": {
            "type": "string",
            "description": "The fare calculation.\n            ",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "description": "The date the e-ticket was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "userKey": {
            "type": "string",
            "description": "The user key associated with the e-ticket.\n            ",
            "nullable": true
          },
          "companyIdNumber": {
            "type": "string",
            "description": "The company ID number of the service airline or system service provider.\n            ",
            "nullable": true
          },
          "totalTaxAmount": {
            "type": "number",
            "description": "The tax amount for the e-ticket.\n            ",
            "format": "decimal"
          },
          "taxDetailsList": {
            "type": "array",
            "description": "The list of all tax details of the e-ticket.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TaxDetails"
            }
          },
          "ticketFare": {
            "description": "The base fare represented in the e-ticket's currency code and foreign currency code.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTicketFare"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount for the e-ticket.\n            ",
            "format": "decimal"
          },
          "totalAmountCurrencyCode": {
            "type": "string",
            "description": "The currency code of the total amount for the e-ticket.\n            ",
            "nullable": true
          }
        }
      },
      "ETicket": {
        "type": "object",
        "description": "The e-ticket on a booking.\n            ",
        "additionalProperties": false,
        "properties": {
          "couponCount": {
            "type": "integer",
            "description": "The number of coupons contained in the e-ticket.\n            ",
            "format": "int32"
          },
          "ticketNumber": {
            "type": "string",
            "description": "The e-ticket number.\n            ",
            "nullable": true
          }
        }
      },
      "TaxDetails": {
        "type": "object",
        "description": "The tax details for an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "taxCode": {
            "type": "string",
            "description": "The tax code.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The tax amount.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the tax amount.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerTicketFare": {
        "type": "object",
        "description": "Represents fare information for an e-ticket issued to a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "baseAmount": {
            "type": "number",
            "description": "The base fare amount of the e-ticket.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The base fare amount's currency code.\n            ",
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The base fare (excluding taxes, fees, and charges) in the collected currency.\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign amount's currency code.\n            ",
            "nullable": true
          }
        }
      },
      "TicketReturnCode": {
        "type": "integer",
        "description": "Defines the status or outcome of an e-ticket operation.\n            \n\n0 = Unknown\n1 = Success\n2 = TicketNotFound\n3 = NotAuthorized\n4 = IssueRetrievingTicket\n5 = NoETicketConfiguration",
        "x-enumNames": [
          "Unknown",
          "Success",
          "TicketNotFound",
          "NotAuthorized",
          "IssueRetrievingTicket",
          "NoETicketConfiguration"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "IJsonResponseOfIListOfETicketCoupon": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ETicketCoupon"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ETicketCoupon": {
        "type": "object",
        "description": "The coupon on an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "couponNumber": {
            "type": "integer",
            "description": "The coupon number.\n            ",
            "maximum": 4.0,
            "minimum": 1.0,
            "nullable": true
          },
          "marketInformation": {
            "description": "The market information of the coupon.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service or booking class.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "seatingStatusCode": {
            "description": "Status of the reservation. This column displays OK for adult and NS (No Seat) for infant in lap passengers.\n            ",
            "$ref": "#/components/schemas/SeatingStatusCode"
          },
          "fareBasisCode": {
            "type": "string",
            "description": "Fare basis code and ticket designator.\n            ",
            "nullable": true
          },
          "couponStatus": {
            "description": "The coupon status.\n            ",
            "$ref": "#/components/schemas/ETicketCouponStatusCode"
          },
          "notValidBefore": {
            "type": "string",
            "description": "The travel validity before date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "notValidAfter": {
            "type": "string",
            "description": "The travel validity after date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "baggageAllowance": {
            "description": "Contains the free baggage allowance.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageAllowanceInfo"
          },
          "isArrivalUnknown": {
            "type": "boolean",
            "description": "Indicates if the arrival information for the coupon is unknown (i.e., ARNK).\n            "
          }
        }
      },
      "SeatingStatusCode": {
        "type": "integer",
        "description": "Defines the seating status code for an e-ticket.\n            \n\n0 = Unknown\n1 = BookingConfirmed\n2 = NoSeat",
        "x-enumNames": [
          "Unknown",
          "BookingConfirmed",
          "NoSeat"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ETicketCouponStatusCode": {
        "type": "integer",
        "description": "Defines the e-ticket coupon status code.\n            \n\n0 = Unknown\n1 = OaControl\n2 = Flown\n3 = Boarded\n4 = CheckedIn\n5 = Exchanged\n6 = Open\n7 = NoSeat\n8 = Confirmed\n9 = Printed\n10 = Refunded\n11 = Requested\n12 = Suspended\n13 = SpaceAvailable\n14 = Ticketed\n15 = Voided\n16 = InfoOnly\n17 = IrregularOps\n18 = Unavailable\n19 = PrintExchanged\n20 = Closed\n21 = Override\n22 = ConvertedToFim\n23 = RefundTaxesFeesCharges",
        "x-enumNames": [
          "Unknown",
          "OaControl",
          "Flown",
          "Boarded",
          "CheckedIn",
          "Exchanged",
          "Open",
          "NoSeat",
          "Confirmed",
          "Printed",
          "Refunded",
          "Requested",
          "Suspended",
          "SpaceAvailable",
          "Ticketed",
          "Voided",
          "InfoOnly",
          "IrregularOps",
          "Unavailable",
          "PrintExchanged",
          "Closed",
          "Override",
          "ConvertedToFim",
          "RefundTaxesFeesCharges"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23
        ]
      },
      "BaggageAllowanceInfo": {
        "type": "object",
        "description": "Represents baggage allowance information contained in an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The baggage allowance quantity.\n            ",
            "format": "int32"
          },
          "type": {
            "description": "The baggage allowance type.\n            ",
            "$ref": "#/components/schemas/BaggageAllowanceType"
          },
          "weightType": {
            "description": "The baggage allowance unit / weight type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "BaggageAllowanceType": {
        "type": "integer",
        "description": "Defines the baggage allowance type in a passenger e-ticket.\n            \n\n0 = Unknown\n1 = Weight\n2 = PerPiece\n3 = None",
        "x-enumNames": [
          "Unknown",
          "Weight",
          "PerPiece",
          "None"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfETicketCoupon": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketCoupon"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UpdateETicketCouponRequestBase": {
        "type": "object",
        "description": "Represents a request for updating coupons from within an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "hostedCarrierCode": {
            "type": "string",
            "description": "The hosted carrier code. If not provided, the hosted carrier code will be retrieved internally.\n            ",
            "nullable": true
          },
          "alternateCarrierCode": {
            "type": "string",
            "description": "The alternate carrier code. This is required if the ticket is issued by another airline.\n            ",
            "nullable": true
          },
          "oaValidatingCarrier": {
            "type": "string",
            "description": "Validating carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment text.\n            ",
            "nullable": true
          },
          "isVoluntaryChange": {
            "type": "boolean",
            "description": "Indicates a voluntary change to the coupon or otherwise.\n            "
          },
          "updateFunction": {
            "description": "Indicates the type of update function to be done in the coupon.\n            ",
            "$ref": "#/components/schemas/ETicketCouponUpdateFunction"
          },
          "status": {
            "description": "Indicates the new status for the coupon.\n            ",
            "$ref": "#/components/schemas/ETicketCouponStatusCode"
          }
        }
      },
      "ETicketCouponUpdateFunction": {
        "type": "integer",
        "description": "Represents the function types used to update an e-ticket coupon.\n            \n\n0 = UpdateCouponStatus\n1 = ManualCouponStatusChange\n2 = RequestReturnControl\n3 = RequestAirportControl",
        "x-enumNames": [
          "UpdateCouponStatus",
          "ManualCouponStatusChange",
          "RequestReturnControl",
          "RequestAirportControl"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfUpdateETicketCouponResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UpdateETicketCouponResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UpdateETicketCouponResponse": {
        "type": "object",
        "description": "Represents a response from updating coupons from within an e-ticket.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The status return code upon updating an e-ticket coupon.\n            ",
            "$ref": "#/components/schemas/TicketReturnCode"
          },
          "errorText": {
            "type": "string",
            "description": "The error text from the e-ticket database, if the update resulted in an error.\n            ",
            "nullable": true
          },
          "tickets": {
            "type": "array",
            "description": "Indicates the detailed e-ticket information from the coupon update results.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTicketInfo"
            }
          }
        }
      },
      "PassengerTicketInfo": {
        "type": "object",
        "description": "Represents detailed information for an e-ticket assigned to a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "Ticket status.\n            ",
            "$ref": "#/components/schemas/TicketStatusCode"
          },
          "ticketIndicator": {
            "type": "string",
            "description": "Ticket indicator.\n            ",
            "nullable": true
          },
          "passengerCouponCount": {
            "type": "integer",
            "description": "Number of passenger coupons affected.\n            ",
            "format": "int32"
          },
          "infantPassengerCouponCount": {
            "type": "integer",
            "description": "Number of infant passenger coupons affected.\n            ",
            "format": "int32"
          }
        }
      },
      "IJsonResponseOfBundleApplicationDetails": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleApplicationDetails"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleApplicationDetails": {
        "type": "object",
        "description": "The bundle application details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCodes": {
            "type": "array",
            "description": "The list of applicable carrier codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "productClasses": {
            "type": "array",
            "description": "The list of applicable product classes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "classesOfService": {
            "type": "array",
            "description": "The list of applicable classes of service.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfBundleAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleAvailability"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleAvailability": {
        "type": "object",
        "description": "Model containing the bundle ssr availability information.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleCode": {
            "type": "string",
            "description": "The bundle code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "hasPrice": {
            "type": "boolean",
            "description": "Indicates if the bundle has a cost associated with it.\n            "
          },
          "pricesByJourney": {
            "type": "object",
            "description": "The available in-state booking bundle prices per journey.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/BundlePricesByJourney"
            }
          }
        }
      },
      "BundlePricesByJourney": {
        "type": "object",
        "description": "The bundle prices by journey model.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The journey key associated with the bundle prices.\n            ",
            "nullable": true
          },
          "prices": {
            "type": "array",
            "description": "The bundle price availabilities.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundlePriceAvailability"
            }
          }
        }
      },
      "BundlePriceAvailability": {
        "type": "object",
        "description": "The bundle price availability model.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "The total price for the service bundle, minus taxes.\nIncludes any fees associated with the bundle.\n            ",
            "format": "decimal"
          },
          "taxTotal": {
            "type": "number",
            "description": "The total sales taxes that are applicable to the\nservice bundle.\n            ",
            "format": "decimal"
          },
          "feePrice": {
            "type": "number",
            "description": "The fee price associated with the bundle if there is any.\n            ",
            "format": "decimal"
          },
          "passengerType": {
            "type": "string",
            "description": "The passenger type that is applicable to the service\nbundle.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "program": {
            "description": "The program details that are applicable to the service\nbundle.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleProgramDetails"
          },
          "includedSsrs": {
            "type": "array",
            "description": "The included ssr availability.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IncludedSsrAvailability"
            }
          },
          "upgradableSsrs": {
            "type": "array",
            "description": "The upgradable bundle ssr availability.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpgradableSsrAvailability"
            }
          },
          "additionalSsrs": {
            "type": "array",
            "description": "The additional bundle ssr availability.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AdditionalSsrAvailability"
            }
          }
        }
      },
      "IncludedSsrAvailability": {
        "type": "object",
        "description": "The included ssr availability model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleSsrPrice": {
            "type": "number",
            "description": "The total price of the applied fee.\n            ",
            "format": "decimal"
          },
          "taxTotal": {
            "type": "number",
            "description": "The applied sales tax.\n            ",
            "format": "decimal"
          },
          "ssrCode": {
            "type": "string",
            "description": "The ssr code for the in-bundle ssr availability.\n            ",
            "nullable": true
          },
          "legSsrs": {
            "type": "array",
            "description": "The available bundle leg ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleLegSsr"
            }
          },
          "segmentSsrs": {
            "type": "array",
            "description": "The available bundle segment ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSegmentSsr"
            }
          },
          "journeySsr": {
            "description": "The available bundle journey ssr.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleJourneySsr"
          }
        }
      },
      "BundleLegSsr": {
        "type": "object",
        "description": "Model information for a bundle sell service request (SSR) tied to a specific leg.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "Gets the SSR code.\n            ",
            "nullable": true
          },
          "passengersAvailability": {
            "type": "object",
            "description": "Get the passenger keys this is available for\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSsrAvailability"
            }
          },
          "ssrType": {
            "description": "Gets the SSR type.\n            ",
            "$ref": "#/components/schemas/SsrType"
          },
          "name": {
            "type": "string",
            "description": "Gets the SSR name.\n            ",
            "nullable": true
          },
          "limitPerPassenger": {
            "type": "integer",
            "description": "Gets the limit per passenger.\n            ",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "description": "Gets the amount available.\n            ",
            "format": "int32",
            "nullable": true
          },
          "inventoryControlled": {
            "type": "boolean",
            "description": "Gets the SSR availability types of inventory controlled.\n            "
          },
          "seatDependent": {
            "type": "boolean",
            "description": "Gets the SSR availability type of seat dependent.\n            "
          },
          "feeCode": {
            "type": "string",
            "description": "Gets the fee code.\n            ",
            "nullable": true
          },
          "nest": {
            "type": "string",
            "description": "Gets the SSR nest.\n            ",
            "nullable": true
          },
          "seatRestriction": {
            "description": "Gets the seat restriction.\n            ",
            "$ref": "#/components/schemas/SeatRestriction"
          },
          "legKey": {
            "type": "string",
            "description": "The unique identifier for the leg.\n            ",
            "nullable": true
          },
          "legDetails": {
            "description": "The leg's market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "PassengerSsrAvailability": {
        "type": "object",
        "description": "Model containing the details about the availability and price of the Ssr for a specific passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrKey": {
            "type": "string",
            "description": "The Ssr key that identifies the ssr, passenger and trip information.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The passenger key.\n            ",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Gets the SSR price.\n            ",
            "format": "decimal"
          }
        }
      },
      "BundleSegmentSsr": {
        "type": "object",
        "description": "Model information for a bundle sell service request (SSR) tied to a specific segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "Gets the SSR code.\n            ",
            "nullable": true
          },
          "passengersAvailability": {
            "type": "object",
            "description": "Get the passenger keys this is available for\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSsrAvailability"
            }
          },
          "ssrType": {
            "description": "Gets the SSR type.\n            ",
            "$ref": "#/components/schemas/SsrType"
          },
          "name": {
            "type": "string",
            "description": "Gets the SSR name.\n            ",
            "nullable": true
          },
          "limitPerPassenger": {
            "type": "integer",
            "description": "Gets the limit per passenger.\n            ",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "description": "Gets the amount available.\n            ",
            "format": "int32",
            "nullable": true
          },
          "inventoryControlled": {
            "type": "boolean",
            "description": "Gets the SSR availability types of inventory controlled.\n            "
          },
          "seatDependent": {
            "type": "boolean",
            "description": "Gets the SSR availability type of seat dependent.\n            "
          },
          "feeCode": {
            "type": "string",
            "description": "Gets the fee code.\n            ",
            "nullable": true
          },
          "nest": {
            "type": "string",
            "description": "Gets the SSR nest.\n            ",
            "nullable": true
          },
          "seatRestriction": {
            "description": "Gets the seat restriction.\n            ",
            "$ref": "#/components/schemas/SeatRestriction"
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for the segment.\n            ",
            "nullable": true
          },
          "segmentDetails": {
            "description": "The segment market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "BundleJourneySsr": {
        "type": "object",
        "description": "Model information for a bundle sell service request (SSR) tied to a specific journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "Gets the SSR code.\n            ",
            "nullable": true
          },
          "passengersAvailability": {
            "type": "object",
            "description": "Get the passenger keys this is available for\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSsrAvailability"
            }
          },
          "ssrType": {
            "description": "Gets the SSR type.\n            ",
            "$ref": "#/components/schemas/SsrType"
          },
          "name": {
            "type": "string",
            "description": "Gets the SSR name.\n            ",
            "nullable": true
          },
          "limitPerPassenger": {
            "type": "integer",
            "description": "Gets the limit per passenger.\n            ",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "description": "Gets the amount available.\n            ",
            "format": "int32",
            "nullable": true
          },
          "inventoryControlled": {
            "type": "boolean",
            "description": "Gets the SSR availability types of inventory controlled.\n            "
          },
          "seatDependent": {
            "type": "boolean",
            "description": "Gets the SSR availability type of seat dependent.\n            "
          },
          "feeCode": {
            "type": "string",
            "description": "Gets the fee code.\n            ",
            "nullable": true
          },
          "nest": {
            "type": "string",
            "description": "Gets the SSR nest.\n            ",
            "nullable": true
          },
          "seatRestriction": {
            "description": "Gets the seat restriction.\n            ",
            "$ref": "#/components/schemas/SeatRestriction"
          },
          "journeyKey": {
            "type": "string",
            "description": "The unique identifier for the journey.\n            ",
            "nullable": true
          },
          "journeyDetails": {
            "description": "The journey's market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "UpgradableSsrAvailability": {
        "type": "object",
        "description": "The upgradable bundle ssr availability model.\n            ",
        "additionalProperties": false,
        "properties": {
          "upgradeFromSsrCode": {
            "type": "string",
            "description": "The ssr code that was upgraded.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "The ssr code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "discountPercent": {
            "type": "number",
            "description": "The discount percent.\n            ",
            "format": "decimal",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The SSR number.\n            "
          },
          "isFeeWaived": {
            "type": "boolean",
            "description": "Indicates if the service fee is waived.\n            "
          },
          "amounts": {
            "type": "array",
            "description": "The service bundle SSR discount amounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleDiscountAmount"
            }
          },
          "legSsrs": {
            "type": "array",
            "description": "The available bundle leg ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleLegSsr"
            }
          },
          "segmentSsrs": {
            "type": "array",
            "description": "The available bundle segment ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSegmentSsr"
            }
          },
          "journeySsr": {
            "description": "The available bundle journey ssr.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleJourneySsr"
          }
        }
      },
      "BundleDiscountAmount": {
        "type": "object",
        "description": "The discount amount details for an SSR bundle.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The discount amount.\n            ",
            "format": "decimal"
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The SSR number.\n            "
          }
        }
      },
      "AdditionalSsrAvailability": {
        "type": "object",
        "description": "The additional ssr availability model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The ssr code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "discountPercent": {
            "type": "number",
            "description": "The discount percent.\n            ",
            "format": "decimal",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The SSR number.\n            "
          },
          "isFeeWaived": {
            "type": "boolean",
            "description": "Indicates if the service fee is waived.\n            "
          },
          "amounts": {
            "type": "array",
            "description": "The service bundle SSR discount amounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleDiscountAmount"
            }
          },
          "legSsrs": {
            "type": "array",
            "description": "The available bundle leg ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleLegSsr"
            }
          },
          "segmentSsrs": {
            "type": "array",
            "description": "The available bundle segment ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSegmentSsr"
            }
          },
          "journeySsr": {
            "description": "The available bundle journey ssr.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleJourneySsr"
          }
        }
      },
      "BundleAvailabilityRequest": {
        "type": "object",
        "description": "Represents a bundle availability request.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleCode": {
            "type": "string",
            "description": "The optional bundle code to look for.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "journeyKey": {
            "type": "string",
            "description": "The optional journey key to get bundle availability for.\n            ",
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The country of residence for the passengers.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The organization to use when evaluating availability of private fares (ATPCO faring\ncategory 15).\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "passengerKeys": {
            "type": "array",
            "description": "The passenger keys for the bundle availability requests.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "filterBundles": {
            "type": "boolean",
            "description": "A flag to indicate if the results should be filtered such that only\nbundles with ssr availability will be returned.\n            "
          }
        }
      },
      "BundleResellRequest": {
        "type": "object",
        "description": "The bundle resell request.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "Journey to resell the previously cancelled SSR bundles on.\n            ",
            "nullable": true
          },
          "passengerKeys": {
            "type": "array",
            "description": "A list of passengers to resell the SSR bundle for.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfBundleApplication": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleApplication"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleApplication": {
        "type": "object",
        "description": "The bundle application model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleApplicationKey": {
            "type": "string",
            "description": "The bundle application key.\n            ",
            "nullable": true
          },
          "bundleSetCode": {
            "type": "string",
            "description": "The code of the bundle set to which the\nbundle application applies.\n            ",
            "nullable": true
          },
          "regionFilter": {
            "description": "The details related to the region filter for the bundle application.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegionFilter"
          },
          "passengerCounts": {
            "description": "The minimum and maximum passenger counts.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DataRange"
          },
          "travelMinutes": {
            "description": "The minimum and maximum travel minutes.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DataRange"
          },
          "advancedPurchaseHours": {
            "description": "The minimum and maximum advanced purchase hours.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DataRange"
          },
          "dates": {
            "description": "The important dates associated with a bundle application.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleDates"
          },
          "appliesToAllSegments": {
            "type": "boolean",
            "description": "Indicates if the service bundle applies to all segments or not.\n            "
          },
          "codeShareType": {
            "type": "string",
            "description": "The code share type.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number.\n            "
          }
        }
      },
      "RegionFilter": {
        "type": "object",
        "description": "The region filter model.\n            ",
        "additionalProperties": false,
        "properties": {
          "origin": {
            "description": "The details related to the region of origin for the bundle application.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegionIdentifier"
          },
          "destination": {
            "description": "The details related to the destination region for the bundle application.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegionIdentifier"
          }
        }
      },
      "RegionIdentifier": {
        "type": "object",
        "description": "The region identifier model.\n            ",
        "additionalProperties": false,
        "properties": {
          "regionTypeCode": {
            "type": "string",
            "description": "The region type code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "regionType": {
            "description": "The region type.\n            ",
            "$ref": "#/components/schemas/RegionType"
          },
          "exclude": {
            "type": "boolean",
            "description": "The flag to indicate if this is not in the travel region.\n            ",
            "nullable": true
          }
        }
      },
      "DataRange": {
        "type": "object",
        "description": "The data range model.\n            ",
        "additionalProperties": false,
        "properties": {
          "minimum": {
            "type": "integer",
            "description": "The minimum range.\n            ",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "description": "The maximum range.\n            ",
            "nullable": true
          }
        }
      },
      "BundleDates": {
        "type": "object",
        "description": "The bundle dates model.\n            ",
        "additionalProperties": false,
        "properties": {
          "effective": {
            "type": "string",
            "description": "The start date when the bundle application is effective.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "effectiveSales": {
            "type": "string",
            "description": "The effective sales date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "discontinue": {
            "type": "string",
            "description": "The date when the bundle application is discontinued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "discontinueSales": {
            "type": "string",
            "description": "The discontinued sales date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "BundleSellRequest": {
        "type": "object",
        "description": "The bundle sell request.\n            ",
        "additionalProperties": false,
        "required": [
          "bundleCode"
        ],
        "properties": {
          "bundleCode": {
            "type": "string",
            "description": "The bundle code to sell.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "passengerKeys": {
            "type": "array",
            "description": "A list of passengers to sell the bundle for.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "upgradeRequest": {
            "description": "The optional ssr upgrade request.  If left blank,\nthe default bundle ssr(s) will be sold (if available).\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrByKeysRequestv2"
          }
        }
      },
      "IJsonResponseOfBundleSetDetails": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleSetDetails"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleSetDetails": {
        "type": "object",
        "description": "The bundle set details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleCodes": {
            "type": "array",
            "description": "The list of bundle codes associated with the bundle set.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FareOverrideRequest": {
        "type": "object",
        "description": "Defines a fare override.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The new fare amount.\n            ",
            "format": "decimal"
          },
          "overridePublishedPrice": {
            "type": "boolean",
            "description": "Whether the price being overridden is a published price or a discounted price\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIEnumerableOfFareRule": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareRule"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfFareRule": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareRule"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIJsonResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/IJsonResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PrintItineraryRequest": {
        "type": "object",
        "description": "Defines the print itinerary request model.\n            ",
        "additionalProperties": false,
        "required": [
          "printerCode"
        ],
        "properties": {
          "printerCode": {
            "type": "string",
            "description": "The printer code.\n            ",
            "minLength": 1
          },
          "numberOfCopies": {
            "type": "integer",
            "description": "The number of copies.\nDefaults to 1 if not specified.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfBookingPenalty": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPenalty"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingPenalty": {
        "type": "object",
        "description": "Defines booking penalty.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyPenalties": {
            "type": "array",
            "description": "The journey penalties.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneyPenalty"
            }
          }
        }
      },
      "JourneyPenalty": {
        "type": "object",
        "description": "Defines journey penalty.\n            ",
        "additionalProperties": false,
        "properties": {
          "appliedFeeType": {
            "description": "The applied fee type.\n            ",
            "$ref": "#/components/schemas/PenaltyFeeType"
          },
          "cancelPenaltyFeeInfo": {
            "description": "The cancel penalty fee info.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PenaltyFeeTypeInfo"
          },
          "changePenaltyFeeInfo": {
            "description": "The change penalty fee info.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PenaltyFeeTypeInfo"
          },
          "movePenaltyFeeInfo": {
            "description": "The move penalty fee info.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PenaltyFeeTypeInfo"
          },
          "changeAllowed": {
            "type": "boolean",
            "description": "The change allowed.\n            "
          },
          "collectedCurrencyCode": {
            "type": "string",
            "description": "The collected currency code.\n            ",
            "nullable": true
          },
          "feeWaived": {
            "type": "boolean",
            "description": "The flag indicating whether fee is waived.\n            "
          },
          "infantCancelFees": {
            "type": "array",
            "description": "The infant cancel fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          },
          "infantChangeFees": {
            "type": "array",
            "description": "The infant change fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          },
          "infantMoveFees": {
            "type": "array",
            "description": "The infant move fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key.\n            ",
            "nullable": true
          },
          "minimumPassengers": {
            "type": "integer",
            "description": "The minimum passengers.\n            "
          },
          "spoilageWaived": {
            "type": "boolean",
            "description": "The spoilage waived flag.\n            "
          }
        }
      },
      "PenaltyFeeType": {
        "type": "integer",
        "description": "Enumeration representing all the different penalty fee types.\n            \n\n0 = None\n1 = Change\n2 = Cancel\n3 = Move",
        "x-enumNames": [
          "None",
          "Change",
          "Cancel",
          "Move"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "PenaltyFeeTypeInfo": {
        "type": "object",
        "description": "Defines penalty fee type info.\n            ",
        "additionalProperties": false,
        "properties": {
          "feeApplication": {
            "description": "The cancel fee application.\n            ",
            "$ref": "#/components/schemas/FeeApplication"
          },
          "passengerFees": {
            "type": "array",
            "description": "The cancel fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerFee"
            }
          },
          "penaltyType": {
            "description": "The cancel penalty type.\n            ",
            "$ref": "#/components/schemas/PenaltyType"
          }
        }
      },
      "PenaltyType": {
        "type": "integer",
        "description": "Enumeration representing all the different penalty types.\n            \n\n0 = None\n1 = WithFee\n2 = NonRefundable",
        "x-enumNames": [
          "None",
          "WithFee",
          "NonRefundable"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PriceRequest": {
        "type": "object",
        "description": "Defines price request.\n            ",
        "additionalProperties": false,
        "properties": {
          "forceRefareItinerary": {
            "type": "boolean",
            "description": "Set to true to force the system to select new fares for all journeys -- including those for which a fare has\nalready been applied.\n            "
          },
          "buildConnections": {
            "type": "boolean",
            "description": "When set to true, unpriced journeys will be combined with other journeys in the PNR, given that the connection\nexists in schedule and is priceable.\n            "
          },
          "sourceBookingPointOfSale": {
            "description": "The source booking point of sale to use. If set, the booking's source point of sale will be updated to the\nspecified value, and will be used for evaluation of fare sales restrictions, tax rules that require the\norganization, etc. Note that updating the source point of sale will force RefareItinerary to true.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPointOfSale"
          },
          "typeOFSale": {
            "description": "Additional details that can drive the pricing results. Only ResidentCountry and PromotionCode will be used for\npricing decisions.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TypeOfSale"
          }
        }
      },
      "IJsonResponseOfIListOfEquipmentBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EquipmentBase"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EquipmentBase": {
        "type": "object",
        "description": "Represents the basic equipment information response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "compartments": {
            "type": "array",
            "description": "The compartment information.\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "4.4.1 - Compartments are always blank so this property will be deprecated",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CompartmentInformation"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The market code.\n            ",
            "nullable": true
          },
          "equipmentCategory": {
            "description": "The equipment category.\n            ",
            "$ref": "#/components/schemas/EquipmentCategory"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The available units.\n            ",
            "format": "int32"
          },
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the journey.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfEquipmentBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentBase"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfEquipment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Equipment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Equipment": {
        "type": "object",
        "description": "Represents the equipment information response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "compartments": {
            "type": "array",
            "description": "The compartment information.\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "4.4.1 - Compartments are always blank so this property will be deprecated",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CompartmentInformation"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The market code.\n            ",
            "nullable": true
          },
          "equipmentCategory": {
            "description": "The equipment category.\n            ",
            "$ref": "#/components/schemas/EquipmentCategory"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The available units.\n            ",
            "format": "int32"
          },
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the journey.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "Indicates the supported seat properties in effect on this equipment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatMapProperty"
            }
          },
          "ssrs": {
            "type": "array",
            "description": "Indicates the supported seat-dependent SSRs in effect on this equipment.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfEquipment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Equipment"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AvailabilityStandbyRequest": {
        "type": "object",
        "description": "Standby availability request.\n            ",
        "additionalProperties": false,
        "required": [
          "journeyKey"
        ],
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The journey key to reference in the standby availability request.\n            ",
            "minLength": 1
          },
          "classControl": {
            "description": "The fare class control.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareClassControl"
          },
          "numberOfFaresPerJourney": {
            "type": "integer",
            "description": "The number of fares per journey to be returned. If not set, it will use the default optimized values.\n            ",
            "format": "int32",
            "nullable": true
          },
          "returnEmptyResults": {
            "type": "boolean",
            "description": "Indicates if empty results could be returned as a response.\n            ",
            "nullable": true
          }
        }
      },
      "CommitRequestv2": {
        "type": "object",
        "description": "Represents version two of the booking commit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "receivedBy": {
            "type": "string",
            "description": "The received by name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "restrictionOverride": {
            "type": "boolean",
            "description": "If set to true, booking will be committed even if Price is not valid, granted that agent's role\nhas permission to override.\n            "
          },
          "hold": {
            "description": "The booking hold date.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingHold"
          },
          "notifyContacts": {
            "type": "boolean",
            "description": "The notify contacts flag.\n            "
          },
          "comments": {
            "type": "array",
            "description": "The optional comments to add.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingCommentRequest"
            }
          },
          "contactTypesToNotify": {
            "type": "array",
            "description": "List of contact type codes for notification.\nPlease note that this is a list of chars not a list of strings.\nFor example, there is usually a primary contact represented with 'P'.\nThese are configurable so valid types will depend on your environment.\n            ",
            "nullable": true,
            "items": {
              "type": "string",
              "maxLength": 1
            }
          },
          "receivedReference": {
            "type": "string",
            "description": "The received by reference.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "BookingGroupNameRequest": {
        "type": "object",
        "description": "The booking group name request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingGroupName": {
            "type": "string",
            "description": "The booking group name.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfNullableDateTime": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "The payload data.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfEquipmentBasev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EquipmentBasev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EquipmentBasev2": {
        "type": "object",
        "description": "Represents the basic equipment information response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The market code.\n            ",
            "nullable": true
          },
          "equipmentCategory": {
            "description": "The equipment category.\n            ",
            "$ref": "#/components/schemas/EquipmentCategory"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The available units.\n            ",
            "format": "int32"
          },
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the journey.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfEquipmentBasev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentBasev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfEquipmentv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Equipmentv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Equipmentv2": {
        "type": "object",
        "description": "Represents the equipment information response model.\n            ",
        "additionalProperties": false,
        "properties": {
          "marketInformation": {
            "description": "The market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.\n            ",
            "nullable": true
          },
          "marketingCode": {
            "type": "string",
            "description": "The market code.\n            ",
            "nullable": true
          },
          "equipmentCategory": {
            "description": "The equipment category.\n            ",
            "$ref": "#/components/schemas/EquipmentCategory"
          },
          "availableUnits": {
            "type": "integer",
            "description": "The available units.\n            ",
            "format": "int32"
          },
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the journey.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "Indicates the supported seat properties in effect on this equipment.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatMapProperty"
            }
          },
          "ssrs": {
            "type": "array",
            "description": "Indicates the supported seat-dependent SSRs in effect on this equipment.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfEquipmentv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Equipmentv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfString": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "MoveJourneyRequest": {
        "type": "object",
        "description": "Defines the move journey request.\n            ",
        "additionalProperties": false,
        "required": [
          "fromJourneyKey",
          "toJourneyKey",
          "fareKey"
        ],
        "properties": {
          "fromJourneyKey": {
            "type": "string",
            "description": "The key of the journey that is being moved from.\n            ",
            "minLength": 1
          },
          "toJourneyKey": {
            "type": "string",
            "description": "The key of the journey that is being moved to.\n            ",
            "minLength": 1
          },
          "fareKey": {
            "type": "string",
            "description": "The fare key to move to.\n            ",
            "minLength": 1
          },
          "standbyPriorityCode": {
            "type": "string",
            "description": "Standby priority code.\n            ",
            "nullable": true
          },
          "inventoryControlType": {
            "description": "Inventory control.\n            ",
            "$ref": "#/components/schemas/InventoryControlType"
          },
          "changeReasonCode": {
            "description": "Change reason code.\n            ",
            "$ref": "#/components/schemas/StatelessChangeReasonCodes"
          },
          "bookingComment": {
            "type": "string",
            "description": "A comment to be added to the effected booking.\n            ",
            "nullable": true
          },
          "adHocConnection": {
            "type": "boolean",
            "description": "Flag representing if an ad hoc connection is needed.\n            "
          },
          "adHocIsForGeneralUse": {
            "type": "boolean",
            "description": "Flag that sets the \"For General Use\" setting when creating an ad hoc connection.\n            "
          }
        }
      },
      "StatelessChangeReasonCodes": {
        "type": "integer",
        "description": "Specifies the change reason code for a stateless booking.\n            \n\n0 = Irop\n1 = ScheduleChange\n2 = Move\n3 = VoluntaryFlyAhead\n4 = InvoluntaryFlyAhead",
        "x-enumNames": [
          "Irop",
          "ScheduleChange",
          "Move",
          "VoluntaryFlyAhead",
          "InvoluntaryFlyAhead"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfIListOfBookingQueue": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingQueue"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingQueue": {
        "type": "object",
        "description": "The booking queue model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingQueueKey": {
            "type": "string",
            "description": "The booking queue key.\n            ",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "A summary on why the booking was placed in the queue.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of event that triggered placement of the booking in the queue.\n            ",
            "$ref": "#/components/schemas/QueueEventType"
          },
          "watchListKey": {
            "type": "string",
            "description": "The watch list key.\n            ",
            "nullable": true
          },
          "details": {
            "type": "array",
            "description": "The list of booking queue details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingQueueDetail"
            }
          }
        }
      },
      "BookingQueueDetail": {
        "type": "object",
        "description": "The detail in a booking queue model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingQueueDetailKey": {
            "type": "string",
            "description": "The booking queue detail key.\n            ",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "The booking queue detail.\n            ",
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The detail passenger alternate key.\n            ",
            "nullable": true
          },
          "passengerTicketInfo": {
            "description": "The passenger ticket info detail.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTicketInfo"
          }
        }
      },
      "BookingQueuesRequest": {
        "type": "object",
        "description": "The booking request base model for retrieving booking queues.\n            ",
        "additionalProperties": false,
        "properties": {
          "password": {
            "type": "string",
            "description": "The Password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique passenger identifier key.\n            ",
            "nullable": true
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique segment key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfRetrieveBookingQueueResponseItem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RetrieveBookingQueueResponseItem"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "RetrieveBookingQueueResponseItem": {
        "type": "object",
        "description": "The booking queue response items for retrieving booking queue items.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "bookingQueueRestriction": {
            "description": "The queue restriction.\n            ",
            "$ref": "#/components/schemas/BookingQueueRestriction"
          },
          "queueCode": {
            "type": "string",
            "description": "The queue code.\n            ",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The notes.\n            ",
            "nullable": true
          },
          "inProgress": {
            "type": "boolean",
            "description": "The call status.\n            "
          },
          "priorityDate": {
            "type": "string",
            "description": "The priority date.\n            ",
            "format": "date-time"
          },
          "domainCode": {
            "type": "string",
            "description": "The domain code.\n            ",
            "nullable": true
          },
          "queueEventType": {
            "description": "The queue event type.\n            ",
            "$ref": "#/components/schemas/QueueEventType"
          }
        }
      },
      "BookingQueueRestriction": {
        "type": "integer",
        "description": "Defines the restrictions associated with a BookingQueue\n            \n\n0 = Restricted\n1 = AddAllowedOnly\n2 = Allowed",
        "x-enumNames": [
          "Restricted",
          "AddAllowedOnly",
          "Allowed"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIListOfWatchListResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/WatchListResponse"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "WatchListResponse": {
        "type": "object",
        "description": "The watch list response.\n            ",
        "additionalProperties": false,
        "properties": {
          "referenceNumber": {
            "type": "string",
            "description": "The watch list match criteria reference number.\n            ",
            "nullable": true
          },
          "watchListKey": {
            "type": "string",
            "description": "The watch list key.\n            ",
            "nullable": true
          },
          "watchListPersonKey": {
            "type": "string",
            "description": "The watch list person key.\n            ",
            "nullable": true
          },
          "matchKey": {
            "type": "string",
            "description": "A key matching an API key depending on the MatchKeyType.\n            ",
            "nullable": true
          },
          "matchKeyType": {
            "description": "An enum indicating which API key MatchKey matches.\n            ",
            "$ref": "#/components/schemas/MatchKeyType"
          },
          "matchDetail": {
            "type": "string",
            "description": "The details of the person matched.\n            ",
            "nullable": true
          },
          "matchType": {
            "description": "What the person was matched by.\n            ",
            "$ref": "#/components/schemas/MatchType"
          }
        }
      },
      "MatchKeyType": {
        "type": "integer",
        "description": "The match key type enumeration.\n            \n\n0 = Default\n1 = PassengerAlternateKey\n2 = ContactTypeCode\n3 = PaymentKey",
        "x-enumNames": [
          "Default",
          "PassengerAlternateKey",
          "ContactTypeCode",
          "PaymentKey"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "MatchType": {
        "type": "integer",
        "description": "Match list enumeration.\n            \n\n0 = Default\n1 = PaymentAccountNumber\n2 = ContactEmailAddress\n3 = ContactPhone\n4 = ContactFullName\n5 = ContactLastNameFirstInitial\n6 = ContactFullAddress\n7 = ContactAddress\n8 = PassengerDOB\n9 = PassengerFullName\n10 = PassengerLastName\n11 = TravelDocNumber\n12 = TravelDocFullName\n13 = TravelDocLastName",
        "x-enumNames": [
          "Default",
          "PaymentAccountNumber",
          "ContactEmailAddress",
          "ContactPhone",
          "ContactFullName",
          "ContactLastNameFirstInitial",
          "ContactFullAddress",
          "ContactAddress",
          "PassengerDOB",
          "PassengerFullName",
          "PassengerLastName",
          "TravelDocNumber",
          "TravelDocFullName",
          "TravelDocLastName"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      "IJsonResponseOfIListOfWatchListPerson": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/WatchListPerson"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "WatchListPerson": {
        "type": "object",
        "description": "The watch list person.\n            ",
        "additionalProperties": false,
        "properties": {
          "watchListPersonKey": {
            "type": "string",
            "description": "The watch list person key.\n            ",
            "nullable": true
          },
          "names": {
            "type": "array",
            "description": "The watch list person name list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/WatchListPersonName"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The watch list person address list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The watch list person phone list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "emails": {
            "type": "array",
            "description": "The watch list person email list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EmailCreateRequest"
            }
          },
          "payments": {
            "type": "array",
            "description": "The watch list person payment list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/WatchListPersonPayment"
            }
          },
          "travelDocuments": {
            "type": "array",
            "description": "The watch list person travel document list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/WatchListPersonTravelDocument"
            }
          },
          "information": {
            "type": "array",
            "description": "The watch list person information list.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "comments": {
            "type": "array",
            "description": "The watch list person comment list.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WatchListPersonName": {
        "type": "object",
        "description": "The watch list person name.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The watch list person name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nameType": {
            "description": "The watch list person name type.\n            ",
            "$ref": "#/components/schemas/NameType"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The watch list person date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "NameType": {
        "type": "integer",
        "description": "Specifies the name type to define the true name for a person or an alias.\n            \n\n0 = True\n1 = Alias\n2 = Variant",
        "x-enumNames": [
          "True",
          "Alias",
          "Variant"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "EmailCreateRequest": {
        "type": "object",
        "description": "Defines the person email create address.\n            ",
        "additionalProperties": false,
        "required": [
          "email",
          "type"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address value.\n            ",
            "maxLength": 266,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the email is the default.\n            "
          },
          "type": {
            "type": "string",
            "description": "The type code of the email address.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          }
        }
      },
      "WatchListPersonPayment": {
        "type": "object",
        "description": "The watch list person form of payment.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The watch list person payment account number.\n            ",
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The watch list person payment method code.\n            ",
            "nullable": true
          }
        }
      },
      "WatchListPersonTravelDocument": {
        "type": "object",
        "description": "The watch list person travel document.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The watch list person name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "number": {
            "type": "string",
            "description": "The watch list person travel document number.\n            ",
            "nullable": true
          },
          "documentTypeCode": {
            "type": "string",
            "description": "The watch list person travel document type code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfWatchListPerson": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WatchListPerson"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingsCommentRequest": {
        "type": "object",
        "description": "Defines a booking comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Indicates where the comment will be seen.\n            ",
            "$ref": "#/components/schemas/CommentType"
          },
          "text": {
            "type": "string",
            "description": "The text of the comment.\n            ",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the comment.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfItineraryQuote": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ItineraryQuote"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ItineraryQuote": {
        "type": "object",
        "description": "Defines the itinerary quote model.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengers": {
            "type": "object",
            "description": "The dictionary of passengers.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "journeys": {
            "type": "array",
            "description": "The list of journeys.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Journey"
            }
          },
          "breakdown": {
            "description": "The itinerary pricing breakdown.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPriceBreakdown"
          }
        }
      },
      "ItineraryQuoteRequest": {
        "type": "object",
        "description": "Defines the itinerary booking quote request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "currencyCode"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "description": "The list of selected sell keys to be added to the booking.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SellKey"
            }
          },
          "passengers": {
            "description": "The list of passengers.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "currencyCode": {
            "type": "string",
            "description": "The desired currency code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "infantCount": {
            "type": "integer",
            "description": "The number of infants to be added.\n            ",
            "format": "int32",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promo code to apply.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The acting source organization code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "ssrs": {
            "type": "array",
            "description": "Sell service requests to quote.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrsStatelessRequest"
            }
          }
        }
      },
      "SellKey": {
        "type": "object",
        "description": "Sell key represents the journey and the fare sell keys to combine to what journey and fare will be sold.\n            ",
        "additionalProperties": false,
        "required": [
          "journeyKey",
          "fareAvailabilityKey"
        ],
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The journey sell key.\n            ",
            "minLength": 1
          },
          "fareAvailabilityKey": {
            "type": "string",
            "description": "The fare sell key.\n            ",
            "minLength": 1
          },
          "standbyPriorityCode": {
            "type": "string",
            "description": "The stand by priority code.\n            ",
            "nullable": true
          },
          "inventoryControl": {
            "description": "The reserving inventory action of the journey once sold by the system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InventoryControlType"
          }
        }
      },
      "PassengerTypeCriteria": {
        "type": "object",
        "description": "Defines the availability criteria passenger types.\n            ",
        "additionalProperties": false,
        "required": [
          "types"
        ],
        "properties": {
          "types": {
            "type": "array",
            "description": "The list of passenger types and counts.\n            ",
            "items": {
              "$ref": "#/components/schemas/PassengerSearchCriteria"
            }
          },
          "residentCountry": {
            "type": "string",
            "description": "The passenger resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "PassengerSearchCriteria": {
        "type": "object",
        "description": "Model representing an passenger group type for availability search.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "count"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The passenger type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code to be applied.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "The number of passenger for the type.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          }
        }
      },
      "SsrsStatelessRequest": {
        "type": "object",
        "description": "Ssrs by type model allows multiple Ssr requests for a specific type.\n            ",
        "additionalProperties": false,
        "required": [
          "market"
        ],
        "properties": {
          "market": {
            "description": "Market for the segment.\n            ",
            "$ref": "#/components/schemas/MarketInformation"
          },
          "items": {
            "type": "array",
            "description": "SSR request items.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrRequestByPassengerType"
            }
          }
        }
      },
      "SsrRequestByPassengerType": {
        "type": "object",
        "description": "SSR request for a single passenger type.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerType"
        ],
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The passenger type.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "ssrs": {
            "type": "array",
            "description": "The Ssr code.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrDesignatorRequest"
            }
          }
        }
      },
      "SsrDesignatorRequest": {
        "type": "object",
        "description": "SSR request for a Ssr designator request.\n            ",
        "additionalProperties": false,
        "required": [
          "ssrCode"
        ],
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The Ssr code.\n            ",
            "minLength": 1
          },
          "count": {
            "type": "integer",
            "description": "The number of items to include. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "designator": {
            "description": "The designator if different than the segment. This will only be passed to select a unique leg on flights with\nmultiple legs.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketDesignator"
          }
        }
      },
      "BookingQueueRequestv2": {
        "type": "object",
        "description": "The booking queue request v2 model.\n            ",
        "additionalProperties": false,
        "required": [
          "queueCode"
        ],
        "properties": {
          "queueCode": {
            "type": "string",
            "description": "The code for the booking queue.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "notes": {
            "type": "string",
            "description": "The notes for the booking request.\n            ",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The Password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "nullable": true
          }
        }
      },
      "BookingQueueDeleteRequest": {
        "type": "object",
        "description": "The booking queue delete request.\n            ",
        "additionalProperties": false,
        "required": [
          "queueCode",
          "authorizedBy"
        ],
        "properties": {
          "queueCode": {
            "type": "string",
            "description": "The code for the booking queue.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "notes": {
            "type": "string",
            "description": "The notes for the booking request.\n            ",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The Password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "nullable": true
          },
          "authorizedBy": {
            "type": "string",
            "description": "The authorizing agent.\n            ",
            "minLength": 1
          }
        }
      },
      "AvailabilitySimpleRequestv2": {
        "type": "object",
        "description": "Model representing an availability simple request v2.\n            ",
        "additionalProperties": false,
        "required": [
          "origin",
          "destination",
          "beginDate",
          "passengers"
        ],
        "properties": {
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The destination station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "searchDestinationMacs": {
            "type": "boolean",
            "description": "Flag indicating to search destination mac stations.\n            ",
            "nullable": true
          },
          "searchOriginMacs": {
            "type": "boolean",
            "description": "Flag indicating to search origin mac stations.\n            ",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The departure date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The return date. This date represents the return trip's selected day.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passengers": {
            "description": "The list of passengers.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "codes": {
            "description": "The different code criteria that can be set that can influence availability response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCodeCriteriav2"
          },
          "filters": {
            "description": "Filters applied to the response for a single direction.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCriteriaFilter"
          },
          "taxesAndFees": {
            "description": "The taxes and fees rollup mode which affects the pricing information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TaxesAndFeesRollupMode"
          },
          "lowFarePrice": {
            "type": "number",
            "description": "Used to validate that the low fare prices retrieved from the low fare endpoint is valid.\n            ",
            "format": "decimal",
            "deprecated": true,
            "x-deprecatedMessage": "4.3.0 - This property is not valid when using the dotRez API.",
            "nullable": true
          },
          "ssrCollectionsMode": {
            "description": "Determines if SSR nest information will be returned on the legs for each available journey segments.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilitySsrCollectionsMode"
          },
          "numberOfFaresPerJourney": {
            "type": "integer",
            "description": "The number of fares per journey to be returned. If not set it will use the default optimized values\n            ",
            "format": "int32",
            "nullable": true
          },
          "returnEmptyResults": {
            "type": "boolean",
            "description": "Flag determining if empty schedule responses will be returned.\nDefaults to false.\n            ",
            "nullable": true
          }
        }
      },
      "AvailabilityRequestv2": {
        "type": "object",
        "description": "Defines an availability request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "criteria"
        ],
        "properties": {
          "passengers": {
            "description": "The list of passengers.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "criteria": {
            "type": "array",
            "description": "The list of availability search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/AvailabilityCriteria"
            }
          },
          "codes": {
            "description": "The different code criteria that can be set that can influence availability response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCodeCriteriav2"
          },
          "taxesAndFees": {
            "description": "The taxes and fees rollup mode which affects the pricing information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TaxesAndFeesRollupMode"
          },
          "numberOfFaresPerJourney": {
            "type": "integer",
            "description": "The number of fares per journey to be returned. If not set it will use the default optimized values\n            ",
            "format": "int32",
            "nullable": true
          },
          "returnEmptyResults": {
            "type": "boolean",
            "description": "Flag determining if empty schedule responses will be returned.\nDefaults to false.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfSeatMapStatelessAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatMapStatelessAvailability"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingSellRequest": {
        "type": "object",
        "description": "Trip sell request represents the data needed to sell journeys to a booking.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "currencyCode"
        ],
        "properties": {
          "journeys": {
            "description": "The journey information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/JourneySellRequest"
          },
          "contact": {
            "description": "The primary contact.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactRequest"
          },
          "passengers": {
            "type": "array",
            "description": "The list of passengers.\n            ",
            "items": {
              "$ref": "#/components/schemas/BookingPassengerRequest"
            }
          },
          "residentCountry": {
            "type": "string",
            "description": "The acting resident country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The desired currency code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "promotionCode": {
            "type": "string",
            "description": "The promo code to apply.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The acting source organization code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "loyalty": {
            "description": "Controls whether to use monetary fares, points-based fares, or both.\nDefaults to monetary only.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripLoyaltyFilter"
          },
          "serviceBundleCodes": {
            "type": "array",
            "description": "Optional list of bundle codes from a specific fare of a flight to be added to the booking if `ApplyServiceBundle`\nis set to `Yes` or `Copy`.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "applyServiceBundle": {
            "description": "Determines whether to sell bundles in the booking. Can also be used for cancel or rebook situations.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ApplyServiceBundle"
          }
        }
      },
      "JourneySellRequest": {
        "type": "object",
        "description": "Journey request represents the trip sell request but with only information needed for a booking sell.\n            ",
        "additionalProperties": false,
        "required": [
          "keys"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "description": "The list of selected sell keys to be added to the booking.\n            ",
            "items": {
              "$ref": "#/components/schemas/SellKey"
            }
          },
          "preventOverlap": {
            "type": "boolean",
            "description": "Used to explicitly control support for flight overlaps. It works together with the ‘Allow Sell of Flight Overlap’\nrole setting.  Overlaps will be allowed only when PreventOverlaps is FALSE and the user has permissions to sell\noverlaps.\n            ",
            "nullable": true
          },
          "suppressPassengerAgeValidation": {
            "type": "boolean",
            "description": "Flag indicating if passenger and infant age validation will be skipped.\n            ",
            "nullable": true
          }
        }
      },
      "BookingPassengerRequest": {
        "type": "object",
        "description": "Defines the the passenger and associated ssr request.\n            ",
        "additionalProperties": false,
        "required": [
          "passenger"
        ],
        "properties": {
          "passenger": {
            "description": "The passenger information.\n            ",
            "$ref": "#/components/schemas/PassengerRequest"
          },
          "discountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "ssrs": {
            "type": "array",
            "description": "The ssrs to initially add.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/JourneySsrRequest"
            }
          }
        }
      },
      "JourneySsrRequest": {
        "type": "object",
        "description": "SSR request for a single journey Ssr.\n            ",
        "additionalProperties": false,
        "required": [
          "ssrCode",
          "journeyKey"
        ],
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The Ssr code.\n            ",
            "minLength": 1
          },
          "count": {
            "type": "integer",
            "description": "The number of items to include. Defaults to 1.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Notes associated with this Ssr.\n            ",
            "nullable": true
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key.\n            ",
            "minLength": 1
          }
        }
      },
      "TripLoyaltyFilter": {
        "type": "integer",
        "description": "Trip loyalty filter enumeration for selling journeys on a booking.\n            \n\n0 = MonetaryOnly\n1 = PointsOnly\n2 = PointsAndMonetary",
        "x-enumNames": [
          "MonetaryOnly",
          "PointsOnly",
          "PointsAndMonetary"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ApplyServiceBundle": {
        "type": "integer",
        "description": "The apply service bundle enumeration.\n            \n\n0 = Yes\n1 = No\n2 = Copy",
        "x-enumNames": [
          "Yes",
          "No",
          "Copy"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "TripSellRequest": {
        "type": "object",
        "description": "Trip sell request represents the data needed to sell journeys to a booking.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "currencyCode"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "description": "The list of selected sell keys to be added to the booking.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SellKey"
            }
          },
          "passengers": {
            "description": "The list of passengers.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "currencyCode": {
            "type": "string",
            "description": "The desired currency code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "infantCount": {
            "type": "integer",
            "description": "The number of infants to be added.\n            ",
            "format": "int32",
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promo code to apply.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The acting source organization code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "preventOverlap": {
            "type": "boolean",
            "description": "Used to explicitly control support for flight overlaps. It works together with the ‘Allow Sell of Flight Overlap’\nrole setting.  Overlaps will be allowed only when PreventOverlaps is FALSE and the user has permissions to sell\noverlaps.\n            ",
            "nullable": true
          },
          "suppressPassengerAgeValidation": {
            "type": "boolean",
            "description": "Flag indicating if passenger and infant age validation will be skipped.\n            ",
            "nullable": true
          },
          "loyalty": {
            "description": "Controls whether to use monetary fares, points-based fares, or both.\nDefaults to monetary only.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripLoyaltyFilter"
          },
          "serviceBundleCodes": {
            "type": "array",
            "description": "Optional list of bundle codes from a specific fare of a flight to be added to the booking if `ApplyServiceBundle`\nis set to `Yes` or `Copy`.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "applyServiceBundle": {
            "description": "Determines whether to sell bundles in the booking. Can also be used for cancel or rebook situations.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ApplyServiceBundle"
          }
        }
      },
      "IJsonResponseOfLowFareAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareAvailability"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "LowFareAvailability": {
        "type": "object",
        "description": "Low fare availability contains all information returned when requesting a low fare trip availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "lowFareDateMarkets": {
            "type": "array",
            "description": "The collection of low fare results for a specific date and market.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LowFareDateMarket"
            }
          },
          "includeTaxesAndFees": {
            "type": "boolean",
            "description": "Flag indicating if the trip includes taxes and fees.\n            "
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "LowFareDateMarket": {
        "type": "object",
        "description": "Low fare availability contains all information returned when requesting a low fare trip availability.\n            ",
        "additionalProperties": false,
        "properties": {
          "lowestFareAmount": {
            "description": "The lowest passenger fare amount for the date market.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareAmount"
          },
          "lowFares": {
            "type": "array",
            "description": "The low fare information for a specific flight.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LowFare"
            }
          },
          "destination": {
            "type": "string",
            "description": "The destination station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date. This is the date only.\n            ",
            "format": "date-time"
          }
        }
      },
      "LowFareAmount": {
        "type": "object",
        "description": "Low fare passengers contains the passenger type specific data.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareAmount": {
            "type": "number",
            "description": "Fare Amount for Passenger Type.\n            ",
            "format": "decimal"
          },
          "farePointAmount": {
            "type": "number",
            "description": "Fare Point Amount.\n            ",
            "format": "decimal"
          },
          "taxesAndFeesAmount": {
            "type": "number",
            "description": "Taxes and Fees Amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "LowFare": {
        "type": "object",
        "description": "Low fare contains the information for a specific flight.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengers": {
            "type": "object",
            "description": "Low fare passenger collection with they key of passenger type.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/LowFarePassenger"
            }
          },
          "bookingClasses": {
            "type": "array",
            "description": "Booking classes available.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "arrivalTime": {
            "type": "string",
            "description": "The arrival date and time.\n            ",
            "format": "date-time"
          },
          "departureTime": {
            "type": "string",
            "description": "The departure date and time.\n            ",
            "format": "date-time"
          },
          "legs": {
            "type": "array",
            "description": "Leg information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LowFareLeg"
            }
          },
          "availableCount": {
            "type": "integer",
            "description": "Available count for the fare.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "productClass": {
            "type": "string",
            "description": "The product class for the fare.\n            ",
            "nullable": true
          },
          "referenceFareKey": {
            "type": "string",
            "description": "The reference fare sell key.\n            ",
            "nullable": true
          }
        }
      },
      "LowFarePassenger": {
        "type": "object",
        "description": "Low fare passengers contains the passenger type specific data.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareAmount": {
            "type": "number",
            "description": "Fare Amount for Passenger Type.\n            ",
            "format": "decimal"
          },
          "farePointAmount": {
            "type": "number",
            "description": "Fare Point Amount.\n            ",
            "format": "decimal"
          },
          "taxesAndFeesAmount": {
            "type": "number",
            "description": "Taxes and Fees Amount.\n            ",
            "format": "decimal"
          },
          "discountCode": {
            "type": "string",
            "description": "Passenger Discount Code.\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Passenger Type.\n            ",
            "nullable": true
          }
        }
      },
      "LowFareLeg": {
        "type": "object",
        "description": "Low fare leg information.\n            ",
        "additionalProperties": false,
        "properties": {
          "arrivalTime": {
            "type": "string",
            "description": "The arrival date and time.\n            ",
            "format": "date-time"
          },
          "departureTime": {
            "type": "string",
            "description": "The departure date and time.\n            ",
            "format": "date-time"
          },
          "destination": {
            "type": "string",
            "description": "The destination station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "Gets or sets the flight number.\n            ",
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "Gets or sets the carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "equipmentType": {
            "type": "string",
            "description": "The leg type of the equipment.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "operatingCarrier": {
            "type": "string",
            "description": "The operating carrier code.\n            ",
            "nullable": true
          }
        }
      },
      "LowFareAvailabilitySearchSimpleRequest": {
        "type": "object",
        "description": "Model representing a low fare availability search simple request.\n            ",
        "additionalProperties": false,
        "required": [
          "origin",
          "destination",
          "beginDate",
          "passengers"
        ],
        "properties": {
          "origin": {
            "type": "string",
            "description": "The origin station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The destination station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "beginDate": {
            "type": "string",
            "description": "The departure date. This date represents the selected day by the user, the date range will be calculated from this\ndate as the starting date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The return date. This date represents the returning trips selected day by the user, the date range will be\ncalculated from this date and the starting date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passengers": {
            "type": "array",
            "description": "The list of passenger search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/PassengerSearchCriteria"
            }
          },
          "promotionCode": {
            "type": "string",
            "description": "The promo code to be applied.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The search currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "loyaltyFilter": {
            "description": "The loyalty fare filter.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LoyaltyFilter"
          },
          "daysToLeft": {
            "type": "integer",
            "description": "The number of days to subtract from the begin/end date.\n            ",
            "format": "int32",
            "nullable": true
          },
          "daysToRight": {
            "type": "integer",
            "description": "The number of days to add to the begin/end date.\n            ",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "LowFareAvailabilityRequest": {
        "type": "object",
        "description": "Defines the low are availability request.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "criteria"
        ],
        "properties": {
          "bypassCache": {
            "type": "boolean",
            "description": "Flag indicating to bypass the low fare cache and use real time results instead of cached results.\n            ",
            "nullable": true
          },
          "getAllDetails": {
            "type": "boolean",
            "description": "Flag indicating to return all data used for low fare caching, this is used for external caching providers.\n            ",
            "nullable": true
          },
          "includeTaxesAndFees": {
            "type": "boolean",
            "description": "Flag indicating to include taxes and fees on the response.\n            ",
            "nullable": true
          },
          "passengers": {
            "description": "The passenger type criteria.\nIf caching is on this field will not be honored, and will use the previously cached PassengerTypes.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "codes": {
            "description": "The low fare code criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareAvailabilityCodeCriteria"
          },
          "filters": {
            "description": "The low fare filtering criteria.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareAvailabilityFilterCriteria"
          },
          "criteria": {
            "type": "array",
            "description": "The list of low fare availability search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/LowFareAvailabilityCriteria"
            }
          }
        }
      },
      "LowFareAvailabilityCodeCriteria": {
        "type": "object",
        "description": "Describes the low fare availability code criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency code is which to return the results.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "sourceOrganization": {
            "type": "string",
            "description": "The specified organization code (aka travel agencies) to allow for discounts or private fares.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "promotionCode": {
            "type": "string",
            "description": "The promotion code to be applied.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "LowFareAvailabilityFilterCriteria": {
        "type": "object",
        "description": "Describes the low fare availability filtering criteria.\n            ",
        "additionalProperties": false,
        "properties": {
          "groupByDate": {
            "type": "boolean",
            "description": "Flag indicating to return only one low fare per date when multiple markets are requested.\n            ",
            "nullable": true
          },
          "flightFilter": {
            "description": "Controls the flights that are included in a low fare availability response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareFlightFilter"
          },
          "loyalty": {
            "description": "Filters fares based on loyalty.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LoyaltyFilter"
          },
          "bookingClasses": {
            "type": "array",
            "description": "The list of booking classes to filter the results by.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "productClasses": {
            "type": "array",
            "description": "The list of product classes to filter the results by.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fareTypes": {
            "type": "array",
            "description": "The list of fare types to filter the results by.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LowFareFlightFilter": {
        "type": "integer",
        "description": "Filter used to filter the types of availability to be returned for low fare.\n            \n\n0 = NoFlights\n1 = AllFlights\n2 = SelectedFlight",
        "x-enumNames": [
          "NoFlights",
          "AllFlights",
          "SelectedFlight"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "LowFareAvailabilityCriteria": {
        "type": "object",
        "description": "Defines the low fare availability search criteria.\n            ",
        "additionalProperties": false,
        "required": [
          "destinationStationCodes",
          "originStationCodes",
          "beginDate"
        ],
        "properties": {
          "destinationStationCodes": {
            "type": "array",
            "description": "The Arrival Station Codes.\n            ",
            "items": {
              "type": "string"
            }
          },
          "originStationCodes": {
            "type": "array",
            "description": "The Departure Station Codes.\n            ",
            "items": {
              "type": "string"
            }
          },
          "beginDate": {
            "type": "string",
            "description": "The Begin Date.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The End Date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DivideRequestv2": {
        "type": "object",
        "description": "Defines the booking divide request.\n            ",
        "additionalProperties": false,
        "properties": {
          "crsRecordLocators": {
            "type": "array",
            "description": "The CRS record locators.\n\n    If a record locator and/or owning system code is provided they will be used instead of the record locator key\n    values.\n\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecordLocator"
            }
          },
          "passengerKeys": {
            "type": "array",
            "description": "The passengers to include specified by their respective keys.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "autoDividePayments": {
            "type": "boolean",
            "description": "Allow the divide to automatically divide payments between bookings.\n            "
          },
          "bookingPaymentTransfers": {
            "type": "array",
            "description": "Specific amounts to split between the bookings. This is applied if auto divide payments is set to false.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingPaymentTransfer"
            }
          },
          "receivedBy": {
            "type": "string",
            "description": "Specify the user requesting the booking divide.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "overrideRestrictions": {
            "type": "boolean",
            "description": "Override any restrictions that may prevent divide.\n            "
          },
          "parentEmail": {
            "type": "string",
            "description": "The email address for updating the parent booking.\n            ",
            "nullable": true
          },
          "childEmail": {
            "type": "string",
            "description": "The email address for the child booking.\n            ",
            "nullable": true
          },
          "cancelSourceBooking": {
            "type": "boolean",
            "description": "Cancel the created booking after divide. If this is set to true the cancelled booking\nis not returned and its PNR is not easily available.\n            "
          }
        }
      },
      "BookingPaymentTransfer": {
        "type": "object",
        "description": "Defines a booking payment transfer transaction\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingPaymentId": {
            "type": "integer",
            "description": "The booking payment id to transfer.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "transferAmount": {
            "type": "number",
            "description": "The amount to include in the transfer\n            ",
            "format": "decimal"
          }
        }
      },
      "PassengerAddressCreateRequest": {
        "type": "object",
        "description": "Defines a passenger address create request.\n            ",
        "additionalProperties": false,
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The addresses APIS status.\n            ",
            "$ref": "#/components/schemas/ApisAddressStatus"
          }
        }
      },
      "PassengerAddressEditRequest": {
        "type": "object",
        "description": "Defines a passenger address edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfPassengerAddressEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code for the passenger address.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "refusedContact": {
            "type": "boolean",
            "description": "Indicates if the passenger refused to enter a contact.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfInfant": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "nationality": {
            "type": "string",
            "description": "The nationality of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The residentCountry of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "TravelDocumentEditRequest": {
        "type": "object",
        "description": "Defines the edit travel document request.\n            ",
        "additionalProperties": false,
        "properties": {
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfTravelDocumentEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CustomerCreditRefundRequest": {
        "type": "object",
        "description": "Defines information needed for a customer credit refund.\n            ",
        "additionalProperties": false,
        "required": [
          "parentPaymentKey",
          "amount",
          "customerNumber"
        ],
        "properties": {
          "parentPaymentKey": {
            "type": "string",
            "description": "The payment identifier used if this refund is being reversed from an existing payment.\n            ",
            "minLength": 1
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal"
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer account number to credit to.\n            ",
            "maxLength": 34,
            "minLength": 0
          },
          "accountTransactionCode": {
            "type": "string",
            "description": "The account transaction code associated with the account.\n            ",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The customer credit refund comment.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfETicketResponsev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketResponsev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ETicketResponsev2": {
        "type": "object",
        "description": "The response for retrieving and displaying e-ticket information.\n            ",
        "additionalProperties": false,
        "properties": {
          "eTicket": {
            "description": "The e-ticket which is equivalent to the New Skies passenger ticket.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTicketv2"
          },
          "status": {
            "description": "The status return code when retrieving e-tickets.\n            ",
            "$ref": "#/components/schemas/TicketReturnCode"
          },
          "alternateCarrierCode": {
            "type": "string",
            "description": "The alternate carrier code. This is also known as the e-ticket database, or the carrier code of the issuing\nairline.\n            ",
            "nullable": true
          }
        }
      },
      "PassengerTicketv2": {
        "type": "object",
        "description": "Represents detailed information for an e-ticket issued to a passenger.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerName": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "connectedETickets": {
            "type": "array",
            "description": "The list of e-tickets issued to the passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ETicket"
            }
          },
          "recordLocators": {
            "type": "array",
            "description": "Record locators associated with the e-ticket.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecordLocator"
            }
          },
          "fareCalculation": {
            "type": "string",
            "description": "The fare calculation.\n            ",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "description": "The date the e-ticket was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "companyIdNumber": {
            "type": "string",
            "description": "The company ID number of the service airline or system service provider.\n            ",
            "nullable": true
          },
          "totalTaxAmount": {
            "type": "number",
            "description": "The tax amount for the e-ticket.\n            ",
            "format": "decimal"
          },
          "taxDetailsList": {
            "type": "array",
            "description": "The list of all tax details of the e-ticket.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TaxDetails"
            }
          },
          "ticketFare": {
            "description": "The base fare represented in the e-ticket's currency code and foreign currency code.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerTicketFare"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount for the e-ticket.\n            ",
            "format": "decimal"
          },
          "totalAmountCurrencyCode": {
            "type": "string",
            "description": "The currency code of the total amount for the e-ticket.\n            ",
            "nullable": true
          },
          "createdUserIdentifier": {
            "type": "string",
            "description": "The created user's identifier.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPassengerSeat": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSeat"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerSeat": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerSeat"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AddSeatRequest": {
        "type": "object",
        "description": "Defines update seat request.\n            ",
        "additionalProperties": false,
        "properties": {
          "collectedCurrencyCode": {
            "type": "string",
            "description": "Optional Currency code if different than booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "inventoryControl": {
            "description": "Indicates the type of hold placed on a unit.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UnitInventoryControlType"
          },
          "seatAssignmentMode": {
            "description": "The seat assignment mode.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatAssignmentMode"
          },
          "feePricingMode": {
            "description": "Indicates if the seat is to be sold in currency or points.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "The flag indicating to waive the seat fees if permissions permit.\n            ",
            "nullable": true
          },
          "ignoreSeatSsrs": {
            "type": "boolean",
            "description": "Flag indicating whether to ignore seat SSR's.\n            ",
            "nullable": true
          },
          "journeyKey": {
            "type": "string",
            "description": "The journey key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfSsrAvailability": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrAvailability"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SsrAvailability": {
        "type": "object",
        "description": "Model containing all Ssr information.\n            ",
        "additionalProperties": false,
        "properties": {
          "segmentSsrs": {
            "type": "array",
            "description": "Segment Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrBySegment"
            }
          },
          "legSsrs": {
            "type": "array",
            "description": "Leg Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrByLeg"
            }
          },
          "journeySsrs": {
            "type": "array",
            "description": "Journey Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrByJourney"
            }
          }
        }
      },
      "SsrBySegment": {
        "type": "object",
        "description": "Model information for a sell service request (SSR) tied to a specific segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier of the segment of a journey.\n            ",
            "nullable": true
          },
          "segmentDetails": {
            "description": "Segment market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "ssrs": {
            "type": "array",
            "description": "The associated Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrDetail"
            }
          }
        }
      },
      "SsrDetail": {
        "type": "object",
        "description": "Ssr detail model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "Gets the SSR code.\n            ",
            "nullable": true
          },
          "passengersAvailability": {
            "type": "object",
            "description": "Get the passenger keys this is available for\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/PassengerSsrAvailability"
            }
          },
          "ssrType": {
            "description": "Gets the SSR type.\n            ",
            "$ref": "#/components/schemas/SsrType"
          },
          "name": {
            "type": "string",
            "description": "Gets the SSR name.\n            ",
            "nullable": true
          },
          "limitPerPassenger": {
            "type": "integer",
            "description": "Gets the limit per passenger.\n            ",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "description": "Gets the amount available.\n            ",
            "format": "int32",
            "nullable": true
          },
          "inventoryControlled": {
            "type": "boolean",
            "description": "Gets the SSR availability types of inventory controlled.\n            "
          },
          "seatDependent": {
            "type": "boolean",
            "description": "Gets the SSR availability type of seat dependent.\n            "
          },
          "feeCode": {
            "type": "string",
            "description": "Gets the fee code.\n            ",
            "nullable": true
          },
          "nest": {
            "type": "string",
            "description": "Gets the SSR nest.\n            ",
            "nullable": true
          },
          "seatRestriction": {
            "description": "Gets the seat restriction.\n            ",
            "$ref": "#/components/schemas/SeatRestriction"
          }
        }
      },
      "SsrByLeg": {
        "type": "object",
        "description": "Model information for a sell service request (SSR) tied to a specific leg.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier of the leg of a segment.\n            ",
            "nullable": true
          },
          "legDetails": {
            "description": "Leg market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "ssrs": {
            "type": "array",
            "description": "The associated Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrDetail"
            }
          }
        }
      },
      "SsrByJourney": {
        "type": "object",
        "description": "Model information for a sell service request (SSR) tied to a specific journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "journeyKey": {
            "type": "string",
            "description": "The unique identifier of the journey.\n            ",
            "nullable": true
          },
          "journeyDetails": {
            "description": "Journey market information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "ssrs": {
            "type": "array",
            "description": "The associated Ssrs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrDetail"
            }
          }
        }
      },
      "SsrAvailabilityRequestv2": {
        "type": "object",
        "description": "Represents an SSR availability request.\n            ",
        "additionalProperties": false,
        "required": [
          "trips",
          "passengerKeys",
          "currencyCode"
        ],
        "properties": {
          "trips": {
            "type": "array",
            "description": "Filter the trips requested.\n            ",
            "items": {
              "$ref": "#/components/schemas/MarketInformation"
            }
          },
          "passengerKeys": {
            "type": "array",
            "description": "Filter the passenger numbers.\n            ",
            "items": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "Set the Currency Code if different than the booking currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "feePricingMode": {
            "description": "Flag to indicate whether a fee is meant to be sold in points or currency.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "ssrAvailabilityMode": {
            "description": "Indicates which types of SSRs in a passenger's service bundle are to be returned.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrAvailabilityMode"
          }
        }
      },
      "SsrAvailabilityMode": {
        "type": "integer",
        "description": "SSR availability modes for use in the SSR availability request.\n            \n\n0 = NonBundledSsrs\n1 = BundledSsrs\n2 = FilteredBundleSsrs",
        "x-enumNames": [
          "NonBundledSsrs",
          "BundledSsrs",
          "FilteredBundleSsrs"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfPagedVouchersResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PagedVouchersResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PagedVouchersResponse": {
        "type": "object",
        "description": "The paged voucher search response item.\n            ",
        "additionalProperties": false,
        "properties": {
          "lastPageKey": {
            "type": "string",
            "description": "The key for the last item returned from paging.\n            ",
            "nullable": true
          },
          "vouchers": {
            "type": "array",
            "description": "The collection of vouchers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VoucherItem"
            }
          }
        }
      },
      "IJsonResponseOfLowFareEstimateResults": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LowFareEstimateResults"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "LowFareEstimateResults": {
        "type": "object",
        "description": "The low fare estimate results model.\n            ",
        "additionalProperties": false,
        "properties": {
          "lowFares": {
            "type": "array",
            "description": "The collection of low fare cache availability dates.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LowFareEstimateByDate"
            }
          }
        }
      },
      "LowFareEstimateByDate": {
        "type": "object",
        "description": "The low fare availability for a given date.\n            ",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the low fare.\n            ",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "The low fare price optionally including taxes and fees.\n            ",
            "format": "decimal"
          },
          "taxesAndFees": {
            "type": "number",
            "description": "The taxes and fees which will only be included if asked for in the request (due to performance). This will be\nincluded in the price value.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "available": {
            "type": "integer",
            "description": "The low fare available count.\n            ",
            "format": "int32"
          },
          "noFlights": {
            "type": "boolean",
            "description": "Flag indicating that there are no flights for this day.\n            "
          },
          "soldOut": {
            "type": "boolean",
            "description": "Flag indicating that the flights are sold out.\n            "
          },
          "referenceFareKeys": {
            "type": "array",
            "description": "Set of Fare Keys that apply to the lowest fare.  Corresponds to the FaresAvailable.Fare.Reference property in the\nAvailability Response.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfAvailabilityWithSsrResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityWithSsrResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AvailabilityWithSsrResponse": {
        "type": "object",
        "description": "Defines the trip availability with SSR response.\n            ",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "The collection of trip results based on date and markets.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripResult"
            }
          },
          "faresAvailable": {
            "type": "object",
            "description": "The aggregate collection of fares available for all the provided journeys.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/FareReference"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code for all displayed fares.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "includeTaxesAndFees": {
            "type": "boolean",
            "description": "Flag indicating if the trip includes taxes and fees.\n            "
          },
          "bundleOffers": {
            "type": "object",
            "description": "The collection of service bundle offers available for all the provided journeys, if requested.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/BundleOffer"
            }
          },
          "includedSsrs": {
            "type": "array",
            "description": "Prices of the SSRs included in the request.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AvailabilityWithSsrPrice"
            }
          }
        }
      },
      "AvailabilityWithSsrPrice": {
        "type": "object",
        "description": "This class contains an SSR and its possible prices with respect to each journey in the availability. Primarily used\nin GetTripAvailabilityWithSSR.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The code of the SSR being priced.\n            ",
            "nullable": true
          },
          "priceVariations": {
            "type": "array",
            "description": "A list of possible price variants of the SSR when priced against each journey in the availability.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrPriceVariation"
            }
          },
          "reference": {
            "type": "string",
            "description": "The reference to the fare from the available journey fare details.\n            ",
            "nullable": true
          }
        }
      },
      "SsrPriceVariation": {
        "type": "object",
        "description": "This class denotes a possible pricing of an SSR against the journeys of the availability. Primarily used in\nGetTripAvailabilityWithSSR.\n            ",
        "additionalProperties": false,
        "properties": {
          "basePrice": {
            "type": "number",
            "description": "The base price of the applied fee.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "taxTotal": {
            "type": "number",
            "description": "The applied sales tax.\n            ",
            "format": "decimal",
            "nullable": true
          },
          "passengerType": {
            "type": "string",
            "description": "The applying passenger type.\n            ",
            "nullable": true
          },
          "programLevel": {
            "type": "string",
            "description": "The applying customer program level.\n            ",
            "nullable": true
          }
        }
      },
      "AvailabilityWithSsrRequest": {
        "type": "object",
        "description": "Defines the request to retrieve trip availability with SSR.\n            ",
        "additionalProperties": false,
        "required": [
          "passengers",
          "criteria"
        ],
        "properties": {
          "passengers": {
            "description": "The list of passengers.\n            ",
            "$ref": "#/components/schemas/PassengerTypeCriteria"
          },
          "criteria": {
            "type": "array",
            "description": "The list of availability search criteria.\n            ",
            "items": {
              "$ref": "#/components/schemas/AvailabilityCriteria"
            }
          },
          "codes": {
            "description": "The different code criteria that can be set that can influence availability response.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AvailabilityCodeCriteriav2"
          },
          "taxesAndFees": {
            "description": "The taxes and fees rollup mode which affects the pricing information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TaxesAndFeesRollupMode"
          },
          "numberOfFaresPerJourney": {
            "type": "integer",
            "description": "The number of fares per journey to be returned. If not set it will use the default optimized values\n            ",
            "format": "int32",
            "nullable": true
          },
          "returnEmptyResults": {
            "type": "boolean",
            "description": "Flag determining if empty schedule responses will be returned.\nDefaults to false.\n            ",
            "nullable": true
          },
          "ssrs": {
            "type": "array",
            "description": "SSRs to be priced in the availability.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "feePricingMode": {
            "description": "Indicates whether a fee is meant to be sold in points or currency.\n            ",
            "$ref": "#/components/schemas/FeePricingMode"
          },
          "programCode": {
            "type": "string",
            "description": "The applying customer program code.\n            ",
            "nullable": true
          },
          "programLevel": {
            "type": "string",
            "description": "The applying customer program level.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfAncillaryPricingOptionsContext": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AncillaryPricingOptionsContext"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AncillaryPricingOptionsContext": {
        "type": "object",
        "description": "Defines the ancillary pricing options context.\n            ",
        "additionalProperties": false,
        "properties": {
          "inputParameters": {
            "type": "object",
            "description": "The ancillary pricing options input parameters.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndAddOn": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/AddOn"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfAddOn": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOn"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPreCancelDetail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PreCancelDetail"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PreCancelDetail": {
        "type": "object",
        "description": "Defines the pre cancel details for a specific component.\n            ",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "number",
            "description": "The total fee cost.\n            ",
            "format": "decimal"
          },
          "componentKey": {
            "type": "string",
            "description": "The unique component key associated with the pre cancel.\n            ",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "description": "The collection of cancellation fees.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderFee"
            }
          },
          "status": {
            "description": "The status of the pre cancel.\n            ",
            "$ref": "#/components/schemas/PreCancelStatus"
          },
          "description": {
            "type": "string",
            "description": "The pre cancel description.\n            ",
            "nullable": true
          }
        }
      },
      "PreCancelStatus": {
        "type": "integer",
        "description": "Defines the different pre cancel statuses.\n            \n\n0 = Unknown\n1 = CancelAvailable\n2 = ExternalCancelAvailable\n3 = ImmediateCancel\n4 = CancelDenied\n5 = RemoveFromBooking\n6 = CancelPending",
        "x-enumNames": [
          "Unknown",
          "CancelAvailable",
          "ExternalCancelAvailable",
          "ImmediateCancel",
          "CancelDenied",
          "RemoveFromBooking",
          "CancelPending"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "IJsonResponseOfAddOnSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddOnSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AddOnSettings": {
        "type": "object",
        "description": "Defines a add ons field validation requirements.\n            ",
        "additionalProperties": false,
        "properties": {
          "addOnKey": {
            "type": "string",
            "description": "The unique add on key.\n            ",
            "nullable": true
          },
          "customer": {
            "description": "The order customers field validation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CustomerSettings"
          },
          "primaryParticipant": {
            "description": "The order primary participant field validation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ParticipantSettings"
          },
          "participant": {
            "description": "The order participant field validation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ParticipantSettings"
          }
        }
      },
      "CustomerSettings": {
        "type": "object",
        "description": "Defines the order customers field validation levels.\n            ",
        "additionalProperties": false,
        "properties": {
          "title": {
            "description": "The title field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "firstName": {
            "description": "The first name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "middleName": {
            "description": "The middle name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lastName": {
            "description": "The last name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lineOne": {
            "description": "The address line one field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lineTwo": {
            "description": "The address line two field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "city": {
            "description": "The address city field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "postalCode": {
            "description": "The address postal code field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "provinceState": {
            "description": "The address province state field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "countryCode": {
            "description": "The address country code field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "county": {
            "description": "The address county field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "homePhone": {
            "description": "The home phone number field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "workPhone": {
            "description": "The work phone field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "fax": {
            "description": "The fax number field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "email": {
            "description": "The email address field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "type": {
            "description": "The consumer type field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "companyName": {
            "description": "The company name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "birthDate": {
            "description": "The date of birth field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "customerNumber": {
            "description": "The field usage for the customer number.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          }
        }
      },
      "ParticipantSettings": {
        "type": "object",
        "description": "Defines the order participant field validation levels.\n            ",
        "additionalProperties": false,
        "properties": {
          "title": {
            "description": "The title field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "firstName": {
            "description": "The first name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "middleName": {
            "description": "The middle name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lastName": {
            "description": "The last name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lineOne": {
            "description": "The address line one field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "lineTwo": {
            "description": "The address line two field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "city": {
            "description": "The address city field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "postalCode": {
            "description": "The address postal code field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "provinceState": {
            "description": "The address province state field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "countryCode": {
            "description": "The address country code field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "county": {
            "description": "The address county field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "homePhone": {
            "description": "The home phone number field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "workPhone": {
            "description": "The work phone field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "fax": {
            "description": "The fax number field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "email": {
            "description": "The email address field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "type": {
            "description": "The consumer type field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "companyName": {
            "description": "The company name field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "birthDate": {
            "description": "The date of birth field usage.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "typeCode": {
            "description": "The field usage for the type code.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "documentNumber": {
            "description": "The field usage for the document number.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "documentIssueBy": {
            "description": "The field usage for the document issue by.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          },
          "documentTypeCode": {
            "description": "The field usage for the document type code.\n            ",
            "$ref": "#/components/schemas/FieldUsage"
          }
        }
      },
      "IJsonResponseOfNskSessionContext": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NskSessionContext"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NskSessionContext": {
        "type": "object",
        "description": "Defines the nsk current session context.\n            ",
        "additionalProperties": false,
        "properties": {
          "defaultCultureCode": {
            "type": "string",
            "description": "The users default culture code.\n            ",
            "nullable": true
          },
          "defaultCurrencyCode": {
            "type": "string",
            "description": "The users default currency code.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The type of session permissions based on the logged in user.\n            ",
            "$ref": "#/components/schemas/SessionPermissionType"
          },
          "hasBookingInState": {
            "type": "boolean",
            "description": "True if the booking exists in NewSkies for the session.\n            "
          },
          "isPendingLogin": {
            "type": "boolean",
            "description": "Flag indicating if the session is pending login.\n            "
          },
          "isVirtual": {
            "type": "boolean",
            "description": "Flag indicating if the session is a virtual user.  This check is specific for a virtual, anonymous user only.\nTo check if the session (non-anonymous user) is virtual, retrieve the token details and look at the server context\nID--if it is less than zero, the session is virtual.\n            "
          },
          "identity": {
            "description": "The logged in users identity.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserIdentity"
          },
          "serverContext": {
            "description": "The server's session context.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NskServerContext"
          },
          "roles": {
            "description": "The roles applied to the current session.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NskRoles"
          }
        }
      },
      "SessionPermissionType": {
        "type": "integer",
        "description": "Defines the sessions permission type.\n            \n\n0 = Unknown\n1 = Customer\n2 = Anonymous\n3 = Agent",
        "x-enumNames": [
          "Unknown",
          "Customer",
          "Anonymous",
          "Agent"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "UserIdentity": {
        "type": "object",
        "description": "Defines the logged in users identity.\n            ",
        "additionalProperties": false,
        "properties": {
          "userKey": {
            "type": "string",
            "description": "The unique user key.\n            ",
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key.\n            ",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "description": "The domain code the user exists in.\n            ",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "description": "The organization code the user is apart of.\n            ",
            "nullable": true
          }
        }
      },
      "NskServerContext": {
        "type": "object",
        "description": "Defines the NSK server context.\n            ",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The servers session ID.\n            ",
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "The servers secure token.\n            ",
            "nullable": true
          },
          "systemName": {
            "description": "The acting system name.\n            ",
            "$ref": "#/components/schemas/SystemName"
          },
          "channel": {
            "description": "The acting channel type.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "locationCode": {
            "type": "string",
            "description": "The acting location code.\n            ",
            "nullable": true
          }
        }
      },
      "SystemName": {
        "type": "integer",
        "description": "Defines the system names.\n            \n\n0 = Default\n1 = WinRez\n2 = FareManager\n3 = ScheduleManager\n4 = WinManager\n5 = ConsoleRez\n6 = WebRez\n7 = WebServicesApi\n8 = WebServicesEsc\n9 = InternalService\n10 = WebReporting\n11 = TaxAndFeeManager\n12 = Dcs\n13 = DcsKiosk\n14 = FareManagerPlus\n15 = DotRez\n16 = Loyalty\n17 = Ndc\n18 = Unknown\n19 = CallCenter\n20 = Ibe\n21 = Mobile\n22 = Ivr\n23 = ChatBot\n24 = Kiosk\n25 = AgencyIbe\n26 = SkyLedger\n27 = SkyPrice\n28 = TcDotRez\n29 = TcInternalService\n30 = TcManagementApp\n31 = TcStorefront\n32 = TcSupplierPortal\n33 = GssManagementConsole\n100 = UserDefined",
        "x-enumNames": [
          "Default",
          "WinRez",
          "FareManager",
          "ScheduleManager",
          "WinManager",
          "ConsoleRez",
          "WebRez",
          "WebServicesApi",
          "WebServicesEsc",
          "InternalService",
          "WebReporting",
          "TaxAndFeeManager",
          "Dcs",
          "DcsKiosk",
          "FareManagerPlus",
          "DotRez",
          "Loyalty",
          "Ndc",
          "Unknown",
          "CallCenter",
          "Ibe",
          "Mobile",
          "Ivr",
          "ChatBot",
          "Kiosk",
          "AgencyIbe",
          "SkyLedger",
          "SkyPrice",
          "TcDotRez",
          "TcInternalService",
          "TcManagementApp",
          "TcStorefront",
          "TcSupplierPortal",
          "GssManagementConsole",
          "UserDefined"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          100
        ]
      },
      "NskRoles": {
        "type": "object",
        "description": "Defines the NSK role.\n            ",
        "additionalProperties": false,
        "properties": {
          "inBaseRole": {
            "type": "boolean",
            "description": "Flag indicating if in the base role.\n            "
          },
          "acting": {
            "description": "The acting role.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RoleBase"
          },
          "base": {
            "description": "The base/original role.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RoleBase"
          }
        }
      },
      "RoleBase": {
        "type": "object",
        "description": "Defines the base role.\n            ",
        "additionalProperties": false,
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The role's name.\n            ",
            "nullable": true
          }
        }
      },
      "NskTokenRequest": {
        "type": "object",
        "description": "Defines the nsk token request to gain access to the API.\n            ",
        "additionalProperties": false,
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "The optional name of the calling application.\n            ",
            "nullable": true
          },
          "credentials": {
            "description": "The nsk user login credentials.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Credentials"
          }
        }
      },
      "Credentials": {
        "type": "object",
        "description": "Defines the login credentials to gain access to a specific user.\n            ",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "nullable": true
          },
          "alternateIdentifier": {
            "type": "string",
            "description": "Alternate identifier that can be used in place of the username.\n            ",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The unique password.\n            ",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "description": "The domain the user exists in.\n            ",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "The location the user exists in.\n            ",
            "nullable": true
          },
          "channelType": {
            "description": "The optional channel type invoking the communication with the server.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChannelType"
          },
          "loginRole": {
            "type": "string",
            "description": "The role to log in as.\n            ",
            "nullable": true
          },
          "systemName": {
            "description": "The optional system name invoking the communication with the server.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SystemName"
          }
        }
      },
      "IJsonResponseOfTripDetails": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripDetails"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripDetails": {
        "type": "object",
        "description": "Represents the trip status details version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "legCrossReferences": {
            "type": "array",
            "description": "Represents the leg cross references.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegCrossReference"
            }
          },
          "cabinDetails": {
            "type": "array",
            "description": "Represents the list of cabin details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CabinDetails"
            }
          },
          "checkinLid": {
            "type": "integer",
            "description": "Represents the total number of passengers allowed to checkin.\n            "
          }
        }
      },
      "CabinDetails": {
        "type": "object",
        "description": "Represents the cabin details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "cabinOfService": {
            "type": "string",
            "description": "Represents the code for the cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "adjustedSeatCount": {
            "type": "integer",
            "description": "Represents the adjusted seat count of the leg for the cabin.\n            ",
            "format": "int32"
          },
          "maximumSeatCount": {
            "type": "integer",
            "description": "Represents the maximum number of seats authorized to be sold on a flight.\n            ",
            "format": "int32"
          },
          "seatsSold": {
            "type": "integer",
            "description": "Represents the number of seats that have been sold.\n            ",
            "format": "int32"
          }
        }
      },
      "TripInformationStatusRequestBase": {
        "type": "object",
        "description": "Represents the base trip information status request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "departureStatus": {
            "description": "The departure status.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DepartureStatus"
          },
          "departureGate": {
            "type": "string",
            "description": "The estimated departure gate.\n            ",
            "nullable": true
          },
          "actualDepartureGate": {
            "type": "string",
            "description": "Represents the actual departure gate of the trip.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "arrivalStatus": {
            "description": "The arrival status.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ArrivalStatus"
          },
          "arrivalGate": {
            "type": "string",
            "description": "The estimated arrival gate.\n            ",
            "nullable": true
          },
          "actualArrivalGate": {
            "type": "string",
            "description": "Represents the actual arrival gate of the trip.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "baggageClaim": {
            "type": "string",
            "description": "The baggage claim.\n            ",
            "nullable": true
          },
          "tripOperationTimes": {
            "description": "The request to update the trip operation times.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationTimesEditRequest"
          },
          "tripFuelDetails": {
            "description": "The trip fuel details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripFuelDetails"
          }
        }
      },
      "TripOperationTimesEditRequest": {
        "type": "object",
        "description": "Represents the edit request for flight operation time events.\n            ",
        "additionalProperties": false,
        "properties": {
          "touchDownTimes": {
            "description": "Represents the touch down times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationEvents"
          },
          "onBlockTimes": {
            "description": "Represents the on-block times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationEvents"
          },
          "departureTimes": {
            "description": "Represents the departure times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DepartureEvent"
          },
          "offBlockTime": {
            "type": "string",
            "description": "Represents the off-block time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "airborneTime": {
            "type": "string",
            "description": "Represents the airborne time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "crewReportTime": {
            "type": "string",
            "description": "Represents the crew report time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "takeOffTime": {
            "type": "string",
            "description": "Represents the take-off time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "movementAfterPushBackTime": {
            "type": "string",
            "description": "Represents the movement after push-back time (taxi) for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "nextInformationTime": {
            "type": "string",
            "description": "Represents the next information time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "reclearanceTime": {
            "type": "string",
            "description": "Represents the re-clearance time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "returnToRampTime": {
            "type": "string",
            "description": "Represents the return to ramp time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "scheduledArrivalTime": {
            "type": "string",
            "description": "Represents the scheduled arrival time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TripOperationEvents": {
        "type": "object",
        "description": "Represents the flight operation time events for an estimated,\nactual, and forced time event.\n            ",
        "additionalProperties": false,
        "properties": {
          "forced": {
            "type": "string",
            "description": "Represents the forced time for this event type.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "actual": {
            "type": "string",
            "description": "Represents the actual time for this event type.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "estimated": {
            "type": "string",
            "description": "Represents the estimated time for this event type.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TripFuelDetails": {
        "type": "object",
        "description": "Represents the fuel information for a trip.\n            ",
        "additionalProperties": false,
        "properties": {
          "fuelOnboardOut": {
            "type": "integer",
            "description": "Represents the amount of fuel onboard the aircraft/equipment upon departure.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "nullable": true
          },
          "fuelOnboardIn": {
            "type": "integer",
            "description": "Represents the amount of fuel onboard the aircraft/equipment upon arrival.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "nullable": true
          },
          "upLiftFuel": {
            "type": "integer",
            "description": "Represents the amount of fuel uplifted to the aircraft/equipment.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "nullable": true
          }
        }
      },
      "RequestedLegStatus": {
        "type": "integer",
        "description": "Enumeration for possible leg status update options.\n            \n\n0 = Open\n1 = Close\n2 = ClosePending\n3 = OpenFromCheckIn\n4 = CloseFromCheckIn",
        "x-enumNames": [
          "Open",
          "Close",
          "ClosePending",
          "OpenFromCheckIn",
          "CloseFromCheckIn"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfIListOfScheduleDetail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ScheduleDetail"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ScheduleDetail": {
        "type": "object",
        "description": "Market detail contains the abstracted market data describing the earliest and\nlatest STD.\n            ",
        "additionalProperties": false,
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date this market detail corresponds to.\n            ",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "description": "Earliest std on this departure date.\n            ",
            "format": "date-time"
          },
          "latest": {
            "type": "string",
            "description": "Latest std on this deparure date.\n            ",
            "format": "date-time"
          },
          "flights": {
            "type": "integer",
            "description": "Number of flights on the given departure date.\n            ",
            "format": "int64"
          }
        }
      },
      "IJsonResponseOfIListOfItineraryVariation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItineraryVariation"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ItineraryVariation": {
        "type": "object",
        "description": "Defines the schedule itinerary variation.\n            ",
        "additionalProperties": false,
        "required": [
          "flightIdentifier",
          "itineraryLegs"
        ],
        "properties": {
          "flightIdentifier": {
            "description": "The identifier of the flight to be added.\n            ",
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "itineraryLegs": {
            "type": "array",
            "description": "The legs of the flight to be added.\n            ",
            "items": {
              "$ref": "#/components/schemas/ScheduleItineraryLeg"
            }
          }
        }
      },
      "ScheduleItineraryLeg": {
        "type": "object",
        "description": "Defines the itinerary leg for creating flights.\n            ",
        "additionalProperties": false,
        "required": [
          "beginDate",
          "origin",
          "destination",
          "equipmentType",
          "equipmentTypeSuffix",
          "salesConfigurationCode"
        ],
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The start date of the flight operation.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "origin": {
            "type": "string",
            "description": "The departure station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "destination": {
            "type": "string",
            "description": "The arrival station code.\n            ",
            "maxLength": 3,
            "minLength": 3
          },
          "scheduledDepartureTime": {
            "type": "integer",
            "description": "The leg departure time in minutes.\n            ",
            "maximum": 1440.0,
            "minimum": 0.0
          },
          "departureTimeVariant": {
            "type": "integer",
            "description": "The leg departure local time variant (LTV).\n            ",
            "maximum": 1440.0,
            "minimum": -1440.0
          },
          "scheduledArrivalTime": {
            "type": "integer",
            "description": "The leg arrival time in minutes.\n            ",
            "maximum": 1440.0,
            "minimum": 0.0
          },
          "arrivalTimeVariant": {
            "type": "integer",
            "description": "The leg arrival local time variant (LTV).\n            ",
            "maximum": 1440.0,
            "minimum": -1440.0
          },
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the leg.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "salesConfigurationCode": {
            "type": "string",
            "description": "The sales configuration code for the leg, also known as PRBC (Passenger Reservation Booking Configuration) code.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "eTicket": {
            "type": "boolean",
            "description": "Indicates if the e-ticket is enabled for the leg.\n            "
          }
        }
      },
      "CommitItineraryVariationRequest": {
        "type": "object",
        "description": "Defines the commit itinerary variation request.\n            ",
        "additionalProperties": false,
        "properties": {
          "forGeneralUse": {
            "type": "boolean",
            "description": "Indicates if the flight will be available for general use.\n            "
          },
          "itineraryVariation": {
            "description": "The itinerary variation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ItineraryVariation"
          }
        }
      },
      "IJsonResponseOfIListOfTripInformationLegv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationLegv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripInformationLegv2": {
        "type": "object",
        "description": "Represents the trip information leg model.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier for the leg.\n            ",
            "nullable": true
          },
          "legDetails": {
            "description": "The additional details for the leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegDetailsv2"
          },
          "seatsSold": {
            "description": "Information relating to the number of seats sold for the leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegSeatsSold"
          },
          "designator": {
            "description": "The transportation designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "operatingInformation": {
            "description": "The leg's \"operated by\" information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperatingInformation"
          }
        }
      },
      "LegDetailsv2": {
        "type": "object",
        "description": "Represents the leg details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "departureTimeUtc": {
            "type": "string",
            "description": "The departure time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalTimeUtc": {
            "type": "string",
            "description": "The arrival time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg adjusted capacity.\n            "
          },
          "arrivalTerminal": {
            "type": "string",
            "description": "The leg arrival terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "arrivalTimeVariant": {
            "type": "integer",
            "description": "The leg arrival Local Time Variant (LTV).\n            "
          },
          "capacity": {
            "type": "integer",
            "description": "The leg capacity.\n            ",
            "nullable": true
          },
          "changeOfDirection": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a change of direction.\n            "
          },
          "codeShareIndicator": {
            "description": "The leg code share indicator.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          },
          "departureTerminal": {
            "type": "string",
            "description": "The leg departure terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "departureTimeVariant": {
            "type": "integer",
            "description": "The leg departure Local Time Variant (LTV).\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "The leg type of the equipment.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The leg equipment type suffix.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "eTicket": {
            "type": "boolean",
            "description": "A value indicating whether this leg is an e-ticketed leg.\n            "
          },
          "irop": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this leg is an IROP.\n            "
          },
          "lid": {
            "type": "integer",
            "description": "The leg's lid.\n            "
          },
          "marketingCode": {
            "type": "string",
            "description": "The leg marketing code.\n            ",
            "nullable": true
          },
          "marketingOverride": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a marketing override.\n            "
          },
          "onTime": {
            "description": "The indicator for on-time perfomance of the leg.\n            ",
            "$ref": "#/components/schemas/OnTime"
          },
          "arrivalTime": {
            "type": "string",
            "description": "The leg passenger standard time of arrival (STA).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The leg passenger standard time of departure (STD).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "prbcCode": {
            "type": "string",
            "description": "The leg PRBC code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The legs status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "subjectToGovernmentApproval": {
            "type": "boolean",
            "description": "A value indicating whether the leg is subject to government approval.\n            "
          },
          "jointOpInfo": {
            "type": "string",
            "description": "The identifier if legs are jointly operated by two or more carriers.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "transitLayover": {
            "type": "integer",
            "description": "The waiting period in number of days between flights.\n            "
          },
          "transitDays": {
            "type": "integer",
            "description": "The number of transit days for the leg.\n            "
          }
        }
      },
      "OnTime": {
        "type": "integer",
        "description": "Represents the likelihood of a leg being on time.\n            \n\n0 = Above0Percent\n1 = Above10Percent\n2 = Above20Percent\n3 = Above30Percent\n4 = Above40Percent\n5 = Above50Percent\n6 = Above60Percent\n7 = Above70Percent\n8 = Above80Percent\n9 = Above90Percent\n10 = NotApplicable\n11 = Unknown",
        "x-enumNames": [
          "Above0Percent",
          "Above10Percent",
          "Above20Percent",
          "Above30Percent",
          "Above40Percent",
          "Above50Percent",
          "Above60Percent",
          "Above70Percent",
          "Above80Percent",
          "Above90Percent",
          "NotApplicable",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ]
      },
      "LegSeatsSold": {
        "type": "object",
        "description": "Represents the leg seats sold model.\n            ",
        "additionalProperties": false,
        "properties": {
          "total": {
            "type": "integer",
            "description": "The number of seats sold.\n            "
          },
          "throughTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a through flight.\n            "
          },
          "nonStopTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a non-stop flight.\n            "
          },
          "connectTotal": {
            "type": "integer",
            "description": "The number of seats sold as part of a connecting flight.\n            "
          },
          "confirmed": {
            "type": "integer",
            "description": "The number of confirmed seats sold in this leg.\n            "
          }
        }
      },
      "TripInformationLegQuery": {
        "type": "object",
        "description": "The trip information leg query model contains data to perform a\ntrip information search.\n            ",
        "additionalProperties": false,
        "required": [
          "beginDate"
        ],
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The starting date of the trip information search.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the trip information search.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "startTimeInterval": {
            "type": "string",
            "description": "The starting time of the trip information search.\n            ",
            "format": "duration",
            "nullable": true
          },
          "endTimeInterval": {
            "type": "string",
            "description": "The end time of the trip information search.\n            ",
            "format": "duration",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "The transportation identifier, such as a flight number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week to include in the provided date range.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "equipmentFilter": {
            "description": "The optional equipment filter for the search.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentFilter"
          },
          "originStations": {
            "type": "array",
            "description": "The list of departure stations.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "destinationStations": {
            "type": "array",
            "description": "The list of arrival stations.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "opSuffix": {
            "type": "string",
            "description": "The operational suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "excludeMarketedFlights": {
            "type": "boolean",
            "description": "When set to true, all flights with a non-blank operating carrier are filtered out of the result.\nThe DB calls the parameter noOperatingCarrier.\n            "
          }
        }
      },
      "EquipmentFilter": {
        "type": "object",
        "description": "Represents a filter for equipment type.\n            ",
        "additionalProperties": false,
        "required": [
          "equipmentType"
        ],
        "properties": {
          "equipmentType": {
            "type": "string",
            "description": "The type of equipment for the journey.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The suffix associated with the equipment type.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfTripStatusv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripStatusv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripStatusv2": {
        "type": "object",
        "description": "Represents the trip status version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "tripStatusKey": {
            "type": "string",
            "description": "Represents the trip status key.\n            ",
            "nullable": true
          },
          "operationDetails": {
            "description": "Represents the operation details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationDetails"
          },
          "originDetails": {
            "description": "Represents details related to the trip origin location.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OriginDetails"
          },
          "destinationDetails": {
            "description": "Represents details related to the trip destination location.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DestinationDetails"
          },
          "modifiedAgentName": {
            "type": "string",
            "description": "The name of the agent that last modified this data.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "verified": {
            "type": "boolean",
            "description": "Represents the verified bit.\n            "
          },
          "irop": {
            "type": "boolean",
            "description": "Represents the IROP flag.\n            "
          }
        }
      },
      "OperationDetails": {
        "type": "object",
        "description": "Represents the operation details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "tailNumber": {
            "type": "string",
            "description": "Represents the tail number for the aircraft.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "equipmentType": {
            "type": "string",
            "description": "Represents the equipment type for the leg.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "Represents the equipment type suffix for the leg.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "Represents the trip status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "identifier": {
            "description": "Represents the transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "tripOperationTimes": {
            "description": "Represents the trip operation time events.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationTimes"
          },
          "counts": {
            "description": "Represents the various counts related to the operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationCounts"
          },
          "delays": {
            "type": "array",
            "description": "A list of trip operation delays.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripOperationDelay"
            }
          },
          "payloads": {
            "type": "array",
            "description": "Represents the list of trip operation payloads.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripOperationPayload"
            }
          },
          "crewList": {
            "type": "array",
            "description": "Represents the list of crew members.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripOperationCrew"
            }
          },
          "comments": {
            "type": "array",
            "description": "Represents the comments related to this trip operation.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripOperationComment"
            }
          },
          "historyList": {
            "type": "array",
            "description": "Represents the history of this trip operation.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripOperationHistory"
            }
          }
        }
      },
      "TripOperationTimes": {
        "type": "object",
        "description": "Represents the flight operation time events.  Null property values indicate\nthat there is no recorded time event for the given property name.\n            ",
        "additionalProperties": false,
        "properties": {
          "touchDownTimes": {
            "description": "Represents the touch down times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationEvents"
          },
          "onBlockTimes": {
            "description": "Represents the on-block times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripOperationEvents"
          },
          "departureTimes": {
            "description": "Represents the departure times for this flight operation.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DepartureEvent"
          },
          "offBlockTime": {
            "type": "string",
            "description": "Represents the off-block time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "airborneTime": {
            "type": "string",
            "description": "Represents the airborne time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "crewReportTime": {
            "type": "string",
            "description": "Represents the crew report time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "takeOffTime": {
            "type": "string",
            "description": "Represents the take-off time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "movementAfterPushBackTime": {
            "type": "string",
            "description": "Represents the movement after push-back time (taxi) for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "nextInformationTime": {
            "type": "string",
            "description": "Represents the next information time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "reclearanceTime": {
            "type": "string",
            "description": "Represents the re-clearance time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "returnToRampTime": {
            "type": "string",
            "description": "Represents the return to ramp time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "scheduledArrivalTime": {
            "type": "string",
            "description": "Represents the scheduled arrival time for this flight operation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Represents the date the object was last modified.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "OperationCounts": {
        "type": "object",
        "description": "Represents the operation counts model.\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingCount": {
            "type": "integer",
            "description": "Represents the number of passengers that have boarded the trip equipment.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "boardingSequence": {
            "type": "integer",
            "description": "Represents the boarding sequence number.  Starts at 1 for each leg.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "infantCount": {
            "type": "integer",
            "description": "Represents the number of infants not occupying a seat.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "nonRevenueCount": {
            "type": "integer",
            "description": "Represents the number of non-revenue passengers.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "revenueCount": {
            "type": "integer",
            "description": "Represents the number of revenue passengers.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "checkInCount": {
            "type": "integer",
            "description": "Represents the number of passengers that have checked-in.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "fuelOnboardOut": {
            "type": "integer",
            "description": "Represents the amount of fuel onboard the aircraft/equipment upon departure.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "fuelOnboardIn": {
            "type": "integer",
            "description": "Represents the amount of fuel onboard the aircraft/equipment upon arrival.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "upLiftFuel": {
            "type": "integer",
            "description": "Represents the amount of fuel uplifted to the aircraft/equipment.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "upLiftWeight": {
            "type": "integer",
            "description": "Represents the uplift weight.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "cockpitCrewCount": {
            "type": "integer",
            "description": "Represents the number of crew in the cockpit.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "cabinCrewCount": {
            "type": "integer",
            "description": "Represents the number of crew in the cabin.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          }
        }
      },
      "TripOperationDelay": {
        "type": "object",
        "description": "Represents the trip operation delay data.\n            ",
        "additionalProperties": false,
        "required": [
          "delayCode",
          "note"
        ],
        "properties": {
          "delayCode": {
            "type": "string",
            "description": "The delay code.\n            ",
            "maxLength": 4,
            "minLength": 1
          },
          "delayMinutes": {
            "type": "integer",
            "description": "The number of minutes for this delay.\n            "
          },
          "note": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 128,
            "minLength": 1
          },
          "includeMvtMessage": {
            "type": "boolean",
            "description": "The flag to include the MVT message.\n            "
          },
          "tripOperationDelayKey": {
            "type": "string",
            "description": "The unique identification for the trip operation delay.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date the status was created.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TripOperationPayload": {
        "type": "object",
        "description": "Represents the payload data for the trip operation.\n            ",
        "additionalProperties": false,
        "properties": {
          "payloadType": {
            "type": "string",
            "description": "The type of payload this model represents, expressed as a single\ncharacter.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "compartment": {
            "type": "string",
            "description": "The compartment for the payload this model represents, expressed\nas a single character.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "payloadCount": {
            "type": "integer",
            "description": "The payload count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          },
          "weight": {
            "type": "integer",
            "description": "The total payload weight.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          }
        }
      },
      "TripOperationCrew": {
        "type": "object",
        "description": "Represents the crew of an trip operation.\n            ",
        "additionalProperties": false,
        "properties": {
          "tripOperationCrewKey": {
            "type": "string",
            "description": "The unique identifier for the trip crew operation.\n            ",
            "nullable": true
          },
          "crewType": {
            "description": "The crew personnel type.\n            ",
            "$ref": "#/components/schemas/CrewType"
          }
        }
      },
      "CrewType": {
        "type": "integer",
        "description": "Defines the different types of crew members.\n            \n\n0 = Default\n1 = Pilot\n2 = CoPilot\n3 = CockpitJumpseat\n4 = CabinJumpseat\n5 = CabinCrew",
        "x-enumNames": [
          "Default",
          "Pilot",
          "CoPilot",
          "CockpitJumpseat",
          "CabinJumpseat",
          "CabinCrew"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "TripOperationComment": {
        "type": "object",
        "description": "Represents a comment for a trip operation.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "Represents the comment text.\n            ",
            "maxLength": 800,
            "minLength": 1,
            "nullable": true
          },
          "type": {
            "description": "Represents the comment type.\n            ",
            "$ref": "#/components/schemas/OperationCommentType"
          },
          "tripOperationCommentKey": {
            "type": "string",
            "description": "The unique identification number for the comment.\n            ",
            "nullable": true
          }
        }
      },
      "OperationCommentType": {
        "type": "integer",
        "description": "The operation comment type enumeration.\n            \n\n0 = Default\n1 = Reservation\n2 = Operation\n3 = PitLoad\n4 = Irop\n5 = AppsOverride\n6 = ManualAppsOverride",
        "x-enumNames": [
          "Default",
          "Reservation",
          "Operation",
          "PitLoad",
          "Irop",
          "AppsOverride",
          "ManualAppsOverride"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "TripOperationHistory": {
        "type": "object",
        "description": "Represents the history of an trip operation.\n            ",
        "additionalProperties": false,
        "properties": {
          "tripOperationHistoryKey": {
            "type": "string",
            "description": "The unique identification for the trip operation history.\n            ",
            "nullable": true
          },
          "tripOperationHistoryCode": {
            "type": "string",
            "description": "Represents the code for the event that triggered an entry into history.\n            ",
            "maxLength": 2,
            "minLength": 1,
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Represents the history details.\n            ",
            "maxLength": 6000,
            "minLength": 1,
            "nullable": true
          },
          "createdHistoryDate": {
            "type": "string",
            "description": "The date when this history item was created.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "OriginDetails": {
        "type": "object",
        "description": "Represents the origin details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "Represents additional information about the\ntrip operation station.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "gate": {
            "description": "Represents the gate details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GateInformation"
          },
          "station": {
            "type": "string",
            "description": "The station code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "Represents the departure status.\n            ",
            "$ref": "#/components/schemas/DepartureStatus"
          }
        }
      },
      "DestinationDetails": {
        "type": "object",
        "description": "Represents the destination details model.\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "Represents additional information about the\ntrip operation station.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "gate": {
            "description": "Represents the gate details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GateInformation"
          },
          "station": {
            "type": "string",
            "description": "The station code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "Represents the arrival status.\n            ",
            "$ref": "#/components/schemas/ArrivalStatus"
          },
          "baggageClaim": {
            "type": "string",
            "description": "Represents the airline defined location where the trip's\nluggage is to be retrieved.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfTripInformationLeg": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationLeg"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripInformationLeg": {
        "type": "object",
        "description": "Represents the trip information leg model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.2.0 - Please use `TripInformationLegv2` instead.",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier for the leg.\n            ",
            "nullable": true
          },
          "legDetails": {
            "description": "The additional details for the leg.\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "4.2.0 - Please use `LegDetailsv2` instead.",
            "nullable": true,
            "$ref": "#/components/schemas/LegDetails"
          },
          "seatsSold": {
            "description": "Information relating to the number of seats sold for the leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LegSeatsSold"
          },
          "designator": {
            "description": "The transportation designator.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "operatingInformation": {
            "description": "The leg's \"operated by\" information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperatingInformation"
          }
        }
      },
      "LegDetails": {
        "type": "object",
        "description": "Represents the leg details model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.2.0 - Please use `LegDetailsv2` instead.",
        "additionalProperties": false,
        "properties": {
          "departureTimeUtc": {
            "type": "string",
            "description": "The departure time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalTimeUtc": {
            "type": "string",
            "description": "The arrival time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "adjustedCapacity": {
            "type": "integer",
            "description": "The leg adjusted capacity.\n            "
          },
          "arrivalTerminal": {
            "type": "string",
            "description": "The leg arrival terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "arrivalTimeVariant": {
            "type": "integer",
            "description": "The leg arrival Local Time Variant (LTV).\n            "
          },
          "capacity": {
            "type": "integer",
            "description": "The leg capacity.\n            ",
            "nullable": true
          },
          "changeOfDirection": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a change of direction.\n            "
          },
          "codeShareIndicator": {
            "description": "The leg code share indicator.\n            ",
            "$ref": "#/components/schemas/CodeShareIndicator"
          },
          "departureTerminal": {
            "type": "string",
            "description": "The leg departure terminal.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "departureTimeVariant": {
            "type": "integer",
            "description": "The leg departure Local Time Variant (LTV).\n            "
          },
          "equipmentType": {
            "type": "string",
            "description": "The leg type of the equipment.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "equipmentTypeSuffix": {
            "type": "string",
            "description": "The leg equipment type suffix.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "eTicket": {
            "type": "boolean",
            "description": "A value indicating whether this leg is an e-ticketed leg.\n            "
          },
          "irop": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this leg is an IROP.\n            "
          },
          "lid": {
            "type": "integer",
            "description": "The leg's lid.\n            "
          },
          "marketingCode": {
            "type": "string",
            "description": "The leg marketing code.\n            ",
            "nullable": true
          },
          "marketingOverride": {
            "type": "boolean",
            "description": "A value indicating whether the leg has a marketing override.\n            "
          },
          "onTime": {
            "description": "The indicator for on-time perfomance of the leg.\n            ",
            "$ref": "#/components/schemas/OnTime"
          },
          "arrivalTime": {
            "type": "string",
            "description": "The leg passenger standard time of arrival (STA).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The leg passenger standard time of departure (STD).\n            ",
            "format": "date-time",
            "nullable": true
          },
          "prbcCode": {
            "type": "string",
            "description": "The leg PRBC code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "scheduleServiceType": {
            "type": "string",
            "description": "The type of the schedule service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "deprecated": true,
            "x-deprecatedMessage": "4.2.0 - This property always comes back as null."
          },
          "status": {
            "description": "The legs status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "subjectToGovernmentApproval": {
            "type": "boolean",
            "description": "A value indicating whether the leg is subject to government approval.\n            "
          },
          "jointOpInfo": {
            "type": "string",
            "description": "The identifier if legs are jointly operated by two or more carriers.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "transitLayover": {
            "type": "integer",
            "description": "The waiting period in number of days between flights.\n            "
          },
          "transitDays": {
            "type": "integer",
            "description": "The number of transit days for the leg.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfTripInformationResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationResponse"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripInformationResponse": {
        "type": "object",
        "description": "A collection of journeys for a given departure date and market.\n            ",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "description": "Represents the date for the journey response.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "journeys": {
            "type": "array",
            "description": "Represents the collection of journeys.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationJourney"
            }
          }
        }
      },
      "TripInformationJourney": {
        "type": "object",
        "description": "Represents the trip information journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "This is a summary of all the segments on the journey. It will contain the details\nof the transportation from the first and last segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "journeyKey": {
            "type": "string",
            "description": "Represents the journey key.\n            ",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "Represents the collection of itinerary segments for this journey.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItinerarySegment"
            }
          }
        }
      },
      "ItinerarySegment": {
        "type": "object",
        "description": "Represents the operation between board station and any subsequent off station\nwithin the same flight.\n            ",
        "additionalProperties": false,
        "properties": {
          "isSeatmapViewable": {
            "type": "boolean",
            "description": "Indicates if the seatmaps associated with the segment are retrievable.\nSets to `false` for passive segments, and `true` for non-passive segments.\n            "
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "externalIdentifier": {
            "description": "The external transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "segmentType": {
            "description": "The type of the segment.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          },
          "designator": {
            "description": "This is a summary of all the legs on the segment. It will contain the details\nof the transportation from the first and last leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for the segment.\n            ",
            "nullable": true
          },
          "legs": {
            "type": "array",
            "description": "The legs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItineraryLeg"
            }
          }
        }
      },
      "ItineraryLeg": {
        "type": "object",
        "description": "Defines a single instance of non-stop travel between two stations.\n            ",
        "additionalProperties": false,
        "properties": {
          "legKey": {
            "type": "string",
            "description": "The unique identifier for this leg sell information.\n            ",
            "nullable": true
          },
          "designator": {
            "description": "Transportation information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          }
        }
      },
      "TripInformationQuery": {
        "type": "object",
        "description": "The trip information query model contains data to perform a\ntrip information search.\n            ",
        "additionalProperties": false,
        "required": [
          "beginDate"
        ],
        "properties": {
          "endDate": {
            "type": "string",
            "description": "The end date of the trip information search.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "startTimeInterval": {
            "type": "string",
            "description": "The starting time of the trip information search.\n            ",
            "format": "duration",
            "nullable": true
          },
          "endTimeInterval": {
            "type": "string",
            "description": "The end time of the trip information search.\n            ",
            "format": "duration",
            "nullable": true
          },
          "beginDate": {
            "type": "string",
            "description": "The starting date of the trip information search.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "identifier": {
            "type": "string",
            "description": "The transportation identifier, such as a flight number.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code.\n            ",
            "maxLength": 3,
            "minLength": 2,
            "nullable": true
          },
          "flightType": {
            "description": "The flight type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationsFlightType"
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week to include in the provided date range.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "equipmentFilter": {
            "description": "The optional equipment filter for the search.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EquipmentFilter"
          },
          "originStations": {
            "type": "array",
            "description": "The list of departure stations.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "destinationStations": {
            "type": "array",
            "description": "The list of arrival stations.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "opSuffix": {
            "type": "string",
            "description": "The operational suffix.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "searchXRef": {
            "type": "boolean",
            "description": "Indicates whether to include marketing code share segments.\nSetting this flag to true will request all marketing code share segments\nin addition to the operational ones.\n            "
          },
          "excludeMarketedFlights": {
            "type": "boolean",
            "description": "When set to true, all flights with a non-blank operating carrier are filtered out of the result.\nThe DB calls the parameter noOperatingCarrier.\n            "
          },
          "numberOfJourneys": {
            "type": "integer",
            "description": "When set to null, a maximum of 100 journeys will be returned.\n            ",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "OperationsFlightType": {
        "type": "integer",
        "description": "Flight types enumeration for operations and schedules.\n            \n\n0 = All\n1 = NonStop\n2 = Through\n3 = Direct\n4 = Connect",
        "x-enumNames": [
          "All",
          "NonStop",
          "Through",
          "Direct",
          "Connect"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "TripOperationCommentCreateRequest": {
        "type": "object",
        "description": "Represents the create request for a comment for a trip operation.\n            ",
        "additionalProperties": false,
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 800,
            "minLength": 1
          },
          "type": {
            "description": "Represents the comment type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationCommentType"
          }
        }
      },
      "TripOperationCommentEditRequest": {
        "type": "object",
        "description": "Represents a comment for a trip operation.\n            ",
        "additionalProperties": false,
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 800,
            "minLength": 1
          }
        }
      },
      "TripOperationDelayCreateRequest": {
        "type": "object",
        "description": "Represents a delay for a trip operation.\n            ",
        "additionalProperties": false,
        "required": [
          "note",
          "delayCode"
        ],
        "properties": {
          "delayMinutes": {
            "type": "integer",
            "description": "The number of minutes for this delay.\n            "
          },
          "note": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 128,
            "minLength": 1
          },
          "includeMvtMessage": {
            "type": "boolean",
            "description": "The flag to include the MVT message.\n            "
          },
          "delayCode": {
            "type": "string",
            "description": "The delay code.\n            ",
            "maxLength": 4,
            "minLength": 1
          }
        }
      },
      "DeltaMapperOfTripOperationDelayEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "delayMinutes": {
            "type": "integer",
            "description": "The number of minutes for this delay.\n            "
          },
          "note": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 128,
            "minLength": 1
          },
          "includeMvtMessage": {
            "type": "boolean",
            "description": "The flag to include the MVT message.\n            "
          }
        }
      },
      "TripOperationDelayEditRequest": {
        "type": "object",
        "description": "Represents a delay for a trip operation.\n            ",
        "additionalProperties": false,
        "required": [
          "note"
        ],
        "properties": {
          "delayMinutes": {
            "type": "integer",
            "description": "The number of minutes for this delay.\n            "
          },
          "note": {
            "type": "string",
            "description": "The note for this delay, containing extra information about the delay\n(if any).\n            ",
            "maxLength": 128,
            "minLength": 1
          },
          "includeMvtMessage": {
            "type": "boolean",
            "description": "The flag to include the MVT message.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfTripInformationResponsev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationResponsev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TripInformationResponsev2": {
        "type": "object",
        "description": "A collection of journeys for a given departure date and market.\n            ",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "description": "Represents the date for the journey response.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "journeys": {
            "type": "array",
            "description": "Represents the collection of journeys.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TripInformationJourneyv2"
            }
          }
        }
      },
      "TripInformationJourneyv2": {
        "type": "object",
        "description": "Represents the trip information journey.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "This is a summary of all the segments on the journey. It will contain the details\nof the transportation from the first and last segment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "tripKey": {
            "type": "string",
            "description": "Represents the trip key.\n            ",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "Represents the collection of itinerary segments for this journey.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ItinerarySegment"
            }
          }
        }
      },
      "ApisQueueRequest": {
        "type": "object",
        "description": "Request object for SendAPIS transaction. Matches to the SendAPISRequest object in NSK.\n            ",
        "additionalProperties": false,
        "properties": {
          "apisRequestType": {
            "description": "Used to specify what type of APIS request this is.\nDefault is APISRequestType.APISRequest.\n            ",
            "$ref": "#/components/schemas/ApisRequestType"
          },
          "contactPhone": {
            "type": "string",
            "description": "Gets or Sets ContactPhone property.\n            ",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "description": "Gets or Sets FaxNumber property.\n            ",
            "nullable": true
          },
          "targetCountry": {
            "type": "string",
            "description": "Only send APIS or CLOB to this CountryCode message targets.\n            ",
            "nullable": true
          },
          "contactName": {
            "description": "Gets or Sets ContactName property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "marketInformation": {
            "description": "Contains the MarketInformation that identifies a flight.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          }
        }
      },
      "ApisRequestType": {
        "type": "integer",
        "description": "The APIS Message Request Types. Determines which message is queued.\n            \n\n0 = APISRequest\n1 = APISPreRequest\n2 = APISWithFlightVerify\n3 = EUBPreRequest\n4 = EUBCloseRequest\n5 = UNAPISPreRequest\n6 = FlightClose\n7 = ClosePending",
        "x-enumNames": [
          "APISRequest",
          "APISPreRequest",
          "APISWithFlightVerify",
          "EUBPreRequest",
          "EUBCloseRequest",
          "UNAPISPreRequest",
          "FlightClose",
          "ClosePending"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "IJsonResponseOfManifest": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Manifest"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Manifest": {
        "type": "object",
        "description": "The flight manifest model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use Manifestv2 instead.",
        "additionalProperties": false,
        "properties": {
          "arrivalCountry": {
            "description": "Information about the destination country regarding APIS and APPS.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CountryBase"
          },
          "departureCountry": {
            "description": "Information about the country of origin regarding APIS and APPS.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CountryBase"
          },
          "cabinPassengerCounts": {
            "type": "array",
            "description": "The collection of Navitaire.NewSkies.Messages.Manifest.ManifestCabinPassengerCount.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestCabinPassengerCount"
            }
          },
          "market": {
            "description": "The trip details for the flight being checked in.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "legStatus": {
            "description": "The status in manifest object.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "inventoryLegCrossReferences": {
            "type": "array",
            "description": "Collection of inventory leg cross reference objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegCrossReference"
            }
          },
          "legOperationComments": {
            "type": "array",
            "description": "Collection of manifest leg operation comment objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLegOperationComment"
            }
          },
          "arrivalTime": {
            "type": "string",
            "description": "The arrival time in manifest object.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passengerCounts": {
            "description": "Represents passenger count data associated with the\nmanifest object.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerCounts"
          },
          "checkInLid": {
            "type": "integer",
            "description": "The check-in lid in the manifest object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "codeShareIndicator": {
            "type": "string",
            "description": "The indicator on whether the leg/flight is a code-share flight.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "departureGate": {
            "type": "string",
            "description": "The departure gate number.\n            ",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The departure time in manifest object.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "internationalFlight": {
            "type": "boolean",
            "description": "If true then this is a flight that departs from one country and arrives in.\n            "
          },
          "operatedByText": {
            "type": "string",
            "description": "The operated by text.\n            ",
            "nullable": true
          },
          "operatingIdentifier": {
            "description": "The operating transportation information, such as carrier code,\nflight number/identifier, etc.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "verified": {
            "type": "boolean",
            "description": "Has this flight been verified for international travel?\n            "
          },
          "passengerList": {
            "type": "array",
            "description": "Gets collection of manifest passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestPassenger"
            }
          },
          "inventoryLegId": {
            "type": "integer",
            "description": "The inventory leg ID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          }
        }
      },
      "CountryBase": {
        "type": "object",
        "description": "Represents the base class for a country model.\n            ",
        "additionalProperties": false,
        "required": [
          "countryCode",
          "countryCode3C"
        ],
        "properties": {
          "apisCheckDocuments": {
            "type": "boolean",
            "description": "Are we required to check APIS documents.\n            "
          },
          "apisRequiredInbound": {
            "type": "boolean",
            "description": "Defines whether or not this Arrival Station requires APIS.\n            "
          },
          "apisRequiredOutbound": {
            "type": "boolean",
            "description": "Defines whether or not this departure station requires APIS.\n            "
          },
          "appsRequiredInbound": {
            "type": "boolean",
            "description": "Defines whether or not this arrival station requires APPS.\n            "
          },
          "appsRequiredOutbound": {
            "type": "boolean",
            "description": "Defines whether or not this departure station requires APPS.\n            "
          },
          "countryCode": {
            "type": "string",
            "description": "Represents the two-digit country code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "countryCode3C": {
            "type": "string",
            "description": "Represents the three-digit country code.\n            ",
            "maxLength": 3,
            "minLength": 1
          }
        }
      },
      "ManifestCabinPassengerCount": {
        "type": "object",
        "description": "Manifest Cabin Passenger Count.\n            ",
        "additionalProperties": false,
        "properties": {
          "checkedIn": {
            "type": "integer",
            "description": "The checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "clearedStandBy": {
            "type": "integer",
            "description": "The cleared standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "clearedThruStandby": {
            "type": "integer",
            "description": "The cleared thru standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "manifested": {
            "type": "integer",
            "description": "The manifested passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "noShow": {
            "type": "integer",
            "description": "The passenger \"no-show\" count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "standBy": {
            "type": "integer",
            "description": "The standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruCheckedIn": {
            "type": "integer",
            "description": "The thru checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruManifested": {
            "type": "integer",
            "description": "The thru manifested passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruNoShow": {
            "type": "integer",
            "description": "The thru \"no-show\" passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruStandBy": {
            "type": "integer",
            "description": "The thru standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "totalCheckedIn": {
            "type": "integer",
            "description": "The total checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "totalOnBoard": {
            "type": "integer",
            "description": "The total on-board passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "classRank": {
            "type": "integer",
            "description": "The cabin class rank.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "cabinOfService": {
            "type": "string",
            "description": "The cabin of service.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          }
        }
      },
      "ManifestLegOperationComment": {
        "type": "object",
        "description": "Manifest leg operations comment model.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentId": {
            "type": "integer",
            "description": "The agentID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "date": {
            "type": "string",
            "description": "The comment date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The comment text.\n            ",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": true
          },
          "commentType": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/OperationCommentType"
          }
        }
      },
      "PassengerCounts": {
        "type": "object",
        "description": "Represents various count data for passengers, such as checked-in, no-shows, etc.\n            ",
        "additionalProperties": false,
        "properties": {
          "checkedIn": {
            "type": "integer",
            "description": "The checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "clearedStandBy": {
            "type": "integer",
            "description": "The cleared standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "clearedThruStandby": {
            "type": "integer",
            "description": "The cleared thru standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "manifested": {
            "type": "integer",
            "description": "The manifested passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "noShow": {
            "type": "integer",
            "description": "The passenger \"no-show\" count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "standBy": {
            "type": "integer",
            "description": "The standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruCheckedIn": {
            "type": "integer",
            "description": "The thru checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruManifested": {
            "type": "integer",
            "description": "The thru manifested passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruNoShow": {
            "type": "integer",
            "description": "The thru \"no-show\" passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "thruStandBy": {
            "type": "integer",
            "description": "The thru standby passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "totalCheckedIn": {
            "type": "integer",
            "description": "The total checked-in passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "totalOnBoard": {
            "type": "integer",
            "description": "The total on-board passenger count.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          }
        }
      },
      "ManifestPassenger": {
        "type": "object",
        "description": "The  manifest passenger model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use ManifestPassengerv2 instead.",
        "additionalProperties": false,
        "properties": {
          "balanceDue": {
            "type": "boolean",
            "description": "If there is a balance due it returns true. This is the same as having an under paid, paid status.\n            "
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique identifier for the passenger.\n            ",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "The date the booking was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "checkInType": {
            "description": "The type of flight that is being dealt with: Local = first leg of journey\n            ",
            "$ref": "#/components/schemas/CheckInType"
          },
          "comments": {
            "type": "array",
            "description": "Manifest comments attached to the booking.  Gets collection of ManifestComment\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestComment"
            }
          },
          "customerNumber": {
            "type": "string",
            "description": "The string that represents the customer number of the person.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code used by the passenger in booking this reservation.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "infant": {
            "description": "The information about the infant traveling with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestInfant"
          },
          "manifestQueues": {
            "type": "array",
            "description": "Queue that this passenger is listed on.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestQueue"
            }
          },
          "name": {
            "description": "Passengers Name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "paidStatus": {
            "description": "The PaidStatus property.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "passengersOnBooking": {
            "type": "integer",
            "description": "Total number of passengers on the booking.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "travelDocuments": {
            "type": "array",
            "description": "Travel documents for the passenger, i.e. Passports and Visas.\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerDoc\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "profileStatus": {
            "description": "The ProfileStatus property.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "program": {
            "description": "The passenger program data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Program"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator for the booking.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "services": {
            "type": "array",
            "description": "The flight service information for the passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FlightService"
            }
          },
          "sourcePos": {
            "description": "The balance due on the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "status": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "passengerInformation": {
            "description": "Additional passenger information details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          },
          "type": {
            "type": "string",
            "description": "The passenger's type.\n            ",
            "nullable": true
          },
          "createdAgentId": {
            "type": "integer",
            "description": "Agent that created the booking that this passenger is on.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "passengerAddresses": {
            "type": "array",
            "description": "Travel documents for the passenger, i.e. Passports and Visas.\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerAddress\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestPassengerAddress"
            }
          },
          "personId": {
            "type": "integer",
            "description": "The unique identifier for the registered person within the system.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "passengerId": {
            "type": "integer",
            "description": "The unique identifier for the passenger.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          }
        }
      },
      "CheckInType": {
        "type": "integer",
        "description": "Check in Types enumeration.\n            \n\n0 = Default\n1 = Local\n2 = Through\n4 = Connecting\n6 = NonLocal",
        "x-enumNames": [
          "Default",
          "Local",
          "Through",
          "Connecting",
          "NonLocal"
        ],
        "enum": [
          0,
          1,
          2,
          4,
          6
        ]
      },
      "ManifestComment": {
        "type": "object",
        "description": "Manifest Comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentId": {
            "type": "integer",
            "description": "The agentID.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "date": {
            "type": "string",
            "description": "The comment date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The comment text.\n            ",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": true
          },
          "commentType": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/CommentType"
          },
          "domainCode": {
            "type": "string",
            "description": "The domain code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "nullable": true
          },
          "systemName": {
            "description": "The system type.\n            ",
            "$ref": "#/components/schemas/SystemName"
          }
        }
      },
      "ManifestInfant": {
        "type": "object",
        "description": "Manifest Infant.\n            ",
        "additionalProperties": false,
        "properties": {
          "nationality": {
            "type": "string",
            "description": "The nationality of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The residentCountry of the passenger.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "travelDocuments": {
            "type": "array",
            "description": "The collection of travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          }
        }
      },
      "ManifestQueue": {
        "type": "object",
        "description": "Manifest Queue.\n            ",
        "additionalProperties": false,
        "properties": {
          "manifestQueueKey": {
            "type": "string",
            "description": "Represents the unique identifier for the manifest queue model.\n            ",
            "nullable": true
          },
          "queueAction": {
            "description": "The action that will be taken as a result of the placement in.\n            ",
            "$ref": "#/components/schemas/QueueAction"
          },
          "queueCategoryCode": {
            "type": "string",
            "description": "The QueueCategoryCode property.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "queueCode": {
            "type": "string",
            "description": "The identifier for the queue where the booking is placed.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "queueName": {
            "type": "string",
            "description": "The name for the queue where the booking is placed.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "Program": {
        "type": "object",
        "description": "Model representing a passenger program.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "pattern": "^[^|]*$",
            "nullable": true
          },
          "levelCode": {
            "type": "string",
            "description": "The program level code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "pattern": "^[^|]*$",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The program number.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "FlightService": {
        "type": "object",
        "description": "Flight Service.\n            ",
        "additionalProperties": false,
        "properties": {
          "guestValueLevelCode": {
            "type": "string",
            "description": "The GuestValueLevelCode property.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "guestValueScore": {
            "type": "integer",
            "description": "The GuestValueScore property.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          },
          "segments": {
            "type": "array",
            "description": "The collection of Manifest Segment objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestSegment"
            }
          }
        }
      },
      "ManifestSegment": {
        "type": "object",
        "description": "Manifest Segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for the segment.\n            ",
            "nullable": true
          },
          "market": {
            "description": "Represents data relating to the manifest segment market.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "baggageAllowanceUsed": {
            "type": "boolean",
            "description": "Baggage Allowance Used.\n            "
          },
          "baggageAllowanceWeight": {
            "type": "integer",
            "description": "Baggage Allowance Weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "baggageAllowanceWeightType": {
            "description": "Weight Type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "bookingStatus": {
            "type": "string",
            "description": "The BookingStatus property.\n            ",
            "nullable": true
          },
          "cabinOfService": {
            "type": "string",
            "description": "The CabinOfService property.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "changeReasonCode": {
            "type": "string",
            "description": "The ChangeReasonCode property.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The ClassOfService property.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The FareBasisCode.\n            ",
            "nullable": true
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The infant ticket number.\n            ",
            "nullable": true
          },
          "international": {
            "type": "boolean",
            "description": "The International property.\n            "
          },
          "legs": {
            "type": "array",
            "description": "The Legs property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLeg"
            }
          },
          "productClassCode": {
            "type": "string",
            "description": "The product class code.\n            ",
            "nullable": true
          },
          "seatProperties": {
            "type": "array",
            "description": "The Legs property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestSeatProperty"
            }
          },
          "segmentType": {
            "type": "string",
            "description": "The SegmentType.\n            ",
            "nullable": true
          },
          "soldDate": {
            "type": "string",
            "description": "The date the segment was sold.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "ssrCodes": {
            "type": "string",
            "description": "The SSRCodes property.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket indicator.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number.\n            ",
            "nullable": true
          },
          "upgradeIndicator": {
            "type": "boolean",
            "description": "The upgrade indicator property.\n            "
          },
          "verifiedTravelDocs": {
            "type": "string",
            "description": "The VerifiedTravelDocs property.\n            ",
            "nullable": true
          },
          "xRefIdentifier": {
            "description": "The travel cross reference identifier information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          }
        }
      },
      "ManifestLeg": {
        "type": "object",
        "description": "Manifest Leg.\n            ",
        "additionalProperties": false,
        "properties": {
          "arrivalDetail": {
            "type": "string",
            "description": "The ArrivalDetail property.\n            ",
            "nullable": true
          },
          "bags": {
            "type": "array",
            "description": "The Bags property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OperationBag"
            }
          },
          "boardingSequence": {
            "type": "integer",
            "description": "The BoardingSequence property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "boardingZone": {
            "type": "integer",
            "description": "Boarding Zone of ManifestLeg.\n            ",
            "maximum": 99.0,
            "minimum": 0.0
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "The CompartmentDesignator property.\n            ",
            "nullable": true
          },
          "departureDetail": {
            "type": "string",
            "description": "The DepartureDetail property.\n            ",
            "nullable": true
          },
          "market": {
            "description": "The market property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "legNumber": {
            "type": "integer",
            "description": "The LegNumber property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "liftStatus": {
            "description": "The LiftStatus property.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "manifestOrigin": {
            "type": "boolean",
            "description": "The ManifestOrigin property.\n            "
          },
          "priorityCode": {
            "type": "string",
            "description": "The PriorityCode property.\n            ",
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "The PriorityDate property.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "promptToVerifyId": {
            "type": "boolean",
            "description": "Indicates whether to prompt to verify the passenger id when checking in,\n            "
          },
          "ssrs": {
            "type": "array",
            "description": "The SSRs property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrGlance"
            }
          },
          "unitAssignmentWeight": {
            "type": "integer",
            "description": "The unit assignment weight. This value is used to determine\nthe satisfaction level of the passenger's seat assignment.\n            ",
            "format": "int32"
          },
          "unitDesignator": {
            "type": "string",
            "description": "The UnitDesignator property.\n            ",
            "nullable": true
          }
        }
      },
      "ManifestSeatProperty": {
        "type": "object",
        "description": "Manifest Seat Property.\n            ",
        "additionalProperties": false,
        "properties": {
          "preferenceStatus": {
            "type": "string",
            "description": "The preference status field contains the current met/unmet or unknown status.\n            ",
            "nullable": true
          },
          "propertyCode": {
            "type": "string",
            "description": "The property code is a string value. The expected value is true.\n            ",
            "nullable": true
          },
          "propertyTypeCode": {
            "type": "string",
            "description": "The property type code indicates the type of seat preference requested.\n            ",
            "nullable": true
          }
        }
      },
      "ManifestPassengerAddress": {
        "type": "object",
        "description": "The manifest passenger address.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use ManifestPassengerAddressv2 instead.",
        "additionalProperties": false,
        "properties": {
          "countryName": {
            "type": "string",
            "description": "The name of the country.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The addresses APIS status.\n            ",
            "$ref": "#/components/schemas/ApisAddressStatus"
          },
          "passengerAddressKey": {
            "type": "string",
            "description": "The unique address identifier.\n            ",
            "nullable": true
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "passengerId": {
            "type": "integer",
            "description": "The unique identifier for a passenger within a booking.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          }
        }
      },
      "ManifestRequestBase": {
        "type": "object",
        "description": "Represents the manifest request base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "baggageWeightType": {
            "description": "Represents the weight type for all bags in the manifest.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/WeightType"
          },
          "iatciLookAhead": {
            "type": "boolean",
            "description": "Specify whether the returned manifest includes\ndownline(.D)/inbound(.I) IATCI connections.\n            "
          },
          "manifestFilters": {
            "type": "array",
            "description": "The filters for the manifest.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestFilter"
            }
          }
        }
      },
      "ManifestFilter": {
        "type": "integer",
        "description": "The manifest filter.  Setting to \"None\" will return the smallest\namount of data.  Setting to \"All\" will return the largest amount\nof data.  \"And-ing\" the enums allows you to limit the\nunwanted/unneeded data.\n            \n\n0 = None\n1 = Baggage\n2 = PassengerTravelDoc\n3 = PassengerInfant\n4 = PassengerAddress\n5 = BookingComment\n6 = BookingQueue\n7 = PassengerJourneySegmentProperty\n8 = PassengerJourneySsr\n9 = InventoryLegOpComments\n10 = All\n13 = PassengerSecurityInfo",
        "x-enumNames": [
          "None",
          "Baggage",
          "PassengerTravelDoc",
          "PassengerInfant",
          "PassengerAddress",
          "BookingComment",
          "BookingQueue",
          "PassengerJourneySegmentProperty",
          "PassengerJourneySsr",
          "InventoryLegOpComments",
          "All",
          "PassengerSecurityInfo"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          13
        ]
      },
      "IJsonResponseOfTripInformationResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripInformationResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerDetails": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDetails"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerDetails": {
        "type": "object",
        "description": "The passenger details model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use PassengerDetailsv2 instead.",
        "additionalProperties": false,
        "properties": {
          "summary": {
            "description": "The manifest passenger details summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDetailsSummary"
          },
          "passengers": {
            "type": "array",
            "description": "The list of passenger detail information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerDetail"
            }
          }
        }
      },
      "PassengerDetailsSummary": {
        "type": "object",
        "description": "The manifest passenger details summary.\n            ",
        "additionalProperties": false,
        "properties": {
          "totalConfirmedMales": {
            "type": "integer",
            "description": "The total number of confirmed male passengers.\n            ",
            "format": "int32"
          },
          "totalConfirmedFemales": {
            "type": "integer",
            "description": "The total number of confirmed female passengers.\n            ",
            "format": "int32"
          },
          "totalConfirmedChildren": {
            "type": "integer",
            "description": "The total number of confirmed children.\n            ",
            "format": "int32"
          },
          "totalConfirmedInfants": {
            "type": "integer",
            "description": "The total number of confirmed infants.\n            ",
            "format": "int32"
          },
          "totalWaitListConfirmedMales": {
            "type": "integer",
            "description": "The total number of wait list confirmed male passengers.\n            ",
            "format": "int32"
          },
          "totalWaitListConfirmedFemales": {
            "type": "integer",
            "description": "The total number of wait list confirmed female passengers.\n            ",
            "format": "int32"
          },
          "totalWaitListConfirmedChildren": {
            "type": "integer",
            "description": "The total number of wait list confirmed children.\n            ",
            "format": "int32"
          },
          "totalWaitListConfirmedInfants": {
            "type": "integer",
            "description": "The total number of wait list confirmed infants.\n            ",
            "format": "int32"
          },
          "totalUnconfirmedMales": {
            "type": "integer",
            "description": "The total number of unconfirmed male passengers.\n            ",
            "format": "int32"
          },
          "totalUnconfirmedFemales": {
            "type": "integer",
            "description": "The total number of unconfirmed female passengers.\n            ",
            "format": "int32"
          },
          "totalUnconfirmedChildren": {
            "type": "integer",
            "description": "The total number of unconfirmed children.\n            ",
            "format": "int32"
          },
          "totalUnconfirmedInfants": {
            "type": "integer",
            "description": "The total number of unconfirmed infants.\n            ",
            "format": "int32"
          }
        }
      },
      "PassengerDetail": {
        "type": "object",
        "description": "The passenger detail model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use PassengerDetailv2 instead.",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The current status of the booking.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "createdDate": {
            "type": "string",
            "description": "The initial date and time of the booking.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "profileStatus": {
            "description": "The profile status on the booking.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "weightCategory": {
            "description": "The weight category assigned to this passenger.\n            ",
            "$ref": "#/components/schemas/WeightCategory"
          },
          "origin": {
            "type": "string",
            "description": "The departure station code.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "The arrival station code.\n            ",
            "nullable": true
          },
          "tripType": {
            "description": "The current assigned trip type.\n            ",
            "$ref": "#/components/schemas/TripType"
          },
          "segmentBookingStatus": {
            "type": "string",
            "description": "The passenger segment booking status.\n            ",
            "nullable": true
          },
          "connectingFlight": {
            "type": "string",
            "description": "The connecting flight number if appropriate.\n            ",
            "nullable": true
          },
          "connectingStation": {
            "type": "string",
            "description": "The connecting station code if appropriate.\n            ",
            "nullable": true
          },
          "finalDestination": {
            "type": "string",
            "description": "The final destination station code.\n            ",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "description": "The list of payment codes for the booking.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "comments": {
            "type": "array",
            "description": "The list of the manifest comments.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "infant": {
            "description": "The infant associated with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InfantBase"
          },
          "customerProgram": {
            "description": "The customer program associated with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Program"
          },
          "verifiedReference": {
            "type": "string",
            "description": "The reference of who or what verified the passenger's documents.\n            ",
            "nullable": true
          },
          "guestValueLevel": {
            "type": "string",
            "description": "The passenger guest value level.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "paidStatus": {
            "description": "The paid status for the passenger.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The ticket number of the infant with the passenger.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket type of the passenger.\n            ",
            "nullable": true
          },
          "ssrCodes": {
            "type": "array",
            "description": "The list of SSR codes associated with this passenger.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerId": {
            "type": "integer",
            "description": "The unique passenger ID.\n            ",
            "format": "int64"
          }
        }
      },
      "TripType": {
        "type": "integer",
        "description": "The trip type enumeration\n            \n\n0 = None\n1 = OneWay\n2 = RoundTrip\n3 = HalfRound\n4 = OpenJaw\n5 = CircleTrip\n6 = All",
        "x-enumNames": [
          "None",
          "OneWay",
          "RoundTrip",
          "HalfRound",
          "OpenJaw",
          "CircleTrip",
          "All"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "InfantBase": {
        "type": "object",
        "description": "The base class for the infant.\n            ",
        "additionalProperties": false,
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the infant.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The gender of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "name": {
            "description": "The name of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "IJsonResponseOfIListOfPassengerSeatAssignment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerSeatAssignment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerSeatAssignment": {
        "type": "object",
        "description": "The passenger seat assignment model.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The ticket number of the infant with the passenger.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket type of the passenger.\n            ",
            "nullable": true
          },
          "ssrCodes": {
            "type": "array",
            "description": "The list of SSR codes associated with this passenger.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerNumber": {
            "type": "integer",
            "description": "The passenger number.\n            "
          },
          "passengerType": {
            "type": "string",
            "description": "The passenger type.\n            ",
            "nullable": true,
            "example": "ADT - Adult, CHD - Child, SNR - Senior, Mil - Military\n            "
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "nullable": true
          },
          "unitDesignator": {
            "type": "string",
            "description": "The unit designator.\n            ",
            "nullable": true
          },
          "liftStatus": {
            "description": "The status of the flight leg.  It indicates whether the coupon has been used, and\nif the passenger has been checked in, has boarded the flight or not.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "baggageCount": {
            "type": "integer",
            "description": "The number of bags associated with the passenger.\n            ",
            "maximum": 99.0,
            "minimum": 0.0
          }
        }
      },
      "IJsonResponseOfManifestLight": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestLight"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ManifestLight": {
        "type": "object",
        "description": "The flight manifest model. This version is built to be lighter and more performance for API clients.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengers": {
            "type": "array",
            "description": "Gets collection of manifest passenger version two.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLightPassenger"
            }
          },
          "cabinPassengerCounts": {
            "type": "array",
            "description": "The collection of manifest cabin passenger counts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestCabinPassengerCount"
            }
          },
          "inventoryLegCrossReferences": {
            "type": "array",
            "description": "Collection of inventory leg cross reference objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegCrossReference"
            }
          },
          "passengerCounts": {
            "description": "Represents passenger count data associated with the\nmanifest object.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerCounts"
          },
          "checkInLid": {
            "type": "integer",
            "description": "The check-in lid in the manifest object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "codeShareIndicator": {
            "type": "string",
            "description": "The indicator on whether the leg/flight is a code-share flight.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "operatedByText": {
            "type": "string",
            "description": "The operated by text.\n            ",
            "nullable": true
          },
          "operatingIdentifier": {
            "description": "The operating transportation information, such as carrier code,\nflight number/identifier, etc.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          }
        }
      },
      "ManifestLightPassenger": {
        "type": "object",
        "description": "The manifest passenger used for lighter endpoints without nested duplicated data.\n            ",
        "additionalProperties": false,
        "properties": {
          "balanceDue": {
            "type": "boolean",
            "description": "If there is a balance due it returns true. This is the same as having an under paid, paid status.\n            "
          },
          "userKey": {
            "type": "string",
            "description": "The user key.\n            ",
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key\n            ",
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger's alternate key\n            ",
            "nullable": true
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique identifier for the passenger.\n            ",
            "nullable": true
          },
          "checkInType": {
            "description": "The type of flight that is being dealt with: Local = first leg of journey\n            ",
            "$ref": "#/components/schemas/CheckInType"
          },
          "customerNumber": {
            "type": "string",
            "description": "The string that represents the customer number of the person.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code used by the passenger in booking this reservation.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "infant": {
            "description": "The information about the infant traveling with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Infant"
          },
          "name": {
            "description": "Passenger's Name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "paidStatus": {
            "description": "The PaidStatus property.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "profileStatus": {
            "description": "The ProfileStatus property.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "program": {
            "description": "The passenger program data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Program"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator for the booking.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "sourcePointOfSale": {
            "description": "The balance due on the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "bookingStatus": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "passengerInformation": {
            "description": "Additional passenger information details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          },
          "type": {
            "type": "string",
            "description": "The passenger's type.\n            ",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "The date the booking was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "soldDate": {
            "type": "string",
            "description": "The date the segment was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "journey": {
            "description": "Journey details of the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestPassengerJourney"
          }
        }
      },
      "ManifestPassengerJourney": {
        "type": "object",
        "description": "The manifest passenger journey used for lighter endpoints without nested duplicated data.\n            ",
        "additionalProperties": false,
        "properties": {
          "customerRecognition": {
            "description": "The customer recognition details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestCustomerRecognition"
          },
          "segmentCount": {
            "type": "integer",
            "description": "The number of segments for this passenger.\n            ",
            "format": "int32"
          },
          "segment": {
            "description": "The segment details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestLightSegment"
          },
          "changeReason": {
            "description": "The journey change reason.\n            ",
            "$ref": "#/components/schemas/ChangeReasonCodes"
          }
        }
      },
      "ManifestCustomerRecognition": {
        "type": "object",
        "description": "The manifest loyalty used for lighter endpoints without nested duplicated data.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The customer recognition code that aligns with the recognition level.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "points": {
            "type": "integer",
            "description": "The customer recognition score in points.\n            ",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 0.0
          }
        }
      },
      "ManifestLightSegment": {
        "type": "object",
        "description": "The manifest segment data.\n            ",
        "additionalProperties": false,
        "properties": {
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for the segment.\n            ",
            "nullable": true
          },
          "bookingStatus": {
            "type": "string",
            "description": "The BookingStatus property.\n            ",
            "nullable": true
          },
          "changeReason": {
            "description": "The ChangeReasonCode property.\n            ",
            "$ref": "#/components/schemas/ChangeReasonCodes"
          },
          "classOfService": {
            "type": "string",
            "description": "The ClassOfService property.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The FareBasisCode.\n            ",
            "nullable": true
          },
          "leg": {
            "description": "The Leg property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestLightLeg"
          },
          "productClassCode": {
            "type": "string",
            "description": "The product class code.\n            ",
            "nullable": true
          },
          "seatProperties": {
            "type": "array",
            "description": "The Legs property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestSeatProperty"
            }
          },
          "soldDate": {
            "type": "string",
            "description": "The date the segment was sold.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket indicator.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number.\n            ",
            "nullable": true
          },
          "upgradeIndicator": {
            "type": "boolean",
            "description": "The upgrade indicator property.\n            "
          },
          "externalIdentifier": {
            "description": "The travel cross reference 'xref' identifier information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "legCount": {
            "type": "integer",
            "description": "The number of legs on the segment.\n            ",
            "format": "int32"
          },
          "segmentType": {
            "description": "The manifest segment type.\n            ",
            "$ref": "#/components/schemas/SegmentTypes"
          }
        }
      },
      "ManifestLightLeg": {
        "type": "object",
        "description": "The manifest leg data.\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingSequence": {
            "type": "integer",
            "description": "The boarding sequence property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "boardingZone": {
            "type": "integer",
            "description": "Boarding Zone of ManifestLeg.\n            ",
            "maximum": 99.0,
            "minimum": 0.0
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "The CompartmentDesignator property.\n            ",
            "nullable": true
          },
          "legNumber": {
            "type": "integer",
            "description": "The LegNumber property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "liftStatus": {
            "description": "The LiftStatus property.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "priorityCode": {
            "type": "string",
            "description": "The PriorityCode property.\n            ",
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "The PriorityDate property.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "unitAssignmentWeight": {
            "type": "integer",
            "description": "The unit assignment weight. This value is used to determine\nthe satisfaction level of the passenger's seat assignment.\n            ",
            "format": "int32"
          },
          "unitDesignator": {
            "type": "string",
            "description": "The UnitDesignator property.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfManifestSsr": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestSsr"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ManifestSsr": {
        "type": "object",
        "description": "The flight manifest ssr data.\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "The additional information on the SSR that are not visible to passengers.\n            ",
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "The unique code to identify an SSR.\n            ",
            "nullable": true
          },
          "ssrDetail": {
            "type": "string",
            "description": "The additional information for the SSR as requested by the passenger.\n            ",
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "Unique passenger key\n            ",
            "nullable": true
          },
          "legNumber": {
            "type": "integer",
            "description": "The leg number if this is a leg ssr.\n            ",
            "format": "int32",
            "nullable": true
          },
          "segmentKey": {
            "type": "string",
            "description": "The unique segment identifier.\n            ",
            "nullable": true
          },
          "isOrigin": {
            "type": "boolean",
            "description": "Is on the same leg as the manifest you are viewing.\n            "
          },
          "recordLocator": {
            "type": "string",
            "description": "The associated booking record locator.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIDictionaryOfStringAndManifestBookings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The payload data.\n            ",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ManifestBookings"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ManifestBookings": {
        "type": "object",
        "description": "The manifest booking.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The associated booking record locator.\n            ",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time"
          },
          "paidStatus": {
            "description": "The paid status.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "status": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "passengersOnBooking": {
            "type": "integer",
            "description": "The total number of passengers on the booking.\n            ",
            "format": "int32"
          },
          "queues": {
            "type": "array",
            "description": "The subset of locking or warning related queues on the booking.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestQueue"
            }
          },
          "comments": {
            "type": "array",
            "description": "The booking comments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLightComment"
            }
          }
        }
      },
      "ManifestLightComment": {
        "type": "object",
        "description": "The manifest comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "userKey": {
            "type": "string",
            "description": "The unique user key.\n            ",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The comment date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The comment text.\n            ",
            "nullable": true
          },
          "commentType": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/CommentType"
          },
          "domainCode": {
            "type": "string",
            "description": "The domain code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "nullable": true
          },
          "systemName": {
            "description": "The system name.\n            ",
            "$ref": "#/components/schemas/SystemName"
          }
        }
      },
      "IJsonResponseOfIListOfManifestBySegment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestBySegment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ManifestBySegment": {
        "type": "object",
        "description": "The manifest data sorted by segment then passenger used for lighter endpoints without nested duplicated data.\n            ",
        "additionalProperties": false,
        "properties": {
          "segmentKey": {
            "type": "string",
            "description": "The unique identifier for the segment.\n            ",
            "nullable": true
          },
          "market": {
            "description": "The segments market.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "externalIdentifier": {
            "description": "The external 'xref' identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "legs": {
            "type": "array",
            "description": "The leg details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLegMarket"
            }
          },
          "passengers": {
            "type": "array",
            "description": "The passenger specific details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestPassengerSegment"
            }
          }
        }
      },
      "ManifestLegMarket": {
        "type": "object",
        "description": "The manifest leg market used for lighter endpoints without nested duplicated data.\n            ",
        "additionalProperties": false,
        "properties": {
          "legNumber": {
            "type": "integer",
            "description": "The leg number associated with the segment\n            ",
            "format": "int32"
          },
          "market": {
            "description": "The segment's market.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "liftStatus": {
            "description": "The lift status.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "manifestOrigin": {
            "type": "boolean",
            "description": "Returns true if this is the same leg as requested in the manifest.\n            "
          }
        }
      },
      "ManifestPassengerSegment": {
        "type": "object",
        "description": "The manifest data related unique to the passenger on the segment.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerAlternateKey": {
            "type": "string",
            "description": "Unique passenger key.\n            ",
            "nullable": true
          },
          "baggageAllowanceUsed": {
            "type": "boolean",
            "description": "Baggage Allowance Used.\n            "
          },
          "baggageAllowanceWeight": {
            "type": "integer",
            "description": "Baggage Allowance Weight.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "baggageAllowanceWeightType": {
            "description": "Weight Type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "cabinOfService": {
            "type": "string",
            "description": "The CabinOfService property.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "changeReasonCode": {
            "type": "string",
            "description": "The ChangeReasonCode property.\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "The ClassOfService property.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The FareBasisCode.\n            ",
            "nullable": true
          },
          "productClassCode": {
            "type": "string",
            "description": "The product class code.\n            ",
            "nullable": true
          },
          "seatProperties": {
            "type": "array",
            "description": "The Legs property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestSeatProperty"
            }
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket indicator.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number.\n            ",
            "nullable": true
          },
          "upgradeIndicator": {
            "type": "boolean",
            "description": "The upgrade indicator property.\n            "
          },
          "verifiedTravelDocs": {
            "type": "string",
            "description": "The VerifiedTravelDocs property.\n            ",
            "nullable": true
          },
          "legs": {
            "type": "array",
            "description": "The passenger related leg details.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLegPassenger"
            }
          }
        }
      },
      "ManifestLegPassenger": {
        "type": "object",
        "description": "The manifest data related to the passenger and leg.\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingSequence": {
            "type": "integer",
            "description": "The BoardingSequence property.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "boardingZone": {
            "type": "integer",
            "description": "Boarding Zone of ManifestLeg.\n            ",
            "maximum": 99.0,
            "minimum": 0.0
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "The CompartmentDesignator property.\n            ",
            "nullable": true
          },
          "priorityCode": {
            "type": "string",
            "description": "The PriorityCode property.\n            ",
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "The PriorityDate property.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "promptToVerifyId": {
            "type": "boolean",
            "description": "Indicates whether to prompt to verify the passenger id when checking in.\n            "
          },
          "unitAssignmentWeight": {
            "type": "integer",
            "description": "The unit assignment weight. This value is used to determine\nthe satisfaction level of the passenger's seat assignment.\n            ",
            "format": "int32"
          },
          "unitDesignator": {
            "type": "string",
            "description": "The UnitDesignator property.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfManifestv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Manifestv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Manifestv2": {
        "type": "object",
        "description": "The flight manifest version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "arrivalCountry": {
            "description": "Information about the destination country regarding APIS and APPS.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CountryBase"
          },
          "departureCountry": {
            "description": "Information about the country of origin regarding APIS and APPS.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CountryBase"
          },
          "cabinPassengerCounts": {
            "type": "array",
            "description": "The collection of Navitaire.NewSkies.Messages.Manifest.ManifestCabinPassengerCount.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestCabinPassengerCount"
            }
          },
          "market": {
            "description": "The trip details for the flight being checked in.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MarketInformation"
          },
          "legStatus": {
            "description": "The status in manifest object.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "inventoryLegCrossReferences": {
            "type": "array",
            "description": "Collection of inventory leg cross reference objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegCrossReference"
            }
          },
          "legOperationComments": {
            "type": "array",
            "description": "Collection of manifest leg operation comment objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestLegOperationComment"
            }
          },
          "arrivalTime": {
            "type": "string",
            "description": "The arrival time in manifest object.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passengerCounts": {
            "description": "Represents passenger count data associated with the\nmanifest object.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerCounts"
          },
          "checkInLid": {
            "type": "integer",
            "description": "The check-in lid in the manifest object.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "codeShareIndicator": {
            "type": "string",
            "description": "The indicator on whether the leg/flight is a code-share flight.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "departureGate": {
            "type": "string",
            "description": "The departure gate number.\n            ",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "description": "The departure time in manifest object.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "internationalFlight": {
            "type": "boolean",
            "description": "If true then this is a flight that departs from one country and arrives in.\n            "
          },
          "operatedByText": {
            "type": "string",
            "description": "The operated by text.\n            ",
            "nullable": true
          },
          "operatingIdentifier": {
            "description": "The operating transportation information, such as carrier code,\nflight number/identifier, etc.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "verified": {
            "type": "boolean",
            "description": "Has this flight been verified for international travel?\n            "
          },
          "passengerList": {
            "type": "array",
            "description": "Gets collection of manifest passenger version two.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestPassengerv2"
            }
          },
          "legKey": {
            "type": "string",
            "description": "The inventory leg key.\n            ",
            "nullable": true
          }
        }
      },
      "ManifestPassengerv2": {
        "type": "object",
        "description": "The manifest passenger version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "balanceDue": {
            "type": "boolean",
            "description": "If there is a balance due it returns true. This is the same as having an under paid, paid status.\n            "
          },
          "passengerKey": {
            "type": "string",
            "description": "The unique identifier for the passenger.\n            ",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "The date the booking was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "checkInType": {
            "description": "The type of flight that is being dealt with: Local = first leg of journey\n            ",
            "$ref": "#/components/schemas/CheckInType"
          },
          "comments": {
            "type": "array",
            "description": "Manifest comments attached to the booking.  Gets collection of ManifestComment\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestComment"
            }
          },
          "customerNumber": {
            "type": "string",
            "description": "The string that represents the customer number of the person.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "discountCode": {
            "type": "string",
            "description": "The discount code used by the passenger in booking this reservation.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "infant": {
            "description": "The information about the infant traveling with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ManifestInfant"
          },
          "manifestQueues": {
            "type": "array",
            "description": "Queue that this passenger is listed on.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestQueue"
            }
          },
          "name": {
            "description": "Passengers Name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "paidStatus": {
            "description": "The PaidStatus property.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "passengersOnBooking": {
            "type": "integer",
            "description": "Total number of passengers on the booking.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "travelDocuments": {
            "type": "array",
            "description": "Travel documents for the passenger, i.e. Passports and Visas.\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerDoc\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerTravelDocument"
            }
          },
          "profileStatus": {
            "description": "The ProfileStatus property.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "program": {
            "description": "The passenger program data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Program"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator for the booking.\n            ",
            "maxLength": 12,
            "minLength": 0,
            "nullable": true
          },
          "services": {
            "type": "array",
            "description": "The flight service information for the passenger.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FlightService"
            }
          },
          "sourcePos": {
            "description": "The balance due on the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "status": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "passengerInformation": {
            "description": "Additional passenger information details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerInformation"
          },
          "type": {
            "type": "string",
            "description": "The passenger's type.\n            ",
            "nullable": true
          },
          "userKey": {
            "type": "string",
            "description": "The user key.\n            ",
            "nullable": true
          },
          "passengerAddresses": {
            "type": "array",
            "description": "Travel documents for the passenger, i.e. Passports and Visas, version two.\nNavitaire.NewSkies.Messages.Manifest.ManifestPassengerAddress\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManifestPassengerAddressv2"
            }
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key\n            ",
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger's alternate key\n            ",
            "nullable": true
          }
        }
      },
      "ManifestPassengerAddressv2": {
        "type": "object",
        "description": "The manifest passenger address version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "countryName": {
            "type": "string",
            "description": "The name of the country.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name associated with this address.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with this address.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "Station code associated with this address.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address associated with the address.\n            ",
            "nullable": true
          },
          "status": {
            "description": "The addresses APIS status.\n            ",
            "$ref": "#/components/schemas/ApisAddressStatus"
          },
          "passengerAddressKey": {
            "type": "string",
            "description": "The unique address identifier.\n            ",
            "nullable": true
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger's alternate key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfTripInformationResponsev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TripInformationResponsev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPassengerDetailsv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDetailsv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerDetailsv2": {
        "type": "object",
        "description": "The passenger details version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "summary": {
            "description": "The manifest passenger details summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDetailsSummary"
          },
          "passengers": {
            "type": "array",
            "description": "The list of passenger detail information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerDetailv2"
            }
          }
        }
      },
      "PassengerDetailv2": {
        "type": "object",
        "description": "The passenger detail version two model.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The current status of the booking.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "createdDate": {
            "type": "string",
            "description": "The initial date and time of the booking.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "profileStatus": {
            "description": "The profile status on the booking.\n            ",
            "$ref": "#/components/schemas/BookingProfileStatus"
          },
          "weightCategory": {
            "description": "The weight category assigned to this passenger.\n            ",
            "$ref": "#/components/schemas/WeightCategory"
          },
          "origin": {
            "type": "string",
            "description": "The departure station code.\n            ",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "description": "The arrival station code.\n            ",
            "nullable": true
          },
          "tripType": {
            "description": "The current assigned trip type.\n            ",
            "$ref": "#/components/schemas/TripType"
          },
          "segmentBookingStatus": {
            "type": "string",
            "description": "The passenger segment booking status.\n            ",
            "nullable": true
          },
          "connectingFlight": {
            "type": "string",
            "description": "The connecting flight number if appropriate.\n            ",
            "nullable": true
          },
          "connectingStation": {
            "type": "string",
            "description": "The connecting station code if appropriate.\n            ",
            "nullable": true
          },
          "finalDestination": {
            "type": "string",
            "description": "The final destination station code.\n            ",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "description": "The list of payment codes for the booking.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "comments": {
            "type": "array",
            "description": "The list of the manifest comments.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "infant": {
            "description": "The infant associated with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InfantBase"
          },
          "customerProgram": {
            "description": "The customer program associated with the passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Program"
          },
          "verifiedReference": {
            "type": "string",
            "description": "The reference of who or what verified the passenger's documents.\n            ",
            "nullable": true
          },
          "guestValueLevel": {
            "type": "string",
            "description": "The passenger guest value level.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "paidStatus": {
            "description": "The paid status for the passenger.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The passenger name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "The ticket number of the infant with the passenger.\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger.\n            ",
            "nullable": true
          },
          "ticketIndicator": {
            "type": "string",
            "description": "The ticket type of the passenger.\n            ",
            "nullable": true
          },
          "ssrCodes": {
            "type": "array",
            "description": "The list of SSR codes associated with this passenger.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerAlternateKey": {
            "type": "string",
            "description": "The passenger's alternate key.\n            ",
            "nullable": true
          }
        }
      },
      "DeleteBookingQueueItemBaseRequest": {
        "type": "object",
        "description": "API request object used to delete a booking queue item.\n            ",
        "additionalProperties": false,
        "required": [
          "authorizedBy",
          "notes"
        ],
        "properties": {
          "authorizedBy": {
            "type": "string",
            "description": "Information about who authorized the deletion of the booking queue item.\n            ",
            "minLength": 1
          },
          "notes": {
            "type": "string",
            "description": "Notes associated with the deletion of the booking queue item.\n            ",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password if needed for the booking queue.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfBookingQueueHistory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingQueueHistory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingQueueHistory": {
        "type": "object",
        "description": "Represents a booking queue history item.\n            ",
        "additionalProperties": false,
        "properties": {
          "alternatePassengerKey": {
            "type": "string",
            "description": "The alternate passenger key.\n            ",
            "nullable": true
          },
          "historyId": {
            "type": "integer",
            "description": "The booking queue history ID.\n            ",
            "format": "int64"
          },
          "historyEvent": {
            "description": "The booking queue history event type.\n            ",
            "$ref": "#/components/schemas/BookingQueueHistoryEvent"
          },
          "queueCode": {
            "type": "string",
            "description": "The booking queue code.\n            ",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The booking queue note.\n            ",
            "nullable": true
          },
          "dequeueNote": {
            "type": "string",
            "description": "The note associated with a dequeue action.\n            ",
            "nullable": true
          },
          "authorizedBy": {
            "type": "string",
            "description": "The booking queue authorized by field.\n            ",
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "The booking queue priority date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "queueAction": {
            "description": "The booking queue action.\n            ",
            "$ref": "#/components/schemas/QueueAction"
          },
          "domainCode": {
            "type": "string",
            "description": "The booking queue domain code.\n            ",
            "nullable": true
          },
          "createdByUserKey": {
            "type": "string",
            "description": "The key of the user that created the booking queue event.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The booking queue item created date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "queueType": {
            "description": "The booking queue item event type.\n            ",
            "$ref": "#/components/schemas/QueueEventType"
          },
          "pointOfSale": {
            "description": "The booking queue item point of sale.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PointOfSale"
          },
          "segmentKey": {
            "type": "string",
            "description": "The booking queue item segment key.\n            ",
            "nullable": true
          },
          "watchListId": {
            "type": "integer",
            "description": "The watch list ID of the booking queue entry.\n            ",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "BookingQueueHistoryEvent": {
        "type": "integer",
        "description": "The booking queue history code values represent the different events that trigger\nan entry into the booking queue history.\n            \n\n0 = Unknown\n1 = Add\n2 = Remove\n3 = Update",
        "x-enumNames": [
          "Unknown",
          "Add",
          "Remove",
          "Update"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "BookingQueueHistoryRequest": {
        "type": "object",
        "description": "The booking queue history request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "password": {
            "type": "string",
            "description": "The password needed to access the queue.  Required if queue\nis set to password-protected in Sky Manager.\n            ",
            "nullable": true
          },
          "lastPageIndex": {
            "type": "integer",
            "description": "Indicates the last item number in the history list that was returned.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 1.0,
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Used to specify the number of records to return when paging is supported.\nThis is optional.\n            ",
            "maximum": 5000.0,
            "minimum": 10.0,
            "nullable": true
          },
          "fromArchive": {
            "type": "boolean",
            "description": "Gets or sets the from archive flag needed to access the queue.\n            "
          }
        }
      },
      "MoveBookingQueueItemBase": {
        "type": "object",
        "description": "Defines a move booking queue item request\n            ",
        "additionalProperties": false,
        "required": [
          "bookingKey",
          "newQueueCode"
        ],
        "properties": {
          "bookingKey": {
            "type": "string",
            "description": "The existing booking key.\n            ",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The current password if required for the queue.\n            ",
            "maxLength": 16,
            "minLength": 0,
            "nullable": true
          },
          "newQueueCode": {
            "type": "string",
            "description": "The new booking queue the item will be moved to.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "newQueuePassword": {
            "type": "string",
            "description": "The password if required for the new queue.\n            ",
            "maxLength": 16,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfMessageBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageBase"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "MessageBase": {
        "type": "object",
        "description": "The message base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "The message type code of the message queue.\n            ",
            "nullable": true
          },
          "information": {
            "type": "string",
            "description": "The reason why the message was added to the database.\n            ",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "The body of the message.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfMessageBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MessageBase"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SearchType": {
        "type": "integer",
        "description": "Enumeration of possible ways to do a search inquiry.\n            \n\n0 = StartsWith\n1 = EndsWith\n2 = Contains\n3 = ExactMatch",
        "x-enumNames": [
          "StartsWith",
          "EndsWith",
          "Contains",
          "ExactMatch"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "GenericTeletypeMessageRequest": {
        "type": "object",
        "description": "Defines the send generic teletype message request.\n            ",
        "additionalProperties": false,
        "required": [
          "fromAddress",
          "toAddress",
          "body"
        ],
        "properties": {
          "fromAddress": {
            "type": "string",
            "description": "The address of the message sender.\n            ",
            "maxLength": 8,
            "minLength": 7
          },
          "toAddress": {
            "type": "string",
            "description": "The address of the message recipient.\n            ",
            "maxLength": 8,
            "minLength": 7
          },
          "body": {
            "type": "string",
            "description": "The message body.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfIListOfQueueCategory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/QueueCategory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "QueueCategory": {
        "type": "object",
        "description": "The Queue Category model.\n            ",
        "additionalProperties": false,
        "properties": {
          "queueCategoryCode": {
            "type": "string",
            "description": "The queue category code of queue category.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the queue category\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The InActive of QueueCategory.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "The Allowed Class Of Service.\n            "
          }
        }
      },
      "IJsonResponseOfQueueCategory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/QueueCategory"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfDequeueTravelSummary": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DequeueTravelSummary"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DequeueTravelSummary": {
        "type": "object",
        "description": "Represents an travel entry when dequeued.\n            ",
        "additionalProperties": false,
        "required": [
          "information"
        ],
        "properties": {
          "travelQueueKey": {
            "type": "string",
            "description": "The unique travel queue item key.\n            ",
            "nullable": true
          },
          "information": {
            "description": "Market designator.\n            ",
            "$ref": "#/components/schemas/MarketInformation"
          },
          "notes": {
            "type": "string",
            "description": "Notes.\n            ",
            "nullable": true
          },
          "priorityCode": {
            "type": "string",
            "description": "Priority code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "Priority date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "processStatus": {
            "description": "Process status.\n            ",
            "$ref": "#/components/schemas/QueueProcessStatus"
          },
          "processState": {
            "description": "Process state.\n            ",
            "$ref": "#/components/schemas/QueueProcessState"
          },
          "inProgress": {
            "type": "boolean",
            "description": "Status.\n            "
          },
          "statusReset": {
            "type": "string",
            "description": "Date status reset.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "summary": {
            "description": "Travel summary.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelSummary"
          }
        }
      },
      "QueueProcessStatus": {
        "type": "integer",
        "description": "QueueProcessStatus specifies the basis by which queue filters are created.\n            \n\n0 = Ready\n1 = Pending",
        "x-enumNames": [
          "Ready",
          "Pending"
        ],
        "enum": [
          0,
          1
        ]
      },
      "QueueProcessState": {
        "type": "integer",
        "description": "QueueProcessState specifies the basis by which queue filters are created.\n            \n\n0 = Default\n1 = SegmentsConfirmed\n2 = BookingBalanced\n4 = Other\n7 = Complete",
        "x-enumNames": [
          "Default",
          "SegmentsConfirmed",
          "BookingBalanced",
          "Other",
          "Complete"
        ],
        "enum": [
          0,
          1,
          2,
          4,
          7
        ]
      },
      "TravelQueueItemRequest": {
        "type": "object",
        "description": "API request object used to enqueue a new travel queue item.\n            ",
        "additionalProperties": false,
        "required": [
          "item",
          "queue"
        ],
        "properties": {
          "item": {
            "description": "Flight queue item to enqueue on the matching flight queues.\n            ",
            "$ref": "#/components/schemas/TravelQueueItemBase"
          },
          "queue": {
            "description": "Queue information about this item.\n            ",
            "$ref": "#/components/schemas/TravelQueueRequest"
          },
          "queueEventCode": {
            "type": "string",
            "description": "Queue event code used for matching flight queues.\n            ",
            "nullable": true
          },
          "timeEventCode": {
            "type": "string",
            "description": "Time event code used for matching flight queues.\n            ",
            "nullable": true
          }
        }
      },
      "TravelQueueItemBase": {
        "type": "object",
        "description": "Model representing the travel queue item without a unique key.\n            ",
        "additionalProperties": false,
        "required": [
          "information"
        ],
        "properties": {
          "processStatus": {
            "description": "Process status.\n            ",
            "$ref": "#/components/schemas/QueueProcessStatus"
          },
          "processState": {
            "description": "Process state.\n            ",
            "$ref": "#/components/schemas/QueueProcessState"
          },
          "inProgress": {
            "type": "boolean",
            "description": "Status.\n            "
          },
          "statusReset": {
            "type": "string",
            "description": "Date status reset.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "information": {
            "description": "Market designator.\n            ",
            "$ref": "#/components/schemas/MarketInformation"
          },
          "notes": {
            "type": "string",
            "description": "Notes.\n            ",
            "nullable": true
          },
          "priorityCode": {
            "type": "string",
            "description": "Priority code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "priorityDate": {
            "type": "string",
            "description": "Priority date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TravelQueueRequest": {
        "type": "object",
        "description": "Defines a travel queue query.\n            ",
        "additionalProperties": false,
        "required": [
          "travelQueueCode"
        ],
        "properties": {
          "travelQueueCode": {
            "type": "string",
            "description": "The required queue code.\n            ",
            "minLength": 1
          },
          "subQueueCode": {
            "type": "string",
            "description": "The optional sub queue code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfQueueResults": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/QueueResults"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "QueueResults": {
        "type": "object",
        "description": "Base class for all queue model objects\n            ",
        "additionalProperties": false,
        "properties": {
          "queues": {
            "type": "array",
            "description": "Queues.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Queue"
            }
          },
          "totalCount": {
            "type": "integer",
            "description": "The total available count.\n            ",
            "format": "int32"
          },
          "lastPageIndex": {
            "type": "integer",
            "description": "Last page index used for paging.\n            ",
            "format": "int64"
          }
        }
      },
      "Queue": {
        "type": "object",
        "description": "Base class for all queue model objects.\n            ",
        "additionalProperties": false,
        "properties": {
          "queueCode": {
            "type": "string",
            "description": "Queue code.\n            ",
            "nullable": true
          },
          "subQueueCode": {
            "type": "string",
            "description": "Sub-queue code.\n            ",
            "nullable": true
          },
          "queueCategoryCode": {
            "type": "string",
            "description": "Queue category used by routing logic.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "name": {
            "type": "string",
            "description": "Queue name.\n            ",
            "nullable": true
          },
          "totalBookings": {
            "type": "integer",
            "description": "The number of bookings on the queue.\n            ",
            "format": "int64"
          },
          "restriction": {
            "description": "The booking queue restriction.\n            ",
            "$ref": "#/components/schemas/BookingQueueRestriction"
          },
          "hasPassword": {
            "type": "boolean",
            "description": "Indicates if the queue has a password.\n            "
          },
          "status": {
            "description": "Status of the queue.\n            ",
            "$ref": "#/components/schemas/BookingQueueStatus"
          }
        }
      },
      "BookingQueueStatus": {
        "type": "integer",
        "description": "Defines the status for booking queues.\n            \n\n0 = Open\n1 = Locked\n2 = Internal",
        "x-enumNames": [
          "Open",
          "Locked",
          "Internal"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfBookingQueueItemBase": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingQueueItemBase"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingQueueItemBase": {
        "type": "object",
        "description": "Defines a Booking Queue item.\n            ",
        "additionalProperties": false,
        "properties": {
          "processStatus": {
            "description": "Process status.\n            ",
            "$ref": "#/components/schemas/QueueProcessStatus"
          },
          "processState": {
            "description": "Process state.\n            ",
            "$ref": "#/components/schemas/QueueProcessState"
          },
          "inProgress": {
            "type": "boolean",
            "description": "Status.\n            "
          },
          "statusReset": {
            "type": "string",
            "description": "Date status reset.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "bookingQueueItemKey": {
            "type": "string",
            "description": "The booking queue item key.\n            ",
            "nullable": true
          },
          "segmentKey": {
            "type": "string",
            "description": "The segment key of the flight associated with the booking queue entry.\n            ",
            "nullable": true
          },
          "watchListId": {
            "type": "integer",
            "description": "The WatchList Id of the booking queue entry.\n            ",
            "format": "int64",
            "nullable": true
          },
          "passengerId": {
            "type": "integer",
            "description": "Passenger Id if associated to a passenger.\n            ",
            "format": "int64",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "Domain code of the booking queue entry.\n            ",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Free-form note field of the booking queue entry.\n            ",
            "nullable": true
          },
          "passengerName": {
            "description": "Passenger name of the booking queue entry.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "priorityDate": {
            "type": "string",
            "description": "Priority date of the booking queue entry.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "eventType": {
            "description": "The booking queue event type that caused the booking queue entry to be created.\n            ",
            "$ref": "#/components/schemas/QueueEventType"
          },
          "restriction": {
            "description": "The restrictions associated with the booking queue.\n            ",
            "$ref": "#/components/schemas/BookingQueueRestriction"
          },
          "recordLocator": {
            "type": "string",
            "description": "The booking record locator associated with the booking queue entry.\n            ",
            "nullable": true
          }
        }
      },
      "BookingQueueReleaseRequest": {
        "type": "object",
        "description": "Defines a booking queue query\n            ",
        "additionalProperties": false,
        "properties": {
          "queuePassword": {
            "type": "string",
            "description": "The password for the queue if required.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfMessagesSearchResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessagesSearchResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "MessagesSearchResponse": {
        "type": "object",
        "description": "The paged message response.\n            ",
        "additionalProperties": false,
        "properties": {
          "messageQueueCount": {
            "type": "integer",
            "description": "The total number of messages in the queue.\n            ",
            "format": "int32"
          },
          "lastPageKey": {
            "type": "string",
            "description": "The last index of the paged response.\n            ",
            "nullable": true
          },
          "teletypeMessages": {
            "type": "array",
            "description": "The collection of messages in the queue.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MessageResponsev2"
            }
          }
        }
      },
      "MessageResponsev2": {
        "type": "object",
        "description": "The teletype message response.\n            ",
        "additionalProperties": false,
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "The message type code of the message queue.\n            ",
            "nullable": true
          },
          "information": {
            "type": "string",
            "description": "The reason why the message was added to the database.\n            ",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "The body of the message.\n            ",
            "nullable": true
          },
          "messageKey": {
            "type": "string",
            "description": "The unique message key.\n            ",
            "nullable": true
          },
          "fromAddress": {
            "description": "The address of the message sender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageAddress"
          },
          "toAddress": {
            "description": "The address of the message recipient.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageAddress"
          },
          "createdDate": {
            "type": "string",
            "description": "The date in which the message was created.\n            ",
            "format": "date-time"
          }
        }
      },
      "MessageAddress": {
        "type": "object",
        "description": "Defines the message address.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrier": {
            "type": "string",
            "description": "The carrier segment of the address.\n            ",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city segment of the address.\n            ",
            "nullable": true
          },
          "office": {
            "type": "string",
            "description": "The office segment of the address.\n            ",
            "nullable": true
          }
        }
      },
      "MessageQueueHiddenOptions": {
        "type": "integer",
        "description": "Represents values for message queue record filter.\n            \n\n0 = NonHiddenRecords\n1 = HiddenRecords\n2 = All",
        "x-enumNames": [
          "NonHiddenRecords",
          "HiddenRecords",
          "All"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIListOfCarrier": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Carrier"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Carrier": {
        "type": "object",
        "description": "The carrier model.\n            ",
        "additionalProperties": false,
        "required": [
          "carrierCode",
          "carrierInfo",
          "carrierName",
          "carrierShortName",
          "phone",
          "url"
        ],
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The carrier code for this carrier.\n            ",
            "maxLength": 3,
            "minLength": 2
          },
          "carrierInfo": {
            "type": "string",
            "description": "The carrier info for this carrier.\n            ",
            "maxLength": 60,
            "minLength": 0
          },
          "carrierName": {
            "type": "string",
            "description": "The carrier name for this carrier.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "carrierShortName": {
            "type": "string",
            "description": "The carrier short name for this carrier.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "carrierType": {
            "type": "string",
            "description": "The carrier type for this carrier.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "eTicketIndicator": {
            "type": "boolean",
            "description": "The e ticket indicator for this carrier.\n            "
          },
          "inventoryIndicator": {
            "type": "boolean",
            "description": "The inventory indicator for this carrier\n            "
          },
          "phone": {
            "type": "string",
            "description": "The phone number for this carrier.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "url": {
            "type": "string",
            "description": "The Url for this carrier.\n            ",
            "maxLength": 2048,
            "minLength": 0
          },
          "baggageIndicator": {
            "type": "string",
            "description": "The baggage indicator for this carrier.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "nullable": true
          },
          "iataAccountingCode": {
            "type": "string",
            "description": "The numerical IATA accounting code for this carrier.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfCarrier": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Carrier"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfResourceContentItem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ResourceContentItem"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ResourceContentItem": {
        "type": "object",
        "description": "Model representing a resource content item.\n            ",
        "additionalProperties": false,
        "required": [
          "contentId"
        ],
        "properties": {
          "contentId": {
            "type": "integer",
            "description": "The content id.\n            ",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the content\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the content.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "Culture code of the data.\n            ",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "description": "Size in bytes of the data.\n            ",
            "format": "int64"
          },
          "type": {
            "description": "Specific content type.\n            ",
            "$ref": "#/components/schemas/ContentType"
          },
          "dataType": {
            "description": "Content data type.\n            ",
            "$ref": "#/components/schemas/ContentDataType"
          },
          "data": {
            "type": "string",
            "description": "Data bytes.\n            ",
            "format": "byte",
            "nullable": true
          }
        }
      },
      "ContentType": {
        "type": "integer",
        "description": "Content Type enumeration.\n            \n\n0 = GeneralReference\n1 = News\n2 = ConsoleHelp\n3 = FareRuleReference\n4 = ReviewWithCustomer\n8 = Image\n9 = PromotionReference\n10 = SubscriptionReference",
        "x-enumNames": [
          "GeneralReference",
          "News",
          "ConsoleHelp",
          "FareRuleReference",
          "ReviewWithCustomer",
          "Image",
          "PromotionReference",
          "SubscriptionReference"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          9,
          10
        ]
      },
      "IJsonResponseOfIEnumerableOfResourceContentResult": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ResourceContentResult"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ResourceContentResult": {
        "type": "object",
        "description": "Model representing a resource content item.\n            ",
        "additionalProperties": false,
        "required": [
          "contentId"
        ],
        "properties": {
          "contentId": {
            "type": "integer",
            "description": "The content id.\n            ",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the content\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the content.\n            ",
            "nullable": true
          },
          "type": {
            "description": "Specific content type.\n            ",
            "$ref": "#/components/schemas/ContentType"
          },
          "cultureCode": {
            "type": "string",
            "description": "Culture code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfCulture": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Culture"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Culture": {
        "type": "object",
        "description": "Defines a culture code.\n            ",
        "additionalProperties": false,
        "required": [
          "cultureCode"
        ],
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The unique code for the culture.\n            ",
            "maxLength": 17,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The display name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the resource is inactive.\n            "
          }
        }
      },
      "IJsonResponseOfCulture": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Culture"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfEnumResource": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EnumResource"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EnumResource": {
        "type": "object",
        "description": "Provide localization information about an enumeration.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "The unique property code.\n            "
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfOperationsSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OperationsSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OperationsSettings": {
        "type": "object",
        "description": "The operations settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "overrideOverWingExitRowRequirement": {
            "type": "boolean",
            "description": "The role setting to allow/disallow overriding overwing exit row requirement.\n            "
          },
          "iropFromDepartureDateOffset": {
            "type": "string",
            "description": "Indicates the number of days prior to the current date a flight can depart and still\nhave passengers moved under IROP by those with a particular role.\n            ",
            "format": "duration"
          },
          "allowDiversionIrop": {
            "type": "boolean",
            "description": "In order to access the diversion functionality in IROP, agent must be\nassigned this permission.\n            "
          },
          "allowConsoleIrop": {
            "type": "boolean",
            "description": "Allows users with this role access to access IROP utility through the Console.\n            "
          },
          "allowCreateAdHocConnectionsInIrop": {
            "type": "boolean",
            "description": "Select to enable users with this role to create ad hoc connections through the IROP\nutility. If an agent does not have this permission, they are only able to choose 'r;To Flight'\nconnection options if they are already available in the Flight schedule.\n            "
          },
          "allowIropOversellOnToFlight": {
            "type": "boolean",
            "description": "Whether an IROP oversell is allowed or not.\n            "
          }
        }
      },
      "IJsonResponseOfPrinter": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Printer"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Printer": {
        "type": "object",
        "description": "Represents a printer.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The printer code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The printer name.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPrinter": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Printer"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfRole": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Role": {
        "type": "object",
        "description": "Represents information about a role.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use Rolev2 instead.",
        "additionalProperties": false,
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The role's name.\n            ",
            "nullable": true
          },
          "parentRoleCode": {
            "type": "string",
            "description": "Gets or sets the parent role code for this role.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "roleSettings": {
            "type": "array",
            "description": "Gets or sets a list of role settings for this role.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RoleSetting"
            }
          },
          "allowed": {
            "type": "boolean",
            "description": "Gets or sets a flag describing whether this role is allowed or not.\n            "
          }
        }
      },
      "RoleSetting": {
        "type": "object",
        "description": "The role settings model.\n            ",
        "additionalProperties": false,
        "properties": {
          "dataVersion": {
            "type": "integer",
            "description": "The number version of the data associated with this setting.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "settingData": {
            "type": "string",
            "description": "The setting data for this setting.\n            ",
            "maxLength": 1073741823,
            "minLength": 0,
            "nullable": true
          },
          "roleSettingType": {
            "description": "The setting type for this setting.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RoleSettingType"
          }
        }
      },
      "RoleSettingType": {
        "type": "object",
        "description": "The role settings type model.\n            ",
        "additionalProperties": false,
        "required": [
          "roleSettingTypeCode"
        ],
        "properties": {
          "roleSettingTypeCode": {
            "type": "string",
            "description": "The code for the role setting type.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name for the role setting type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for this setting type.\n            "
          }
        }
      },
      "IJsonResponseOfRole": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Role"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfListOfRoleSettingv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RoleSettingv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "RoleSettingv2": {
        "type": "object",
        "description": "The role settings model.\n            ",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The code for the role setting type.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name for the role setting type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "CreateRoleRequest": {
        "type": "object",
        "description": "Create role request.\n            ",
        "additionalProperties": false,
        "required": [
          "roleCode",
          "name",
          "parentRoleCode"
        ],
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "maxLength": 4,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The role's name.\n            ",
            "minLength": 1
          },
          "parentRoleCode": {
            "type": "string",
            "description": "Gets or sets the parent role code for this role.\n            ",
            "maxLength": 4,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfSeatPropertyType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SeatPropertyType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SeatPropertyType": {
        "type": "object",
        "description": "Represents a seat property type used to represent properties of seats in an equipment configuration.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "Seat property type code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the seat property type.\n            ",
            "nullable": true
          },
          "kind": {
            "description": "The value type that the seat property represents.\n            ",
            "$ref": "#/components/schemas/SeatPropertyTypeKind"
          },
          "values": {
            "type": "array",
            "description": "The list of possible values that could represent a seat property.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatPropertyValue"
            }
          },
          "isSearchable": {
            "type": "boolean",
            "description": "Indicates when the seat property type is included in a list of searchable properties in the seat assignment\nalgorithm.\n            "
          }
        }
      },
      "SeatPropertyTypeKind": {
        "type": "integer",
        "description": "Seat property type kind enumeration.\n            \n\n0 = None\n1 = Boolean\n2 = Numeric\n3 = List\n4 = String\n5 = SsrPermission",
        "x-enumNames": [
          "None",
          "Boolean",
          "Numeric",
          "List",
          "String",
          "SsrPermission"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "SeatPropertyValue": {
        "type": "object",
        "description": "Represents a possible value of a seat property type.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "Seat property value code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of a seat property value.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfSeatPropertyType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatPropertyType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfResourceCategoryItem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ResourceCategoryItem"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ResourceCategoryItem": {
        "type": "object",
        "description": "Model representing a resource setting category item.\n            ",
        "additionalProperties": false,
        "required": [
          "resourceCategoryItemId",
          "resourceCategoryItemTypeCode",
          "name",
          "resourceCategoryId"
        ],
        "properties": {
          "contentType": {
            "description": "The default content type.\n            ",
            "$ref": "#/components/schemas/ResponseContentType"
          },
          "resourceCategoryItemId": {
            "type": "integer",
            "description": "The resource id.\n            ",
            "format": "int64"
          },
          "resourceCategoryItemTypeCode": {
            "type": "string",
            "description": "The resource type code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "resourceCategoryId": {
            "type": "integer",
            "description": "The resource category id.\n            ",
            "format": "int64"
          },
          "cannotDelete": {
            "type": "boolean",
            "description": "The delete permissions.\n            "
          },
          "data": {
            "type": "string",
            "description": "The resource data.\n            ",
            "maxLength": 1073741823,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ResponseContentType": {
        "type": "integer",
        "description": "Defines the content data type enumeration.\n            \n\n0 = Unknown\n1 = Json\n2 = Xml",
        "x-enumNames": [
          "Unknown",
          "Json",
          "Xml"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "SettingsCategoryRequest": {
        "type": "object",
        "description": "Model representing a settings category request.\n            ",
        "additionalProperties": false,
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the setting. Example: Web\\dotREZ\\MarketFilterSettings.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfIListOfRolev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Rolev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Rolev2": {
        "type": "object",
        "description": "Represents information about a role.\n            ",
        "additionalProperties": false,
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The role's name.\n            ",
            "nullable": true
          },
          "parentRoleCode": {
            "type": "string",
            "description": "Gets or sets the parent role code for this role.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfRolev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Rolev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPremiumServicesSettingsv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PremiumServicesSettingsv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PremiumServicesSettingsv2": {
        "type": "object",
        "description": "Settings for the premium services.\n            ",
        "additionalProperties": false,
        "properties": {
          "accessToExternalBaggageSystems": {
            "type": "boolean",
            "description": "The value to indicate if access to external baggage\nsystems is enabled.\n            "
          },
          "advancedParentChildTravelAgencyManagement": {
            "type": "boolean",
            "description": "The value to indicate if advanced parent child travel agency\nmanagment is enabled.\n            "
          },
          "baggageSelfTagging": {
            "type": "boolean",
            "description": "The value to indicate if baggage self tagging is enabled.\n            "
          },
          "loyaltyCustomerAccountView": {
            "type": "boolean",
            "description": "The value to indicate if the loyalty customer account view is enabled.\n            "
          },
          "pricingOptimizationServices": {
            "type": "boolean",
            "description": "The value to indicate if pricing optimization services are enabled.\n            "
          },
          "secureFlight": {
            "type": "boolean",
            "description": "The value to indicate if secure flight is enabled.\n            "
          },
          "allInclusivePricingDisplay": {
            "type": "boolean",
            "description": "The value to indicate if all inclusive pricing display is enabled.\n            "
          },
          "numericAddressVerificationService": {
            "type": "boolean",
            "description": "The value to indicate if the numeric address verification service\nis enabled.\n            "
          },
          "koreanInteractiveAdvancePassengerProcessing": {
            "type": "boolean",
            "description": "The value to indicate if interactive advance passenger processing\nis enabled for the Korean government.\n            "
          },
          "taiwanInteractiveAdvancePassengerProcessing": {
            "type": "boolean",
            "description": "The value to indicate if interactive advance passenger processing\nis enabled for the National Immigration Agency (NIA) of Taiwan.\n            "
          },
          "canadaInteractiveAdvancePassengerProcessing": {
            "type": "boolean",
            "description": "The value to indicate if interactive advance passenger processing\nis enabled for the Canada Border Services Agency (CBSA).\n            "
          },
          "attributeShopping": {
            "type": "boolean",
            "description": "The value to indicate if attribute shopping is enabled.\n            "
          },
          "documentCheckConfiguration": {
            "type": "boolean",
            "description": "The value to indicate if document check configuration is enabled.\n            "
          },
          "transmitFareDataToAirlineTariffPublishingCompany": {
            "type": "boolean",
            "description": "The value to indicate if the transmission of fares data to the\nairline tariff publishing company feature is enabled.\n            "
          },
          "travelNotifications": {
            "type": "boolean",
            "description": "The value to indicate if travel notifications are enabled.\n            "
          },
          "bundles": {
            "type": "boolean",
            "description": "The value to indicate if service bundles are enabled.\n            "
          },
          "governmentDataProtectionRequirements": {
            "type": "boolean",
            "description": "The value to indicate if the government data protection requirements\nare enabled.\n            "
          },
          "unitedKingdomInteractiveAdvancePassengerProcessing": {
            "type": "boolean",
            "description": "The value to indicate if interactive advance passenger processing\nis enabled for the United Kingdom.\n            "
          },
          "doNotPersistCreditCardNumbers": {
            "type": "boolean",
            "description": "The value to indicate if credit card numbers should not be persisted.\n            "
          }
        }
      },
      "IJsonResponseOfSkySpeedSettingsv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SkySpeedSettingsv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SkySpeedSettingsv2": {
        "type": "object",
        "description": "Settings for Sky Speed.\n            ",
        "additionalProperties": false,
        "properties": {
          "manifestViewDate": {
            "description": "The value to indicate what type of date to display in the SkySpeed manifest view.\n            ",
            "$ref": "#/components/schemas/ManifestViewDateType"
          },
          "maximumNumberOfTtyMessagesPerBatchForDeletion": {
            "type": "integer",
            "description": "The value to indicate the maximum number of TTY messages\nper batch for deletion.\n            ",
            "format": "int32"
          },
          "postalCodeLookup": {
            "description": "The value to indicate the manner in which postal codes will be looked up\nin SkySpeed.\n            ",
            "$ref": "#/components/schemas/PostalCodeLookupType"
          },
          "serviceServerName": {
            "type": "integer",
            "description": "The value to indicate the server name of the primary service.\n            ",
            "format": "int32"
          },
          "disableBaseCurrency": {
            "type": "boolean",
            "description": "Disables base currency when searching flights.\n            "
          },
          "disableOutboundTime": {
            "type": "boolean",
            "description": "Disables outbound time when searching flights.\n            "
          },
          "excludeOutboundTimeTab": {
            "type": "boolean",
            "description": "Excludes the outbound time from tab order.\n            "
          },
          "disableReturnTime": {
            "type": "boolean",
            "description": "Disables return time when searching flights.\n            "
          },
          "excludeReturnTimeTab": {
            "type": "boolean",
            "description": "Excludes return time from tab order.\n            "
          },
          "enableShowValidFaresCheckbox": {
            "type": "boolean",
            "description": "Enable check box to 'Show Only Fares Valid for Given Number of Passengers'.\n            "
          },
          "fareBasisInRegularBooking": {
            "type": "integer",
            "description": "Indicates fare basis significance in regular booking mode.\n            ",
            "format": "int32"
          },
          "fareBasisInOverbook": {
            "type": "integer",
            "description": "Indicates fare basis significance in overbook mode.\n            ",
            "format": "int32"
          },
          "displayReservedFlights": {
            "type": "boolean",
            "description": "Display the reserved flights dialog after reserving a flight.\n            "
          },
          "displaySsrNestValues": {
            "type": "boolean",
            "description": "Display the SSR nest values.\n            "
          },
          "defaultFocusToCustomerIdField": {
            "type": "boolean",
            "description": "Set cursor to customer id field in add name dialog.\n            "
          },
          "allowDeleteComments": {
            "type": "boolean",
            "description": "Allow comments to be deleted.\n            "
          },
          "promptCreateInternetUserId": {
            "type": "boolean",
            "description": "Prompt to create SkySales user id after creating customer account.\n            "
          },
          "allowManagePasswordForCustomerAccount": {
            "type": "boolean",
            "description": "Allow password management for customer accounts.\n            "
          },
          "viewFareQuote": {
            "type": "boolean",
            "description": "View fare quote dialog.\n            "
          },
          "allowNonCarrierOrgToUseOtherAgency": {
            "type": "boolean",
            "description": "Allow non carrier org to use other agency.\n            "
          },
          "viewTeletypeProcessing": {
            "type": "boolean",
            "description": "View teletype processing dialog.\n            "
          },
          "viewGdsHistoryDialog": {
            "type": "boolean",
            "description": "View GDS history dialog.\n            "
          },
          "returnDateDefaultToOutboundDate": {
            "type": "boolean",
            "description": "Return date default to outbound date.\n            "
          },
          "displayFyiNotesOnLogin": {
            "type": "boolean",
            "description": "Display FYI notes on login.\n            "
          },
          "displayResidentCountry": {
            "type": "boolean",
            "description": "Display resident country control.\n            "
          },
          "displayPricesByPassengerType": {
            "type": "array",
            "description": "Display prices by passenger type (Restrict or Allow).\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "defaultToCustomerCreditCard": {
            "type": "boolean",
            "description": "Default payment to the first credit card of the customer.\n            "
          },
          "forceViewMandatoryComments": {
            "type": "boolean",
            "description": "Force view mandatory comments on change booking.\n            "
          },
          "showTravelDocumentsOnPassengersScreen": {
            "type": "boolean",
            "description": "Show travel document tab on the passengers screen.\n            "
          },
          "showDestinationAddressesOnPassengersScreen": {
            "type": "boolean",
            "description": "Show the destination address tab on the passengers screen.\n            "
          },
          "showFrequentFlyerNumberOnPassengersScreen": {
            "type": "boolean",
            "description": "Show the frequent flyer number tab on the passengers screen.\n            "
          },
          "showMealSsrButtonOnPassengersScreen": {
            "type": "boolean",
            "description": "Show the meal SSR button on the passengers screen.\n            "
          },
          "allowETicketing": {
            "type": "boolean",
            "description": "Allow e-ticketing.\n            "
          },
          "allowFeesToBeDeleted": {
            "type": "boolean",
            "description": "Allow fees to be deleted.\n            "
          },
          "displayReferenceNumber": {
            "type": "boolean",
            "description": "Display reference number.\n            "
          },
          "enableLoyaltyCustomerAccountView": {
            "type": "boolean",
            "description": "Enable loyalty customer account view.\n            "
          },
          "enableLoyaltyFareDisplay": {
            "type": "boolean",
            "description": "Enable loyalty fare display.\n            "
          },
          "displayETicketRecords": {
            "type": "boolean",
            "description": "Display e-ticket records.\n            "
          },
          "allowETicketCouponStatusToBeUpdated": {
            "type": "boolean",
            "description": "Allow e-ticket coupon status to be updated.\n            "
          },
          "enableRepriceButtonOnReservedFlightsScreen": {
            "type": "boolean",
            "description": "Enable reprice button on the reserved flights screen.\n            "
          },
          "enableSplitCancelButtonOnReservedFlightsScreen": {
            "type": "boolean",
            "description": "Enable reprice button on the reserved flights screen.\n            "
          },
          "allowTravelNotificationsAccess": {
            "type": "boolean",
            "description": "Allow access to traveler notification dialogs.\n            "
          },
          "allowThemeEditorAccess": {
            "type": "boolean",
            "description": "Allow theme editor access.\n            "
          },
          "allowBlacklistAccessAndRetrieveReservationsFromPayments": {
            "type": "boolean",
            "description": "Allow access to blacklist and retrieve reservations from the payment's window.\n            "
          },
          "maskBookingContactInformation": {
            "type": "boolean",
            "description": "Mask booking contact information.\n            "
          },
          "accessToFlightsWithTrafficRestrictions": {
            "type": "boolean",
            "description": "Access to flights with traffic restrictions.\n            "
          },
          "enabledTicketCodes": {
            "type": "array",
            "description": "List of enabled ticket codes. Note: these are only the ticket codes that are marked\nas true to display the ticket code details. Ticket codes that are marked false will\nnot be included in this list.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "reservationComments": {
            "type": "array",
            "description": "Pre-defined reservation comments.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "itineraryComments": {
            "type": "array",
            "description": "Pre-defined itinerary comments.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "manifestComments": {
            "type": "array",
            "description": "Pre-defined manifest comments.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "enableDeletePassengerButton": {
            "type": "boolean",
            "description": "Enable delete button on passenger screen.\n            "
          }
        }
      },
      "ManifestViewDateType": {
        "type": "integer",
        "description": "This enumeration represents the manifest view date type.\n            \n\n0 = BookingDate\n1 = SoldDate",
        "x-enumNames": [
          "BookingDate",
          "SoldDate"
        ],
        "enum": [
          0,
          1
        ]
      },
      "PostalCodeLookupType": {
        "type": "integer",
        "description": "This enumeration represents the postal code lookup type.\n            \n\n0 = None\n1 = UsZipCode",
        "x-enumNames": [
          "None",
          "UsZipCode"
        ],
        "enum": [
          0,
          1
        ]
      },
      "IJsonResponseOfSessionSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SessionSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SessionSettings": {
        "type": "object",
        "description": "The session settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "sessionTimeOutInterval": {
            "type": "string",
            "description": "The timeout interval for the session.\n            ",
            "format": "duration",
            "nullable": true
          },
          "allowApiChannelLogon": {
            "type": "boolean",
            "description": "The flag for allowing the API channel logon.\n            "
          },
          "allowDirectChannelLogon": {
            "type": "boolean",
            "description": "The flag for allowing the Direct channel logon.\n            "
          },
          "allowGdsChannelLogon": {
            "type": "boolean",
            "description": "The flag for allowing the GDS channel logon.\n            "
          },
          "allowWebChannelLogon": {
            "type": "boolean",
            "description": "The flag for allowing the Web channel logon.\n            "
          }
        }
      },
      "IJsonResponseOfLogonSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LogonSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "LogonSettings": {
        "type": "object",
        "description": "The logon settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowConsoleReservations": {
            "type": "boolean",
            "description": "A flag that allows logon for the connected Console application.\n            "
          },
          "allowDepartureControlSystem": {
            "type": "boolean",
            "description": "A flag that allows logon through the Departure Control System.\n            "
          },
          "allowWebReporting": {
            "type": "boolean",
            "description": "A flag that allows logon for the connected web reporting application.\n            "
          },
          "allowWebReservations": {
            "type": "boolean",
            "description": "A flag that allows logon for the connected web reservations application.\n            "
          },
          "allowWebServicesApi": {
            "type": "boolean",
            "description": "A flag that allows logon for the connected web services API.\n            "
          },
          "allowExternalSystemServices": {
            "type": "boolean",
            "description": "A flag that allows logon for the connected web services through an External System Communication.\n            "
          },
          "allowWindowsFareManager": {
            "type": "boolean",
            "description": "A flag that allows logon for the Fare Manager application.\n            "
          },
          "allowWindowsManager": {
            "type": "boolean",
            "description": "A flag that allows logon for the Manager application.\n            "
          },
          "allowWindowsReservations": {
            "type": "boolean",
            "description": "A flag that allows login for the Reservations application.\n            "
          },
          "allowWindowsScheduleManager": {
            "type": "boolean",
            "description": "A flag that allows login for the Schedule Manager application.\n            "
          },
          "impersonationRoles": {
            "type": "array",
            "description": "A list of acceptable impersonation roles for this role.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "overrideSystemAccessRestriction": {
            "type": "boolean",
            "description": "A flag that allows overriding the system access restrictions.\n            "
          },
          "allowDotRezCenter": {
            "type": "boolean",
            "description": "A flag that indicates whether log-ons to dotREZ Center are allowed.\n            "
          }
        }
      },
      "IJsonResponseOfCodesSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CodesSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CodesSettings": {
        "type": "object",
        "description": "The codes settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowedPaymentMethodsForFraudPrevention": {
            "type": "object",
            "description": "A dictionary that map payment method codes to a boolean representing whether it is allowed for fraud\nprevention.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "automaticMoveNestOverbookClasses": {
            "type": "array",
            "description": "A list of classes that automatically move or nest on overbook.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "editableRuleTypes": {
            "type": "array",
            "description": "A list of editable rule types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "externalPaymentValidationOverrides": {
            "type": "object",
            "description": "A list of external payment codes that allow validation overrides.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "overrideFeeTypes": {
            "type": "array",
            "description": "A list of fee types that allow overrides. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee',\n'SsrFee', 'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee',\n'ConvenienceFee', 'BaggageFee', 'FareSurcharge', 'PromotionDiscount']\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeType"
            }
          },
          "paymentFieldOverrides": {
            "type": "object",
            "description": "A dictionary that map payment codes with a dictionary mapping payment fields to their requirement\nrules.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/RequiredType"
              }
            }
          },
          "privateTravelQueueCategory": {
            "description": "The permissions allowed on the private travel queue category for this role.\n            ",
            "$ref": "#/components/schemas/QueueCategoriesAccessControl"
          },
          "publicTravelQueueCategory": {
            "description": "The permissions allowed on the public travel queue category for this role.\n            ",
            "$ref": "#/components/schemas/QueueCategoriesAccessControl"
          },
          "refundablePaymentMethodCodes": {
            "type": "array",
            "description": "A list of payment codes that allow refunds.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "spoilFeeTypes": {
            "type": "array",
            "description": "A list of fee types that are Spoilage Fees. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee',\n'SsrFee', 'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee',\n'ConvenienceFee', 'BaggageFee', 'FareSurcharge', 'PromotionDiscount']\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeType"
            }
          },
          "classOfServices": {
            "type": "array",
            "description": "A list of allowed classes of service.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "depositPaymentTypes": {
            "type": "array",
            "description": "A list of allowed payment codes that are deposit payment types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "fareTypes": {
            "type": "array",
            "description": "A list of allowed fare types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerDiscountCodes": {
            "type": "array",
            "description": "A list of allowed passenger discount codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "passengerTypeCodes": {
            "type": "array",
            "description": "A list of allowed passenger types.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "paymentMethodCodes": {
            "type": "array",
            "description": "A list of allowed payment method codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "penaltyFeeCodes": {
            "type": "array",
            "description": "A list of penalty fee codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "productClasses": {
            "type": "array",
            "description": "A list of allowed product classes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "queueCategoryCodes": {
            "type": "object",
            "description": "A dictionary that maps queue category codes.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "sellSsrCodes": {
            "type": "array",
            "description": "The allowed sell SSR Codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "serviceFeeCodes": {
            "type": "array",
            "description": "The allowed service fee codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "standbyClassOfServiceCodes": {
            "type": "array",
            "description": "The class of services that are allowed standby.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "stationCategories": {
            "type": "array",
            "description": "The allowed station categories.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "viewableSeatProperties": {
            "type": "array",
            "description": "The list viewable seat properties.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "waiveFeeTypes": {
            "type": "array",
            "description": "The fee types that allow waiving. = ['All', 'Tax', 'TravelFee', 'ServiceFee', 'PaymentFee', 'PenaltyFee', 'SsrFee',\n'NonFlightServiceFee', 'UpgradeFee', 'SeatFee', 'BaseFare', 'SpoilageFee', 'NameChangeFee', 'ConvenienceFee',\n'BaggageFee', 'FareSurcharge', 'PromotionDiscount']\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FeeType"
            }
          }
        }
      },
      "QueueCategoriesAccessControl": {
        "type": "integer",
        "description": "This enumeration represents the permission levels for managing queue categories.\n            \n\n0 = None\n1 = View\n2 = All",
        "x-enumNames": [
          "None",
          "View",
          "All"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfItinerarySettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ItinerarySettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ItinerarySettings": {
        "type": "object",
        "description": "Settings for the premium services.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowDivideEmailUpdate": {
            "type": "boolean",
            "description": "Indicates if the user is allowed to specify/update the contact email of both the original\nand the new bookings during the divide process.\n            "
          },
          "sendItineraryOnHeldBookings": {
            "type": "boolean",
            "description": "Indicates if an itinerary notification will be sent for a booking with a hold.\n            "
          },
          "sendItineraryOnHeldCancelledBookings": {
            "type": "boolean",
            "description": "Indicates if an itinerary notification will be sent for a held-cancelled booking.\n            "
          },
          "sendItineraryOnPartiallyPaidBookings": {
            "type": "boolean",
            "description": "Indicates if an itinerary notification will be sent for a partially paid booking.\n            "
          }
        }
      },
      "IJsonResponseOfOrganizationSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationSettings": {
        "type": "object",
        "description": "Settings for the organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "companyTimeZone": {
            "type": "string",
            "description": "The time zone that the airline headquarters is located in.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfExternalMessageControls": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalMessageControls"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ExternalMessageControls": {
        "type": "object",
        "description": "Settings for external messaging.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCodes": {
            "type": "array",
            "description": "List of carrier codes from the e-ticket database.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfTravelerNotificationSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelerNotificationSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelerNotificationSettings": {
        "type": "object",
        "description": "Settings for traveler notification.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowBookingLevelRequest": {
            "type": "boolean",
            "description": "Indicates if the booking-level setting on notification delivery methods is enabled.\nIf enabled, the passengers can request notifications (via email or SMS) without having a New Skies customer\nprofile.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfAccountTransactionCode": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AccountTransactionCode"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AccountTransactionCode": {
        "type": "object",
        "description": "The account transaction code model.\n            ",
        "additionalProperties": false,
        "required": [
          "transactionCode"
        ],
        "properties": {
          "transactionCode": {
            "type": "string",
            "description": "The unique transaction code.\n            ",
            "maxLength": 6,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "expirationType": {
            "description": "The expiration type.\n            ",
            "$ref": "#/components/schemas/CreditExpirationType"
          },
          "expirationDays": {
            "type": "integer",
            "description": "The expiration days.\n            "
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "In active.\n            "
          }
        }
      },
      "CreditExpirationType": {
        "type": "integer",
        "description": "Credit expiration type enumeration.\n            \n\n0 = None\n1 = FixedAtIssuance\n2 = FixedDate\n3 = FixedAtBooking",
        "x-enumNames": [
          "None",
          "FixedAtIssuance",
          "FixedDate",
          "FixedAtBooking"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfAccountTransactionCode": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AccountTransactionCode"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfAddressType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AddressType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AddressType": {
        "type": "object",
        "description": "The Address Type\n            ",
        "additionalProperties": false,
        "required": [
          "addressTypeCode"
        ],
        "properties": {
          "addressTypeCode": {
            "type": "string",
            "description": "The address type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the address type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The InActive of Address type.\n            "
          }
        }
      },
      "IJsonResponseOfAddressType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AddressType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfStation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Station"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Station": {
        "type": "object",
        "description": "Defines a station.\n            ",
        "additionalProperties": false,
        "required": [
          "stationCode"
        ],
        "properties": {
          "stationCode": {
            "type": "string",
            "description": "The station unique code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the station is inactive.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code for the station.\n            ",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full display name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "The short display name.\n            ",
            "nullable": true
          },
          "macCode": {
            "type": "string",
            "description": "The stations MAC (multiple airport code) code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The stations default currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "conversionCurrencyCode": {
            "type": "string",
            "description": "The stations configured conversion currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "class": {
            "type": "string",
            "description": "The stations configured class.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "locationDetails": {
            "description": "The stations location details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/StationLocationDetails"
          }
        }
      },
      "StationLocationDetails": {
        "type": "object",
        "description": "Defines the station location details.\n            ",
        "additionalProperties": false,
        "properties": {
          "coordinates": {
            "description": "The coordinates of the station.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Coordinate"
          },
          "zoneCode": {
            "type": "string",
            "description": "The geographical location code (i.e. North America, Europe).\n            ",
            "nullable": true
          },
          "subZoneCode": {
            "type": "string",
            "description": "The sub zone code based on the geographical location (i.e. USA, Canada).\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code the station exists in.\n            ",
            "nullable": true
          },
          "provinceStateCode": {
            "type": "string",
            "description": "The province or state the station exists in.\n            ",
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "The city the station exists in.\n            ",
            "nullable": true
          },
          "timeZoneCode": {
            "type": "string",
            "description": "The configured timezone of the station.\n            ",
            "nullable": true
          },
          "thirdPartyControlled": {
            "type": "boolean",
            "description": "The flag indicating if the station is controlled via a third party.\n            "
          },
          "customsRequiredForCrew": {
            "type": "boolean",
            "description": "The flag indicating if customs is required for crew members.\n            "
          },
          "weightType": {
            "description": "The stations configured weight units of measurement.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "IJsonResponseOfResourceEntriesOfStationDetail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ResourceEntriesOfStationDetail"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ResourceEntriesOfStationDetail": {
        "type": "object",
        "description": "Model representing the resource entries.\n            ",
        "additionalProperties": false,
        "properties": {
          "values": {
            "type": "array",
            "description": "The value.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StationDetail"
            }
          },
          "eTag": {
            "type": "string",
            "description": "The ETag.\n            ",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "StationDetail": {
        "type": "object",
        "description": "Defines station details.\n            ",
        "additionalProperties": false,
        "properties": {
          "categories": {
            "type": "array",
            "description": "The station categories by category code. If empty all categories are supported.\nPlease note that this should be a list of chars and not a list of strings.\n            ",
            "nullable": true,
            "items": {
              "type": "string",
              "maxLength": 1
            }
          },
          "feeZones": {
            "type": "array",
            "description": "The fee zones by code.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfArea": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Area"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Area": {
        "type": "object",
        "description": "The area model.\n            ",
        "additionalProperties": false,
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Gets or sets the code for this area.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of this area.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this area.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "zones": {
            "type": "array",
            "description": "Gets or sets the list of zones associated with this area.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        }
      },
      "Zone": {
        "type": "object",
        "description": "The zone model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use Zonev2 instead.",
        "additionalProperties": false,
        "required": [
          "areaCode",
          "zoneCode"
        ],
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Gets or sets the area code of this zone.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this zone.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "zoneCode": {
            "type": "string",
            "description": "Gets or sets the zone code of this zone.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "subZones": {
            "type": "array",
            "description": "Gets or sets the list of subzones associated with this zone.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubZone"
            }
          }
        }
      },
      "SubZone": {
        "type": "object",
        "description": "The subzone model.\n            ",
        "deprecated": true,
        "x-deprecatedMessage": "4.4.1 - Please use SubZonev2 instead.",
        "additionalProperties": false,
        "required": [
          "subZoneCode",
          "zoneCode",
          "areaCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this subzone.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "subZoneCode": {
            "type": "string",
            "description": "Gets or sets the subzone code for this subzone.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "zoneCode": {
            "type": "string",
            "description": "Gets or sets the zone code for this subzone.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "areaCode": {
            "type": "string",
            "description": "Gets or sets the area code for this subzone.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "stations": {
            "type": "array",
            "description": "Gets or sets the list of stations associated with this subzone.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Station"
            }
          }
        }
      },
      "IJsonResponseOfArea": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Area"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfBaggageType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BaggageType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BaggageType": {
        "type": "object",
        "description": "The baggage type model.\n            ",
        "additionalProperties": false,
        "required": [
          "baggageTypeCode"
        ],
        "properties": {
          "baggageTypeCode": {
            "type": "string",
            "description": "Gets or sets the baggage type code.\n            ",
            "maxLength": 6,
            "minLength": 1
          },
          "bagWeightType": {
            "description": "Gets or sets the bag weight type.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "freeBag": {
            "type": "boolean",
            "description": "Gets or sets the free bag flag.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag.\n            "
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the baggage type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "weightReducedBy": {
            "type": "integer",
            "description": "Gets or sets the weight reduced by value.\n            ",
            "maximum": 999.0,
            "minimum": 0.0
          }
        }
      },
      "IJsonResponseOfBaggageType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BaggageType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCity": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/City"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "City": {
        "type": "object",
        "description": "The city model.\n            ",
        "additionalProperties": false,
        "properties": {
          "cityCode": {
            "type": "string",
            "description": "Gets or sets the code for this city.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Gets or sets the country code for this city\n            ",
            "maxLength": 2,
            "minLength": 1,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this city.\n            "
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name for this city\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "provinceStateCode": {
            "type": "string",
            "description": "Gets or sets the province/state code for this city.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "Gets or sets the short name for this city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfCity": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/City"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfClassOfService": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ClassOfService"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ClassOfService": {
        "type": "object",
        "description": "The class of service model.\n            ",
        "additionalProperties": false,
        "properties": {
          "classOfServiceCode": {
            "type": "string",
            "description": "The class of service code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "The short name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "nonRevenue": {
            "type": "boolean",
            "description": "The non revenue.\n            "
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace queue code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "gdsBookingOnly": {
            "type": "boolean",
            "description": "The GDS booking only.\n            "
          },
          "upgrade": {
            "type": "boolean",
            "description": "Indicates if the class of service is used for upgrades.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          },
          "standByAllowed": {
            "type": "boolean",
            "description": "The stand by allowed.\n            "
          },
          "seatGroup": {
            "type": "integer",
            "description": "The seat group.\n            "
          },
          "downgrade": {
            "type": "boolean",
            "description": "Indicates if the class of service is used for downgrades.\n            "
          }
        }
      },
      "IJsonResponseOfClassOfService": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ClassOfService"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfDelay": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Delay"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Delay": {
        "type": "object",
        "description": "The delay model.\n            ",
        "additionalProperties": false,
        "properties": {
          "delayCode": {
            "type": "string",
            "description": "The delay code.\n            ",
            "nullable": true
          },
          "delayType": {
            "description": "The delay type.\n            ",
            "$ref": "#/components/schemas/DelayType"
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The InActive of Delay.\n            "
          }
        }
      },
      "DelayType": {
        "type": "integer",
        "description": "DelayType\n            \n\n0 = Unknown\n1 = AirlineInternalCodes\n2 = Others\n3 = Schedules\n4 = PassengerAndBaggage\n5 = CargoAndMail\n6 = MailOnly\n7 = AircraftAndRampHandling\n8 = TechnicalAndAircraftEquipment\n9 = DamageToAircraft\n10 = EdpAutomatedEquipmentFailure\n11 = FlightOperationsAndCrewing\n12 = Weather\n13 = AirTrafficFlowManagement\n14 = AirportAndGovernmentalAuthorities\n15 = Reactionary\n16 = Miscellaneous",
        "x-enumNames": [
          "Unknown",
          "AirlineInternalCodes",
          "Others",
          "Schedules",
          "PassengerAndBaggage",
          "CargoAndMail",
          "MailOnly",
          "AircraftAndRampHandling",
          "TechnicalAndAircraftEquipment",
          "DamageToAircraft",
          "EdpAutomatedEquipmentFailure",
          "FlightOperationsAndCrewing",
          "Weather",
          "AirTrafficFlowManagement",
          "AirportAndGovernmentalAuthorities",
          "Reactionary",
          "Miscellaneous"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ]
      },
      "IJsonResponseOfDelay": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Delay"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfExternalRate": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalRate"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfExternalRate": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalRate"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfExternalSystem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ExternalSystem"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ExternalSystem": {
        "type": "object",
        "description": "The external system model.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemCode": {
            "type": "string",
            "description": "The code for this external system.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name for this external system.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfExternalSystem": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExternalSystem"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfFareDiscount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareDiscount"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FareDiscount": {
        "type": "object",
        "description": "The fare discount model.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareDiscountCode": {
            "type": "string",
            "description": "The fare discount code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The fare discount name.\n            ",
            "nullable": true
          },
          "fareDiscountAmounts": {
            "type": "array",
            "description": "The fare discount amounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareDiscountAmount"
            }
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag.\n            "
          },
          "discountPercent": {
            "type": "number",
            "description": "The discount percent.\n            ",
            "format": "decimal"
          }
        }
      },
      "FareDiscountAmount": {
        "type": "object",
        "description": "The fare discount amount model.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareDiscountCode": {
            "type": "string",
            "description": "The fare discount code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "discountAmount": {
            "type": "number",
            "description": "The discount amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "IJsonResponseOfFareDiscount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareDiscount"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfFareSurcharge": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareSurcharge"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FareSurcharge": {
        "type": "object",
        "description": "The fare surcharge model.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareSurchargeCode": {
            "type": "string",
            "description": "The fare surcharge code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The fare surcharge name.\n            ",
            "nullable": true
          },
          "displayCode": {
            "type": "string",
            "description": "The display code.\n            ",
            "nullable": true
          },
          "defaultCurrencyCode": {
            "type": "string",
            "description": "The default currency code.\n            ",
            "nullable": true
          },
          "taxApplication": {
            "description": "The tax application.\n            ",
            "$ref": "#/components/schemas/TaxApplication"
          },
          "fareSurchargeAmounts": {
            "type": "array",
            "description": "The fare surcharge amount list.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareSurchargeAmount"
            }
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag.\n            "
          },
          "percent": {
            "type": "number",
            "description": "The percent.\n            ",
            "format": "decimal"
          }
        }
      },
      "FareSurchargeAmount": {
        "type": "object",
        "description": "The fare surcharge amount model.\n            ",
        "additionalProperties": false,
        "properties": {
          "fareSurchargeCode": {
            "type": "string",
            "description": "The fare surcharge code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount.\n            ",
            "format": "decimal"
          }
        }
      },
      "IJsonResponseOfFareSurcharge": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareSurcharge"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfFareType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FareType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FareType": {
        "type": "object",
        "description": "The fare type model.\n            ",
        "additionalProperties": false,
        "required": [
          "fareTypeCode"
        ],
        "properties": {
          "fareTypeCode": {
            "type": "string",
            "description": "The fare type code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is active.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          }
        }
      },
      "IJsonResponseOfFareType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FareType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfFee": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Fee": {
        "type": "object",
        "description": "Fee Model.\n            ",
        "additionalProperties": false,
        "properties": {
          "canBeManuallyAdded": {
            "type": "boolean",
            "description": "Returns true if this fee can be manually added.\n            "
          },
          "hasDefaultFeePrice": {
            "type": "boolean",
            "description": "Returns true if this fee can be queried to check the default price.\n            "
          },
          "isFeeChargedPerSegment": {
            "type": "boolean",
            "description": "Returns true if the given fee code is charged per segment/leg.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          },
          "chargeLimit": {
            "type": "integer",
            "description": "Gets or sets the charge limit of this fee.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "chargeLimitMode": {
            "description": "Gets or sets when the charge limit is applied to this fee.\n            ",
            "$ref": "#/components/schemas/ChargeLimitMode"
          },
          "chargeLimitTravelComponent": {
            "description": "Gets or sets the charge limit for the travel component associated with this fee.\n            ",
            "$ref": "#/components/schemas/TravelComponent"
          },
          "commissionable": {
            "type": "boolean",
            "description": "Gets or sets the commissionable flag for this fee.\n            "
          },
          "countryCode": {
            "type": "string",
            "description": "Gets or sets the country code for this fee.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description for this fee.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "displayCode": {
            "type": "string",
            "description": "Gets or sets the display code for this fee.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "feeApplication": {
            "description": "Gets or sets how this fee is applied.\n            ",
            "$ref": "#/components/schemas/FeeApplication"
          },
          "feeCode": {
            "type": "string",
            "description": "Gets or sets the code for this fee.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "feeOptionMode": {
            "description": "Gets or sets the fee option mode for this fee.\n            ",
            "$ref": "#/components/schemas/FeeOptionMode"
          },
          "feeType": {
            "description": "Gets or sets the fee type for this fee.\n            ",
            "$ref": "#/components/schemas/FeeType"
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this fee.\n            "
          },
          "itemizable": {
            "type": "boolean",
            "description": "Gets or sets the itemizable flag for this fee.\n            "
          },
          "minStopover": {
            "type": "integer",
            "description": "Gets or sets the MinStopover of this fee.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "minStopoverInternational": {
            "type": "integer",
            "description": "Gets or sets the International MinStopover of this fee.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this fee.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "taxApplication": {
            "description": "Gets or sets how the taxes are applied for this fee.\n            ",
            "$ref": "#/components/schemas/TaxApplication"
          },
          "ticketable": {
            "type": "boolean",
            "description": "Gets or sets the ticketable flag for this fee.\n            "
          },
          "travelComponent": {
            "description": "Gets or sets the travel component associated with this fee.\n            ",
            "$ref": "#/components/schemas/TravelComponent"
          }
        }
      },
      "ChargeLimitMode": {
        "type": "integer",
        "description": "Enumeration representing the mode when the charge limit is applied.\n            \n\n0 = FirstOccurrences\n1 = LastOccurrences\n2 = FirstOutLastInOccurrences",
        "x-enumNames": [
          "FirstOccurrences",
          "LastOccurrences",
          "FirstOutLastInOccurrences"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "FeeOptionMode": {
        "type": "integer",
        "description": "Enumeration for different modes for fee options.\n            \n\n0 = Default\n1 = All\n2 = LowestCost\n3 = HighestCost",
        "x-enumNames": [
          "Default",
          "All",
          "LowestCost",
          "HighestCost"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfFee": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Fee"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfHotCardReason": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HotCardReason"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "HotCardReason": {
        "type": "object",
        "description": "The hot card reason model.\n            ",
        "additionalProperties": false,
        "required": [
          "hotCardReasonCode"
        ],
        "properties": {
          "hotCardReasonCode": {
            "type": "string",
            "description": "The reason code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfHotCardReason": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/HotCardReason"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfIssuanceReason": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IssuanceReason"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IssuanceReason": {
        "type": "object",
        "description": "The issuance reason model.\n            ",
        "additionalProperties": false,
        "required": [
          "issuanceReasonCode"
        ],
        "properties": {
          "issuanceReasonCode": {
            "type": "string",
            "description": "The reason code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfIssuanceReason": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/IssuanceReason"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfLocation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Location": {
        "type": "object",
        "description": "The location model.\n            ",
        "additionalProperties": false,
        "properties": {
          "locationCode": {
            "type": "string",
            "description": "The Location Code.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "locationType": {
            "description": "The location type.\n            ",
            "$ref": "#/components/schemas/LocationType"
          },
          "paymentGroupId": {
            "type": "integer",
            "description": "The payment group id.\n            ",
            "format": "int64",
            "maximum": 9223372036854775807.0,
            "minimum": 0.0
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 1,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "LocationType": {
        "type": "integer",
        "description": "The location type enumeration.\n            \n\n0 = Other\n1 = Station\n2 = City",
        "x-enumNames": [
          "Other",
          "Station",
          "City"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfLocation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Location"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfMac": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Mac"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Mac": {
        "type": "object",
        "description": "The MAC station model defines areas of related stations by region. //todo: Document and expand the MAC acronym\n            ",
        "additionalProperties": false,
        "required": [
          "macCode",
          "name"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for this MAC station.\n            "
          },
          "macCode": {
            "type": "string",
            "description": "The code for this MAC station.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "macStations": {
            "type": "array",
            "description": "The stations associated with this MAC.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "The name for this MAC.\n            ",
            "maxLength": 64,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfMac": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Mac"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfMessageType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MessageType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "MessageType": {
        "type": "object",
        "description": "The message type model.\n            ",
        "additionalProperties": false,
        "required": [
          "messageTypeCode"
        ],
        "properties": {
          "messageTypeCode": {
            "type": "string",
            "description": "The reason code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfMessageType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPaymentMethod": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPaymentMethod": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfResourcePostalCodeResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ResourcePostalCodeResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ResourcePostalCodeResponse": {
        "type": "object",
        "description": "Model representing the resource postal code response.\n            ",
        "additionalProperties": false,
        "properties": {
          "postalCodes": {
            "type": "array",
            "description": "The list of postal codes.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PostalCode"
            }
          },
          "totalCount": {
            "type": "integer",
            "description": "The total count of all postal codes.\n            ",
            "format": "int32"
          },
          "lastPageKey": {
            "type": "string",
            "description": "Used to specify the last item of the page of the last set of records retrieved\nwhen paging was performed.\n            ",
            "nullable": true
          }
        }
      },
      "PostalCode": {
        "type": "object",
        "description": "The postal code model.\n            ",
        "additionalProperties": false,
        "required": [
          "countryCode",
          "provinceStateCode"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 1,
            "nullable": true
          },
          "cityName": {
            "type": "string",
            "description": "The city name for this postal code.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The two-digit country code for this postal code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "provinceStateCode": {
            "type": "string",
            "description": "The province state code for this postal code.\n            ",
            "maxLength": 3,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfPostalCode": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PostalCode"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfProductClass": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductClass"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ProductClass": {
        "type": "object",
        "description": "The product class model.\n            ",
        "additionalProperties": false,
        "properties": {
          "productClassCode": {
            "type": "string",
            "description": "The product class.\n            ",
            "maxLength": 2,
            "minLength": 1,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "The rank.\n            ",
            "maximum": 999.0,
            "minimum": 0.0
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfProductClass": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProductClass"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPromotionSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromotionSettingType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PromotionSettingType": {
        "type": "object",
        "description": "The promotion setting type model.\n            ",
        "additionalProperties": false,
        "required": [
          "promotionSettingTypeCode"
        ],
        "properties": {
          "promotionSettingTypeCode": {
            "type": "string",
            "description": "The promotion setting type code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The setting type name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "In active\n            "
          },
          "schema": {
            "type": "string",
            "description": "The data schema.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPromotionSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PromotionSettingType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfProvinceState": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProvinceState"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ProvinceState": {
        "type": "object",
        "description": "The province/state code model.\n            ",
        "additionalProperties": false,
        "required": [
          "provinceStateCode",
          "countryCode"
        ],
        "properties": {
          "cities": {
            "type": "array",
            "description": "Gets or sets the list of cities associated with this province/state\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/City"
            }
          },
          "provinceStateCode": {
            "type": "string",
            "description": "Gets or sets the code of the province/state.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the Name of the province/state.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag of the province/state.\n            "
          },
          "countryCode": {
            "type": "string",
            "description": "Gets or sets the country code of the province/state.\n            ",
            "maxLength": 2,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfProvinceState": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ProvinceState"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfReminderTime": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ReminderTime"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ReminderTime": {
        "type": "object",
        "description": "The reminder time for a notification timed event.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The notification timed event type.\n            ",
            "$ref": "#/components/schemas/NotificationTimedEventType"
          },
          "times": {
            "type": "array",
            "description": "The list of acceptable reminder times.\n            ",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "IJsonResponseOfReminderTime": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ReminderTime"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfCheckInSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CheckInSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CheckInSettings": {
        "type": "object",
        "description": "The Booking Check-In Settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowApisCheckIn": {
            "description": "Gets or sets the APIS rules for Check-In.\n            ",
            "$ref": "#/components/schemas/ApisCheckInType"
          },
          "allowIappCheckIn": {
            "description": "Gets or sets the IAPP rules for Check-In.\n            ",
            "$ref": "#/components/schemas/IappCheckInType"
          },
          "domesticBagWeight": {
            "description": "Gets or sets the Domestic bag weight rules for Check-In.\n            ",
            "$ref": "#/components/schemas/BagWeightControl"
          },
          "internationalBagWeight": {
            "description": "Gets or sets the International bag weight rules for Check-In.\n            ",
            "$ref": "#/components/schemas/BagWeightControl"
          },
          "allowAppsCheckIn": {
            "type": "boolean",
            "description": "Gets or sets the flag to allow APPS Checkin.\n            "
          },
          "allowAppsOverride": {
            "type": "boolean",
            "description": "Gets or sets the flag to allow APPS override in Check-In.\n            "
          },
          "allowBagTagDestinationMismatch": {
            "type": "boolean",
            "description": "Gets or sets the allow bag tag destination mismatch flag for Check-In.\n            "
          },
          "allowBagTagReprint": {
            "type": "boolean",
            "description": "Gets or sets the flag to allow reprinting bag tags for Check-In.\n            "
          },
          "allowCheckedInPassengerFlightChange": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows checked-in passenger to change flight for Check-In.\n            "
          },
          "allowCheckedInPassengerNameChange": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows checked-in passenger to change name for Check-In.\n            "
          },
          "allowCheckInOfPassengerWithPendingPayments": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows a passenger with pending payments to check-in.\n            "
          },
          "allowCheckInWhenTicketCollected": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows a passenger to check-in when ticket is collected for Check-In.\n            "
          },
          "allowETicketCouponStatusOverride": {
            "type": "boolean",
            "description": "Gets or sets the status override flag for allowing an E-Ticket coupon for Check-In.\n            "
          },
          "allowGatePassPrinting": {
            "type": "boolean",
            "description": "Gets or sets the flag for allowing the gate info to be printed for Check-In.\n            "
          },
          "allowInvalidBookingCheckIn": {
            "type": "boolean",
            "description": "Gets or sets the flag for allowing an invalid booking to be checked-in.\n            "
          },
          "allowManualClearance": {
            "type": "boolean",
            "description": "Gets or sets the flag for allowing manual clearance for Check-In.\n            "
          },
          "allowMidJourneyCheckIn": {
            "type": "boolean",
            "description": "Gets or sets the flag for allowing mid-journey Check-In.\n            "
          },
          "allowTbaCheckIn": {
            "type": "boolean",
            "description": "Gets or sets the flag allowing a passenger with the name TBA to be allowed to check-in.\n            "
          },
          "ignoreMarketTimeRestrictions": {
            "type": "boolean",
            "description": "Gets or sets the flag allowing to ignore market time restrictions for Check-In.\n            "
          },
          "checkedInPassengerFlightChangeOffset": {
            "type": "string",
            "description": "Gets or sets the timespan a checked-in passenger can change flights.\n            ",
            "format": "duration",
            "nullable": true
          },
          "checkedInPassengerNameChangeOffset": {
            "type": "string",
            "description": "Gets or sets the timespan a checked-in passenger can change names.\n            ",
            "format": "duration",
            "nullable": true
          },
          "checkedInCloseOffset": {
            "type": "string",
            "description": "Gets or sets the timespan a passengers opportunity to check-in closes prior to flight.\n            ",
            "format": "duration",
            "nullable": true
          },
          "checkedInOpenOffset": {
            "type": "string",
            "description": "Gets or sets the timespan a passengers opportunity to check-in opens prior to flight.\n            ",
            "format": "duration",
            "nullable": true
          },
          "allowedSsrCodes": {
            "type": "array",
            "description": "Gets or sets a collection of allowed SSR codes for Check-In reference.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "restrictedSsrCodes": {
            "type": "array",
            "description": "Gets or sets a collection of restricted SSR codes for Check-In reference.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "requiredSsrCodes": {
            "type": "array",
            "description": "Gets or sets a collection of required SSR codes for Check-In reference.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApisCheckInType": {
        "type": "integer",
        "description": "Enumeration of APIS Check-in rules.\n            \n\n0 = NotAllowed\n1 = AllowedWithVerifiedDocument\n2 = AllowedWithDocument\n3 = AllowedWithoutVerifiedDocument",
        "x-enumNames": [
          "NotAllowed",
          "AllowedWithVerifiedDocument",
          "AllowedWithDocument",
          "AllowedWithoutVerifiedDocument"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IappCheckInType": {
        "type": "integer",
        "description": "Enumeration of IAPP Check-in rules.\n            \n\n0 = NotAllowed\n1 = AllowedWithVerifiedDocument\n2 = AllowedWithDocument\n3 = AllowedWithoutVerifiedDocument",
        "x-enumNames": [
          "NotAllowed",
          "AllowedWithVerifiedDocument",
          "AllowedWithDocument",
          "AllowedWithoutVerifiedDocument"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "BagWeightControl": {
        "type": "integer",
        "description": "Enumeration for Bag weight rules.\n            \n\n0 = WeightNotRequired\n1 = TotalWeightRequired\n2 = IndividualWeightRequired",
        "x-enumNames": [
          "WeightNotRequired",
          "TotalWeightRequired",
          "IndividualWeightRequired"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfContactSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ContactSettings": {
        "type": "object",
        "description": "The booking contact settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "title": {
            "description": "Title field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "firstName": {
            "description": "First name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "middleName": {
            "description": "Middle name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "lastName": {
            "description": "Last name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "suffix": {
            "description": "Suffix field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "addressLineOne": {
            "description": "Address line one field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "addressLineTwo": {
            "description": "Address line two field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "addressLineThree": {
            "description": "Address line three field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "city": {
            "description": "Address city field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "state": {
            "description": "Address state field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "postalCode": {
            "description": "Address postal code field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "country": {
            "description": "Address country field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "email": {
            "description": "Email field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "homePhoneNumber": {
            "description": "Home phone number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "workPhoneNumber": {
            "description": "Work phone number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "otherPhoneNumber": {
            "description": "Other phone number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "faxNumber": {
            "description": "Fax number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disablePhoneFormat": {
            "type": "boolean",
            "description": "Flag indicating to disable phone number formatting.\n            "
          },
          "defaultItineraryDistribution": {
            "description": "The default itinerary distribution option.\n            ",
            "$ref": "#/components/schemas/DistributionOption"
          },
          "notificationPreference": {
            "description": "Notification preference field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "defaultNotificationPreference": {
            "description": "The default notification preference.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "defaultToCustomerPreference": {
            "type": "boolean",
            "description": "Flag indicating to default the customer preferences to the contact.\n            "
          },
          "maskContactLanguage": {
            "type": "boolean",
            "description": "Gets or Sets the indicator whether contact language is masked.\n            "
          },
          "maskIndiaGSTInfo": {
            "type": "boolean",
            "description": "Gets or Sets the indicator whether contact language is masked.\n            "
          }
        }
      },
      "FieldControlType": {
        "type": "integer",
        "description": "Defines the different field validation types.\n            \n\n0 = Required\n1 = Optional\n2 = Disabled\n3 = RequiredMasked\n4 = OptionalMasked",
        "x-enumNames": [
          "Required",
          "Optional",
          "Disabled",
          "RequiredMasked",
          "OptionalMasked"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "IJsonResponseOfCustomerAccountSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CustomerAccountSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CustomerAccountSettings": {
        "type": "object",
        "description": "The booking customer account settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowCustomerMerge": {
            "type": "boolean",
            "description": "The flag allowing two different customer accounts to be combined into a single account.\n            "
          },
          "allowCustomerProgram": {
            "type": "boolean",
            "description": "The flag allowing the current role to manage user customer programs.\n            "
          },
          "allowSeatLocationOption": {
            "type": "boolean",
            "description": "The flag allowing the current role to manage user seat preferences.\n            "
          },
          "customerAccessControl": {
            "description": "The restriction/permissions allowed by the current role.\n            ",
            "$ref": "#/components/schemas/CustomerAccessControl"
          },
          "defaultCustomerNotificationPreference": {
            "description": "The default notification preferences of the customer.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "defaultSeatPreference": {
            "description": "The default seat preferences of the customer.\n            ",
            "$ref": "#/components/schemas/CustomerSeatPreference"
          },
          "disableCustomerAddress": {
            "description": "The restrictions on the customer address fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerCurrency": {
            "description": "The restrictions on the customer currency fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerDateOfBirth": {
            "description": "The restrictions on the customer date of birth fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerEmail": {
            "description": "The restrictions on the customer email fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerFax": {
            "description": "The restrictions on the customer fax fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerLanguage": {
            "description": "The restrictions on the customer language fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerNationality": {
            "description": "The restrictions on the customer nationality fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerNotificationPreference": {
            "description": "The restrictions on the customer notification preferences fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerPayment": {
            "description": "The restrictions on the customer payment fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerPhone": {
            "description": "The restrictions on the customer phone number fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerResidentCountry": {
            "description": "The restrictions on the customer resident country fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerTitle": {
            "description": "The restrictions on the customer title fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "disableCustomerType": {
            "description": "The restrictions on the customer type fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "allowAgentToModifyProgramLevel": {
            "type": "boolean",
            "description": "The flag allowing the agent to modify program level for default loyalty customer program.\n            "
          }
        }
      },
      "CustomerAccessControl": {
        "type": "integer",
        "description": "Enumeration for customer access control.\n            \n\n0 = View\n1 = CreateAndChange",
        "x-enumNames": [
          "View",
          "CreateAndChange"
        ],
        "enum": [
          0,
          1
        ]
      },
      "CustomerSeatPreference": {
        "type": "integer",
        "description": "Enumeration for seat preferences.\n            \n\n0 = None\n1 = Window\n2 = Aisle\n3 = NoPreference\n4 = Front\n5 = Rear\n6 = WindowFront\n7 = WindowRear\n8 = AisleFront\n9 = AisleRear",
        "x-enumNames": [
          "None",
          "Window",
          "Aisle",
          "NoPreference",
          "Front",
          "Rear",
          "WindowFront",
          "WindowRear",
          "AisleFront",
          "AisleRear"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "IJsonResponseOfFeeSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FeeSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FeeSettings": {
        "type": "object",
        "description": "The booking fee settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowNegativeFees": {
            "type": "boolean",
            "description": "Gets or sets the flag allowing negative fees.\n            "
          },
          "allowOtherCurrencies": {
            "type": "boolean",
            "description": "Gets or sets the flag allowing other currency fees.\n            "
          },
          "cancelGracePeriod": {
            "type": "string",
            "description": "Gets or sets the timeframe for the cancel grace period.\n            ",
            "format": "duration",
            "nullable": true
          },
          "displayTaxesForFeesOnBreakdown": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows displaying taxes for fees on the breakdown.\n            "
          },
          "feeDescription": {
            "description": "Gets or sets the restriction for fee description fields.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "allowFeesWithPoints": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows selling of fees with points.\n            "
          }
        }
      },
      "IJsonResponseOfFlightSearchSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/FlightSearchSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "FlightSearchSettings": {
        "type": "object",
        "description": "The Booking flight search settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingMaxPassengers": {
            "type": "integer",
            "description": "The maximum number of passengers allowed on a single booking.\n            ",
            "format": "int32"
          },
          "allowOpenJaw": {
            "type": "boolean",
            "description": "Flag that indicates if open jaw journeys are allowed.\n            "
          },
          "allowPrivateFares": {
            "type": "boolean",
            "description": "Flag that indicates whether private fares are allowed.\n            "
          },
          "showExpiredFareDateRange": {
            "type": "integer",
            "description": "The number of days after the fare discontinue date that the agent will be allowed to view the fare.\n            ",
            "format": "int32"
          },
          "maxNumberConnectingFlights": {
            "type": "integer",
            "description": "The maximum number of connections on a journey that will be returned from availability.\n            "
          },
          "primarySortKey": {
            "description": "The primary sort to be used on availability response.\n            ",
            "$ref": "#/components/schemas/JourneySortKey"
          },
          "secondarySortKey": {
            "description": "The secondary sort to be used on the availability response.\n            ",
            "$ref": "#/components/schemas/JourneySortKey"
          },
          "maxAvailabilityDateRange": {
            "type": "integer",
            "description": "The maximum number of days between the begin and end date for regular availability.\n            ",
            "format": "int32"
          },
          "maxLowFareDateRange": {
            "type": "integer",
            "description": "The maximum number of days between the begin and end date for low fare availability.\n            ",
            "format": "int32"
          },
          "displayLowerFares": {
            "description": "Display setting for low fares (used in change flow).\n            ",
            "$ref": "#/components/schemas/FareDisplayType"
          },
          "fareClassControl": {
            "description": "The fare class filtering when returning journeys during availability.\n            ",
            "$ref": "#/components/schemas/FareClassControl"
          },
          "allUpPricing": {
            "type": "boolean",
            "description": "The flag indicating whether to allow anticipated sales taxes and travel fees when processing the availability\nrequest.\n            "
          },
          "fareSorting": {
            "description": "Fare filtering options.\n            ",
            "$ref": "#/components/schemas/FareSelection"
          },
          "lowFareCacheStatus": {
            "description": "The status of the low fare cache.\n            ",
            "$ref": "#/components/schemas/LowFareCacheOption"
          },
          "sortByInterlineConnections": {
            "type": "boolean",
            "description": "This maps to New Skies' Bias Online Commercial Duplicates.\nIf set to true the flight availability results are sorted by online connections (the same carrier for all legs)\nfollowed by the interline connections (between hosted carriers).\n            "
          }
        }
      },
      "FareDisplayType": {
        "type": "integer",
        "description": "Filter used to determine the display status of fares (used during rebook).\n            \n\n0 = HideLowerFares\n1 = ShowAndAllowLowerFares\n2 = ShowButDisableLowerFares",
        "x-enumNames": [
          "HideLowerFares",
          "ShowAndAllowLowerFares",
          "ShowButDisableLowerFares"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "FareSelection": {
        "type": "integer",
        "description": "Identifies which fare to return from availability.\n            \n\n0 = BySortPrice\n1 = ByCalculatedFarePrice",
        "x-enumNames": [
          "BySortPrice",
          "ByCalculatedFarePrice"
        ],
        "enum": [
          0,
          1
        ]
      },
      "LowFareCacheOption": {
        "type": "integer",
        "description": "Determines the low fare caching options.\n            \n\n0 = AlwaysUseCache\n1 = BypassCacheOnRequest\n2 = NeverUseCache",
        "x-enumNames": [
          "AlwaysUseCache",
          "BypassCacheOnRequest",
          "NeverUseCache"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "RoleCodeQuery": {
        "type": "object",
        "description": "Model for a role code query.\n            ",
        "additionalProperties": false,
        "required": [
          "roleCode"
        ],
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "Gets or sets the role code for this request.\n            ",
            "maxLength": 4,
            "minLength": 1
          }
        }
      },
      "DeltaMapperOfFlightSearchSettings": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "bookingMaxPassengers": {
            "type": "integer",
            "description": "The maximum number of passengers allowed on a single booking.\n            ",
            "format": "int32"
          },
          "allowOpenJaw": {
            "type": "boolean",
            "description": "Flag that indicates if open jaw journeys are allowed.\n            "
          },
          "allowPrivateFares": {
            "type": "boolean",
            "description": "Flag that indicates whether private fares are allowed.\n            "
          },
          "showExpiredFareDateRange": {
            "type": "integer",
            "description": "The number of days after the fare discontinue date that the agent will be allowed to view the fare.\n            ",
            "format": "int32"
          },
          "maxNumberConnectingFlights": {
            "type": "integer",
            "description": "The maximum number of connections on a journey that will be returned from availability.\n            "
          },
          "primarySortKey": {
            "description": "The primary sort to be used on availability response.\n            ",
            "$ref": "#/components/schemas/JourneySortKey"
          },
          "secondarySortKey": {
            "description": "The secondary sort to be used on the availability response.\n            ",
            "$ref": "#/components/schemas/JourneySortKey"
          },
          "maxAvailabilityDateRange": {
            "type": "integer",
            "description": "The maximum number of days between the begin and end date for regular availability.\n            ",
            "format": "int32"
          },
          "maxLowFareDateRange": {
            "type": "integer",
            "description": "The maximum number of days between the begin and end date for low fare availability.\n            ",
            "format": "int32"
          },
          "displayLowerFares": {
            "description": "Display setting for low fares (used in change flow).\n            ",
            "$ref": "#/components/schemas/FareDisplayType"
          },
          "fareClassControl": {
            "description": "The fare class filtering when returning journeys during availability.\n            ",
            "$ref": "#/components/schemas/FareClassControl"
          },
          "allUpPricing": {
            "type": "boolean",
            "description": "The flag indicating whether to allow anticipated sales taxes and travel fees when processing the availability\nrequest.\n            "
          },
          "fareSorting": {
            "description": "Fare filtering options.\n            ",
            "$ref": "#/components/schemas/FareSelection"
          },
          "lowFareCacheStatus": {
            "description": "The status of the low fare cache.\n            ",
            "$ref": "#/components/schemas/LowFareCacheOption"
          },
          "sortByInterlineConnections": {
            "type": "boolean",
            "description": "This maps to New Skies' Bias Online Commercial Duplicates.\nIf set to true the flight availability results are sorted by online connections (the same carrier for all legs)\nfollowed by the interline connections (between hosted carriers).\n            "
          }
        }
      },
      "IJsonResponseOfGeneralSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GeneralSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "GeneralSettings": {
        "type": "object",
        "description": "The booking general settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowChangeSsrOnCheckedInPassenger": {
            "type": "boolean",
            "description": "The flag allowing adding and removing SSRs on a checked-in passenger.\n            "
          },
          "allowBlockedSeatAssignment": {
            "type": "boolean",
            "description": "The flag allowing blocked seat assignment.\n            "
          },
          "allowChangeOnRestrictedFlight": {
            "type": "boolean",
            "description": "The flag allowing changing the booking on a restricted flight.\n            "
          },
          "allowPromoCodes": {
            "type": "boolean",
            "description": "The flag allowing promo codes.\n            "
          },
          "allowEditableApiChannel": {
            "type": "boolean",
            "description": "The flag allowing changes on a booking made through the API channel.\n            "
          },
          "allowEditableDirectChannel": {
            "type": "boolean",
            "description": "The flag allowing changes on a booking made through the direct channel.\n            "
          },
          "allowEditableGdsBookingWithTaPayment": {
            "type": "boolean",
            "description": "The flag allowing the current role to edit GDS bookings with TA payments.\n            "
          },
          "allowEditableGdsChannel": {
            "type": "boolean",
            "description": "The flag allowing the current role to edit bookings created through GDS.\n            "
          },
          "allowEditableWebChannel": {
            "type": "boolean",
            "description": "The flag allowing the current role to edit bookings created through the web channel.\n            "
          },
          "allowGroupNameUpdates": {
            "type": "boolean",
            "description": "The flag allowing group names to be updated on non-GDS flights.\n            "
          },
          "allowManifestRetrievalOnUnblockedFlightLines": {
            "type": "boolean",
            "description": "The flag allowing manifest retrieval on Unblocked flight lines\n            "
          },
          "allowOverbookingSsrOnMove": {
            "type": "boolean",
            "description": "The flag allowing overbooking SSRs on Move.\n            "
          },
          "allowQueueingGdsBookingWithTaFopForETicketReissue": {
            "type": "boolean",
            "description": "The flag allowing queuing GDS booking with TA FOP for ETicket Reissues.\n            "
          },
          "allowRestrictedSeatAssignment": {
            "type": "boolean",
            "description": "The flag allowing restricted seat assignments.\n            "
          },
          "allowSeatAssignment": {
            "description": "The seat assignment rules for this role.\n            ",
            "$ref": "#/components/schemas/SeatAssignmentRole"
          },
          "bookingAccessControl": {
            "description": "The booking access allowed on this role.\n            ",
            "$ref": "#/components/schemas/BookingAccessControl"
          },
          "viewBookingsByControl": {
            "description": "The highest organization that the role can view bookings for.\n            ",
            "$ref": "#/components/schemas/GroupAccessControl"
          },
          "editBookingsByControl": {
            "description": "The highest organization that the role can edit bookings for.\n            ",
            "$ref": "#/components/schemas/GroupAccessControl"
          },
          "defaultBookingComment": {
            "type": "string",
            "description": "The mandatory booking comment.\n            ",
            "nullable": true
          },
          "doNotIncludeUnitProperties": {
            "type": "boolean",
            "description": "The flag to not include unit properties in notification itinerary.\n            "
          },
          "duplicateBookingDetectionTimeSpan": {
            "type": "string",
            "description": "The timespan where duplicate bookings are watched for on this role.\n            ",
            "format": "duration",
            "nullable": true
          },
          "enableAutomaticSeatAssignment": {
            "type": "boolean",
            "description": "The flag allowing automatic seat assignment on this role.\n            "
          },
          "highlightFareOverride": {
            "description": "The option to highlight the fare override on this role.\n            ",
            "$ref": "#/components/schemas/HighlightOption"
          },
          "highlightIrop": {
            "description": "The option to highlight IROP information on this role.\n            ",
            "$ref": "#/components/schemas/HighlightOption"
          },
          "highlightScheduleChange": {
            "description": "The option to highlight schedule changes on this role.\n            ",
            "$ref": "#/components/schemas/HighlightOption"
          },
          "highlightStandby": {
            "description": "The option to highlight standbys on this role.\n            ",
            "$ref": "#/components/schemas/HighlightOption"
          },
          "highlightUpgrade": {
            "description": "The option to highlight upgrades on this role.\n            ",
            "$ref": "#/components/schemas/HighlightOption"
          },
          "managePassiveSegments": {
            "type": "boolean",
            "description": "The flag to allow managing passive segments on this role.\n            "
          },
          "reassignSeatingBehavior": {
            "description": "The reassign seat behavior for this role.\n            ",
            "$ref": "#/components/schemas/ReassignSeatingBehavior"
          },
          "restrictedExternalSystemCodes": {
            "type": "array",
            "description": "Gets or sets a list of restricted external system codes for this role.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "timeDisplay": {
            "description": "The time display style for this role.\n            ",
            "$ref": "#/components/schemas/TimeDisplay"
          },
          "allowSeatGroupRestrictionOverride": {
            "type": "boolean",
            "description": "The allow seat group restriction override flag.\n            "
          },
          "allowAccessToComments": {
            "type": "boolean",
            "description": "The allow access to comments flag.\n            "
          },
          "sharedCommentTypes": {
            "description": "The comment types that can be shared with the booking source.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SharedCommentType"
          },
          "allowOverrideOfSalesChannel": {
            "type": "boolean",
            "description": "The flag for allowing overriding of sales channel.\n            "
          },
          "autoFillContactInformationByPhoneNumber": {
            "type": "boolean",
            "description": "The flag that configures auto-filling and auto-saving of contact information\nwhen a phone number is provided on creating a booking for various user interfaces.\n            "
          }
        }
      },
      "SeatAssignmentRole": {
        "type": "integer",
        "description": "The Enumeration indicates the seat assignment permissions for selling.\n            \n\n0 = Never\n1 = OnlyOnUnheldBookings\n2 = Always",
        "x-enumNames": [
          "Never",
          "OnlyOnUnheldBookings",
          "Always"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "BookingAccessControl": {
        "type": "integer",
        "description": "Enumeration representing access rights to booking operations. Each value has access to all the values below it.\n            \n\n0 = None\n1 = ScheduleOnly\n2 = Availability\n3 = View\n4 = ModifyNoCommit\n5 = Create\n6 = Change\n7 = CreateAndChange",
        "x-enumNames": [
          "None",
          "ScheduleOnly",
          "Availability",
          "View",
          "ModifyNoCommit",
          "Create",
          "Change",
          "CreateAndChange"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "GroupAccessControl": {
        "type": "integer",
        "description": "Enumeration that represents the access rights to groups.\n            \n\n0 = Agent\n1 = Organization\n2 = OrganizationGroup\n3 = All",
        "x-enumNames": [
          "Agent",
          "Organization",
          "OrganizationGroup",
          "All"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "HighlightOption": {
        "type": "integer",
        "description": "Enumeration representing highlight options\n            \n\n0 = None\n1 = Highlight",
        "x-enumNames": [
          "None",
          "Highlight"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ReassignSeatingBehavior": {
        "type": "integer",
        "description": "Enumeration with possible seat reassignment behaviors during any type of flight move.\n            \n\n0 = DropSeats\n1 = LikeForLike\n2 = Algorithm",
        "x-enumNames": [
          "DropSeats",
          "LikeForLike",
          "Algorithm"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "TimeDisplay": {
        "type": "integer",
        "description": "Enumeration for the different time display options.\n            \n\n0 = Default\n1 = AmPm\n2 = TwentyFourHour",
        "x-enumNames": [
          "Default",
          "AmPm",
          "TwentyFourHour"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "SharedCommentType": {
        "type": "object",
        "description": "The shared comment types for the booking source.\n            ",
        "additionalProperties": false,
        "properties": {
          "reservation": {
            "type": "boolean",
            "description": "Indicates if the role is allowed to share the reservation comment type with the booking source.\n            "
          },
          "itinerary": {
            "type": "boolean",
            "description": "Indicates if the role is allowed to share the itinerary comment type with the booking source.\n            "
          },
          "manifest": {
            "type": "boolean",
            "description": "Indicates if the role is allowed to share the manifest comment type with the booking source.\n            "
          },
          "alert": {
            "type": "boolean",
            "description": "Indicates if the role is allowed to share the alert comment type with the booking source.\n            "
          }
        }
      },
      "IJsonResponseOfReserveFlightsSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ReserveFlightsSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ReserveFlightsSettings": {
        "type": "object",
        "description": "The booking reserve flight settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "availabilityDepartureTimeLimit": {
            "type": "string",
            "description": "Time limit for availability departure from current date and time.\n            ",
            "format": "duration"
          },
          "availabilityMaxDaysOut": {
            "type": "string",
            "description": "Time indicating when flights cannot depart or return from current date and time.\n            ",
            "format": "duration"
          },
          "sellDepartureTimeLimit": {
            "type": "string",
            "description": "Time indicating when flights cannot be booked/sold from current date and time.\n            ",
            "format": "duration"
          },
          "availableSpaceDisplayMax": {
            "type": "integer",
            "description": "The maximum available seats displayed.\n            ",
            "format": "int32"
          },
          "flightTimeChangeToleranceMinutes": {
            "type": "integer",
            "description": "Number of flight time change tolerance minutes.\n            ",
            "format": "int32"
          },
          "viewCapacity": {
            "type": "boolean",
            "description": "Flag indicating if whether the agent is allowed to view aircraft capacity.\n            "
          },
          "viewLidSold": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to view aircraft lid and seats sold counts.\n            "
          },
          "viewSsrAvailability": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to view ssr availability.\n            "
          },
          "viewManifestControl": {
            "description": "Indicator whether the agent is allowed to view manifest.\n            ",
            "$ref": "#/components/schemas/ViewManifestControl"
          },
          "adHocFlightControl": {
            "description": "Indicator on permissions for AdHoc flight operations.\n            ",
            "$ref": "#/components/schemas/AdHocFlightControl"
          },
          "allowSellOverbook": {
            "description": "Indicator whether the agent is allowed to overbook except on moves.\n            ",
            "$ref": "#/components/schemas/OverbookControl"
          },
          "allowMoveOverbook": {
            "description": "Indicator whether the agent is allowed to overbook on move only.\n            ",
            "$ref": "#/components/schemas/OverbookControl"
          },
          "allowUpgradeOverbook": {
            "description": "Indicator whether the agent is allowed to overbook on upgrade only.\n            ",
            "$ref": "#/components/schemas/OverbookControl"
          },
          "allowSplitJourneyMoves": {
            "type": "boolean",
            "description": "Flag indicating whether the agent allows split-journey moves.\n            "
          },
          "allowMove": {
            "description": "Indicator whether the agent is allowed to move a passenger from a flight to another without repricing.\n            ",
            "$ref": "#/components/schemas/MoveFlightCode"
          },
          "moveByMaximumClassAvailability": {
            "type": "boolean",
            "description": "Flag indicating if move by maximum class availability.\n            "
          },
          "requireSameCityPairOnMoves": {
            "type": "boolean",
            "description": "Flag indicating if same city pairs are required on move.\n            "
          },
          "maxMoveDaysForward": {
            "type": "string",
            "description": "They number of days that are allowed to move forward.\n            ",
            "format": "duration"
          },
          "maxMoveDaysBack": {
            "type": "string",
            "description": "The number of days that are allowed to move backwards.\n            ",
            "format": "duration"
          },
          "daysBeforeIrop": {
            "type": "string",
            "description": "The number of days before IROP.\n            ",
            "format": "duration"
          },
          "allowFareOverride": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to override the fare.\n            "
          },
          "allowClosedFlightFareOverride": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to override the fare of a closed or flown flight.\n            "
          },
          "allowFareOverrideDuringDivide": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to override the fare of a closed or flown flight.\n            "
          },
          "allowIgnoreRestrictions": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to ignore fare restrictions on end record.\n            "
          },
          "allowInvalidPriceStatus": {
            "type": "boolean",
            "description": "Flag indicating whether the agent is allowed to End record with an invalid price.\n            "
          },
          "cancelDepartureTimeLimit": {
            "type": "string",
            "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.\n            ",
            "format": "duration"
          },
          "seatAssignmentTimeLimit": {
            "type": "string",
            "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.\n            ",
            "format": "duration"
          },
          "allowUpgrade": {
            "type": "boolean",
            "description": "Flag indicating if upgrades are allowed.\n            "
          },
          "allowCreateAdhocConnect": {
            "type": "boolean",
            "description": "Flag indicating if AdHoc is allowed.\n            "
          },
          "minimumTimeBetweenFlightsEnforcement": {
            "type": "boolean",
            "description": "Flag indicating whether the minimum time between flights setting timespan is to be enforced.\n            "
          },
          "upgradeDepartureTimeLimit": {
            "type": "string",
            "description": "Denotes the time before departure when an agent can no longer change/cancel a flight.\n            ",
            "format": "duration"
          },
          "upgradeCabinStartOffset": {
            "type": "string",
            "description": "Denotes the time before departure the agent can start offering cabin upgrades.\n            ",
            "format": "duration"
          },
          "minimumTimeBetweenFlights": {
            "type": "string",
            "description": "Denotes the minimum time between flights allowed.\n            ",
            "format": "duration"
          },
          "modifyPassiveSegmentTimes": {
            "type": "boolean",
            "description": "Flag indicating whether or not flight times on unmanaged records are overwritten.\n            "
          },
          "allowSellOfFlightOverlap": {
            "type": "boolean",
            "description": "Flag indicating whether or not to support selling of overlapping flights across all booking channels.\n            "
          },
          "availabilityMaxDate": {
            "type": "string",
            "description": "Cannot book flights whose departure or return date exceeds date.\n            ",
            "format": "date-time"
          },
          "allowedFareOverrideType": {
            "description": "Controls which type of fare overrides are allowed by a role.\n            ",
            "$ref": "#/components/schemas/AllowedFareOverrideType"
          },
          "allowMoveOnInitialBooking": {
            "type": "boolean",
            "description": "Flag indicating whether or not to allow a trip move for the initial (non-committed) booking.\n            "
          },
          "allowDowngrade": {
            "type": "boolean",
            "description": "Flag indicating if downgrades are allowed.\n            "
          },
          "allowDowngradeOverbook": {
            "description": "Indicates if the agent is allowed to overbook when downgrading a class of service.\n            ",
            "$ref": "#/components/schemas/OverbookControl"
          },
          "allowRestoreOverbook": {
            "description": "Indicates if the agent is allowed to overbook when restoring a class of service.\n            ",
            "$ref": "#/components/schemas/OverbookControl"
          }
        }
      },
      "ViewManifestControl": {
        "type": "integer",
        "description": "Desfines the view manifest control options.\n            \n\n0 = None\n1 = StandbyOnly\n2 = Full",
        "x-enumNames": [
          "None",
          "StandbyOnly",
          "Full"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AdHocFlightControl": {
        "type": "integer",
        "description": "Defines the permissions for AdHoc flight operations.\n            \n\n0 = None\n1 = View\n2 = Sell",
        "x-enumNames": [
          "None",
          "View",
          "Sell"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OverbookControl": {
        "type": "integer",
        "description": "Defines the access rights to overbook.\n            \n\n0 = CannotOverbook\n1 = CanOverbookClass\n2 = CanOverbookNest\n3 = CanOverbookLeg",
        "x-enumNames": [
          "CannotOverbook",
          "CanOverbookClass",
          "CanOverbookNest",
          "CanOverbookLeg"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "MoveFlightCode": {
        "type": "integer",
        "description": "Defines the move flight\n            \n\n0 = NotAllowed\n1 = AllowedOnInventory\n2 = Allowed",
        "x-enumNames": [
          "NotAllowed",
          "AllowedOnInventory",
          "Allowed"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AllowedFareOverrideType": {
        "type": "integer",
        "description": "Enumeration representing which type of fare overrides are allowed by a role.\n            \n\n0 = DiscountedPrice\n1 = PublishedPrice\n2 = All",
        "x-enumNames": [
          "DiscountedPrice",
          "PublishedPrice",
          "All"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfPassengerSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerSettings": {
        "type": "object",
        "description": "The booking passenger settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerTitle": {
            "description": "Passenger title field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerFirstName": {
            "description": "Passenger first name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerMiddleName": {
            "description": "Passenger middle name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerLastName": {
            "description": "Passenger last name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerSuffix": {
            "description": "Passenger suffix field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerCustomerNumber": {
            "description": "Passenger customer number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerGender": {
            "description": "Passenger gender field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerDateOfBirth": {
            "description": "Passenger date of birth field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerNationality": {
            "description": "Passenger nationality field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerResidentCountry": {
            "description": "Passenger resident country field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantTitle": {
            "description": "Infant title field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantFirstName": {
            "description": "Infant first name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantMiddleName": {
            "description": "Infant middle name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantLastName": {
            "description": "Infant last name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantSuffix": {
            "description": "Infant suffix field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantGender": {
            "description": "Infant gender field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantDateOfBirth": {
            "description": "Infant date of birth field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantNationality": {
            "description": "Infant nationality field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantResidentCountry": {
            "description": "Infant resident country field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "tbaPassengersAllowed": {
            "description": "TBA passenger will allow users to enter passengers with information \"To Be Determined\".\n            ",
            "$ref": "#/components/schemas/TbaPassengersAllowed"
          },
          "allowCustomerProgram": {
            "type": "boolean",
            "description": "Flag to indicate if passenger customer programs are allowed.\n            "
          },
          "allowNameChange": {
            "type": "boolean",
            "description": "Flag to indicate if passenger name changes are allowed.\n            "
          },
          "maskedGdprSettings": {
            "description": "GDPR related settings that are masked.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerGdprSettings"
          }
        }
      },
      "TbaPassengersAllowed": {
        "type": "integer",
        "description": "Defines the TBA passengers allowed enumeration.\n            \n\n0 = Never\n1 = IfFirstPassengerIsKnown\n2 = Always",
        "x-enumNames": [
          "Never",
          "IfFirstPassengerIsKnown",
          "Always"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PassengerGdprSettings": {
        "type": "object",
        "description": "The GDPR related settings for the passenger role settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "travelDocumentInformation": {
            "type": "boolean",
            "description": "Flag to indicate if the passenger travel document information is masked.\n            "
          },
          "travelDocumentDetails": {
            "type": "boolean",
            "description": "Flag to indicate if the passenger travel document details is masked.\n            "
          },
          "otherAirlineFrequentFlyer": {
            "type": "boolean",
            "description": "Flag to indicate if the passenger OA frequent flyer is masked.\n            "
          },
          "ssrNotes": {
            "type": "boolean",
            "description": "Flag to indicate if the passenger SSR notes are masked.\n            "
          },
          "addressTypes": {
            "type": "array",
            "description": "The list of address types that are masked.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApisAddressStatus"
            }
          },
          "travelNotificationDeliveryAddress": {
            "type": "boolean",
            "description": "Flag to indicate if the passenger travel notification delivery address is masked.\n            "
          }
        }
      },
      "DeltaMapperOfPassengerSettings": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerTitle": {
            "description": "Passenger title field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerFirstName": {
            "description": "Passenger first name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerMiddleName": {
            "description": "Passenger middle name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerLastName": {
            "description": "Passenger last name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerSuffix": {
            "description": "Passenger suffix field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerCustomerNumber": {
            "description": "Passenger customer number field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerGender": {
            "description": "Passenger gender field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerDateOfBirth": {
            "description": "Passenger date of birth field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerNationality": {
            "description": "Passenger nationality field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "passengerResidentCountry": {
            "description": "Passenger resident country field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantTitle": {
            "description": "Infant title field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantFirstName": {
            "description": "Infant first name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantMiddleName": {
            "description": "Infant middle name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantLastName": {
            "description": "Infant last name field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantSuffix": {
            "description": "Infant suffix field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantGender": {
            "description": "Infant gender field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantDateOfBirth": {
            "description": "Infant date of birth field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantNationality": {
            "description": "Infant nationality field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "infantResidentCountry": {
            "description": "Infant resident country field validation control.\n            ",
            "$ref": "#/components/schemas/FieldControlType"
          },
          "tbaPassengersAllowed": {
            "description": "TBA passenger will allow users to enter passengers with information \"To Be Determined\".\n            ",
            "$ref": "#/components/schemas/TbaPassengersAllowed"
          },
          "allowCustomerProgram": {
            "type": "boolean",
            "description": "Flag to indicate if passenger customer programs are allowed.\n            "
          },
          "allowNameChange": {
            "type": "boolean",
            "description": "Flag to indicate if passenger name changes are allowed.\n            "
          },
          "maskedGdprSettings": {
            "description": "GDPR related settings that are masked.\n            ",
            "nullable": true,
            "properties": {
              "travelDocumentInformation": {
                "type": "boolean",
                "description": "Flag to indicate if the passenger travel document information is masked.\n            "
              },
              "travelDocumentDetails": {
                "type": "boolean",
                "description": "Flag to indicate if the passenger travel document details is masked.\n            "
              },
              "otherAirlineFrequentFlyer": {
                "type": "boolean",
                "description": "Flag to indicate if the passenger OA frequent flyer is masked.\n            "
              },
              "ssrNotes": {
                "type": "boolean",
                "description": "Flag to indicate if the passenger SSR notes are masked.\n            "
              },
              "addressTypes": {
                "type": "array",
                "description": "The list of address types that are masked.\n            ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApisAddressStatus"
                }
              },
              "travelNotificationDeliveryAddress": {
                "type": "boolean",
                "description": "Flag to indicate if the passenger travel notification delivery address is masked.\n            "
              }
            }
          }
        }
      },
      "IJsonResponseOfPaymentSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PaymentSettings": {
        "type": "object",
        "description": "The payment settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "defaultCommentForCreditShell": {
            "type": "string",
            "description": "Hold the default comment that will be applied for a credit shell payment.\n            ",
            "nullable": true
          },
          "webDeclinedPaymentHoldPeriod": {
            "type": "integer",
            "description": "Web declined payment hold period.\n            ",
            "format": "int32"
          },
          "directDeclinedPaymentHoldPeriod": {
            "type": "integer",
            "description": "Direct declined payment hold period.\n            ",
            "format": "int32"
          },
          "gdsDeclinedPaymentHoldPeriod": {
            "type": "integer",
            "description": "GDS declined payment hold period.\n            ",
            "format": "int32"
          },
          "apiDeclinedPaymentHoldPeriod": {
            "type": "integer",
            "description": "API declined payment hold period.\n            ",
            "format": "int32"
          },
          "autoCancelChargeBackPaymentHolds": {
            "type": "boolean",
            "description": "Auto cancel charge back payment holds.\n            "
          },
          "allowZeroAmountFormOfPayment": {
            "type": "boolean",
            "description": "Allow zero amount form of payment.\n            "
          },
          "includeInFirstInstallmentFeeCodes": {
            "type": "array",
            "description": "Include in first installment fee codes.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "retainHoldStatusUntilPaymentAuthorization": {
            "type": "boolean",
            "description": "Retain hold status until payment authorization.\n            "
          }
        }
      },
      "IJsonResponseOfGeneralBookingSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GeneralBookingSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "GeneralBookingSettings": {
        "type": "object",
        "description": "Settings for the general booking settings that are not role specific.\n            ",
        "additionalProperties": false,
        "properties": {
          "maximumAgeForInfantInLap": {
            "type": "integer",
            "description": "The maximum age (in months) for the infant-in-lap.\n            ",
            "format": "int32"
          },
          "useDirectCurrencyConversion": {
            "type": "boolean",
            "description": "If true, the direct currency conversion is being used instead to the default inverse calculation.\n            "
          },
          "clearInfantDetailsWhenInfantInLapIsDeleted": {
            "type": "boolean",
            "description": "If true, the infant details are cleared when an infant in lap is deleted from a passenger.\n            "
          },
          "mixedClassRouteFaresEnabled": {
            "type": "boolean",
            "description": "If true, the RBD functionality is enabled in the booking flow.\n            "
          },
          "sumOfSectorFaresEnabled": {
            "type": "boolean",
            "description": "If true, the the sum-of-sectors fares are enabled for the current environment.\n            "
          },
          "sumOfSectorProductClassPreCompression": {
            "type": "boolean",
            "description": "If true, the the sum-of-sectors faring logic will pre-compress the set of available fares for\neach segment by product class prior to considering all possible combinations of those fares\nagainst the journey.\n            "
          },
          "sellSeatSsrBeforeAssignment": {
            "type": "boolean",
            "description": "If true, a seat dependent ssr can be sold before a seat assignment is made.\n            "
          },
          "applyAllUpPricingGlobally": {
            "type": "boolean",
            "description": "If true, this is equivalent to setting the 'Include sales tax and travel fees to the\nfare price at availability' setting on all markets.  The user's role setting may still\noverride this.  This may also be overridden on a per-request basis in the availability\nrequest.\n            "
          },
          "repriceWhenCustomerProgramIsChanged": {
            "type": "boolean",
            "description": "If true, changing a passenger's customer program will trigger an immediate re-price step\neven if no other passenger details were changed.  Changing other pricing-sensitive passenger\ncriteria such as the passenger's type code or discount code will always trigger an immediate\nre-price step regardless of this setting.\n            "
          },
          "recalculateHoldWithBookingChanges": {
            "type": "boolean",
            "description": "If true, the hold time will be restarted (i.e. reset) when the first un-flown host segment/journey\nis modified in the booking.\n            "
          },
          "preventCommitBookingWithCancelledInventory": {
            "type": "boolean",
            "description": "If true, a booking commit will not be allowed for a booking with cancelled inventory.\n            "
          },
          "defaultCarrierCode": {
            "type": "string",
            "description": "The default carrier code for the current environment.\n            ",
            "nullable": true
          },
          "defaultBookingSubQueueCode": {
            "type": "string",
            "description": "The default booking sub-queue code for the current environment.\n            ",
            "nullable": true
          },
          "maximumNumberOfMarkets": {
            "type": "integer",
            "description": "The maximum number of city pairs or journeys that will be supported during a search\n(multi-city shopping mode).\n            ",
            "format": "int32"
          },
          "interlineHoldBeforeDeparture": {
            "type": "integer",
            "description": "The hold time in minutes when host flights are booked by external source in conjunction with\nother airline (OA) flights.\n            ",
            "format": "int32"
          },
          "warningTimeBeforeHoldCancel": {
            "type": "integer",
            "description": "Indicates how long in hours before a hold expires that a notification will be sent.\n            ",
            "format": "int32"
          },
          "interlineConnectionPartners": {
            "type": "string",
            "description": "Indicates the carrier codes of interline partners that can form an interline connection\nin a booking.\n            ",
            "nullable": true
          },
          "applyFareForInLapInfantWithPassengerType": {
            "type": "string",
            "description": "If this value is empty, an ssr fee will be added for an infant in lap.  If this has a valid\npassenger type code, a fare for the in-lap infant will be added using the specified passenger\ntype code.  Note that when this is set, the value of TaxInfantSSRAsFareWithPassengerType is\nno longer used.\n            ",
            "nullable": true
          },
          "validateMaximumAgeBy": {
            "type": "string",
            "description": "Indicates whether to validate the maximum age by booking date or on the first non-passive segment on the booking\n            ",
            "nullable": true
          },
          "validateMinimumAgeBy": {
            "type": "string",
            "description": "Indicates whether to validate the minimum age by the first or last non-passive segment on the booking.\n            ",
            "nullable": true
          },
          "indiaGstRegistrationContactType": {
            "type": "string",
            "description": "The contact type to use for India GST registration details.\n            ",
            "nullable": true
          },
          "enforceStandardGroupBooking": {
            "type": "boolean",
            "description": "Indicates if standard group bookings are enforced.\n            "
          },
          "storeConfirmingWaivedFees": {
            "type": "boolean",
            "description": "Indicates if waived fees in the confirming state are kept as part of the booking data when being overridden.\n            "
          }
        }
      },
      "IJsonResponseOfLoyaltySettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LoyaltySettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "LoyaltySettings": {
        "type": "object",
        "description": "Loyalty settings\n            ",
        "additionalProperties": false,
        "properties": {
          "defaultLoyaltyCustomerProgramCode": {
            "type": "string",
            "description": "The default loyalty customer program code.\n            ",
            "nullable": true
          },
          "useCustomerNumberForLoyaltyPayments": {
            "type": "boolean",
            "description": "The flag whether to use customer number for loyalty payments.\n            "
          },
          "autoEnrollment": {
            "description": "The loyalty auto enrollment, if it is enabled and if so which method is in use.\n            ",
            "$ref": "#/components/schemas/LoyaltyAutoEnrollment"
          }
        }
      },
      "LoyaltyAutoEnrollment": {
        "type": "integer",
        "description": "Defines the loyalty auto enrollment setting.\n            \n\n0 = None\n1 = Always\n2 = Auto\n3 = AutoCreate",
        "x-enumNames": [
          "None",
          "Always",
          "Auto",
          "AutoCreate"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfPhoneNumberValidationSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PhoneNumberValidationSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PhoneNumberValidationSettings": {
        "type": "object",
        "description": "Represents the settings for phone number validation.\n            ",
        "additionalProperties": false,
        "properties": {
          "displayText": {
            "type": "string",
            "description": "The display text that describes the required format.\nExample: (###) ###-####\n            ",
            "nullable": true
          },
          "validationType": {
            "description": "The validation method used.\n            ",
            "$ref": "#/components/schemas/PhoneNumberValidationType"
          },
          "validationRequirements": {
            "type": "array",
            "description": "The list of values that determines if a phone number is a valid.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PhoneNumberValidationType": {
        "type": "integer",
        "description": "Phone number validation mode enumeration.\n            \n\n0 = None\n1 = FixedDigits\n2 = StringPattern",
        "x-enumNames": [
          "None",
          "FixedDigits",
          "StringPattern"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfETicketConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketConfiguration"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ETicketConfiguration": {
        "type": "object",
        "description": "The e-ticket-related configuration data.\n            ",
        "additionalProperties": false,
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Indicates if the configuration is active or inactive.\n            "
          },
          "code": {
            "type": "string",
            "description": "The configuration code.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The configuration description.\n            ",
            "nullable": true
          },
          "messageContent": {
            "description": "The message content configuration data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageContent"
          },
          "messageDelivery": {
            "description": "The message delivery configuration data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MessageDelivery"
          },
          "issuingCarrier": {
            "type": "string",
            "description": "The issuing carrier of the e-ticket.\n            ",
            "nullable": true
          },
          "eTicketPointOfSale": {
            "description": "The point of sale configuration data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ETicketPointOfSale"
          }
        }
      },
      "MessageContent": {
        "type": "object",
        "description": "The configuration data for e-ticketing message content.\n            ",
        "additionalProperties": false,
        "properties": {
          "ticketSettings": {
            "description": "The ticket settings.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TicketSettings"
          },
          "couponSettings": {
            "description": "The coupon settings.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CouponSettings"
          },
          "applyDualTvlForCodeShareFlights": {
            "type": "boolean",
            "description": "Controls the format of code share flights in e-ticket issue and reissue messages.\n            "
          }
        }
      },
      "TicketSettings": {
        "type": "object",
        "description": "The ticket level settings for the e-ticket message content.\n            ",
        "additionalProperties": false,
        "properties": {
          "applyInvoluntaryIndicatorForETicketFareCalculation": {
            "type": "boolean",
            "description": "Indicates if an involuntary indicator will be included in the fare calculation as part of the ticketing message for\ninvoluntary reissue requests.\n            "
          },
          "includeOriginalIssueDataOnETicketIssue": {
            "type": "boolean",
            "description": "Indicates if the original issue data will be included in the e-ticket issue request.\n            "
          },
          "reissueAllUnusedCoupons": {
            "type": "boolean",
            "description": "If set to true, all unflown segment ticket coupons are reissued during involuntary reissue.\nOtherwise, only unflown segment ticket coupons caused by schedule change or re-accommodations and impacted coupons\nwill be reissued.\n            "
          },
          "useCityCodeForFareCalculationAndOdi": {
            "type": "boolean",
            "description": "If set to true, the fare calculation will be generated using the configured city code for the station code.\n            "
          },
          "endorsementComment": {
            "description": "The issue and reissue endorsement comment.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EndorsementComment"
          },
          "baseFareRoundingUnits": {
            "type": "array",
            "description": "The collection of base fare currency codes and rounding units.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BaseFareRoundingUnit"
            }
          }
        }
      },
      "EndorsementComment": {
        "type": "object",
        "description": "The configuration data for generating endorsement comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "voluntaryReissueComment": {
            "type": "string",
            "description": "The issue (EDIFACT #130) and reissue (EDIFACT #134) ticketing message in the IFT 4:10 segment when e-tickets\nare issued and/or reissued for voluntary transactions.\n            ",
            "nullable": true
          },
          "voluntaryEndorsementRuleSet": {
            "type": "string",
            "description": "The outbound rule set that will be evaluated to generate the endorsement comment.\n            ",
            "nullable": true
          },
          "involuntaryReissueComment": {
            "type": "string",
            "description": "The reissue (EDIFACT #134) ticketing message in the IFT 4:10 segment when e-tickets are reissued for involuntary\ntransactions.\n            ",
            "nullable": true
          }
        }
      },
      "BaseFareRoundingUnit": {
        "type": "object",
        "description": "The currency code and rounding unit configuration for e-tickets.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "roundingUnit": {
            "type": "string",
            "description": "The rounding unit.\n            ",
            "nullable": true
          }
        }
      },
      "CouponSettings": {
        "type": "object",
        "description": "The coupon level settings for the e-ticket message content.\n            ",
        "additionalProperties": false,
        "properties": {
          "applyFareDiscountToInfant": {
            "type": "boolean",
            "description": "If true, the infant will inherit the fare discount code of the adult and append the fare discount code with\n'IN'. Otherwise, the lap infant designator will contain 'IN' plus the percentage of discount applied from the\npublished fare (ex. IN90).\n            "
          },
          "bagQuantity": {
            "type": "integer",
            "description": "The number of bags allowed per passenger.\n            ",
            "format": "int32"
          }
        }
      },
      "MessageDelivery": {
        "type": "object",
        "description": "The configuration data for e-ticketing message delivery.\n            ",
        "additionalProperties": false,
        "properties": {
          "applicationReference": {
            "type": "string",
            "description": "The application reference.\n            ",
            "nullable": true
          },
          "routeIp": {
            "type": "string",
            "description": "The IP address and port number where the message will be routed.\n            ",
            "nullable": true
          },
          "layer5ReferenceCode": {
            "type": "string",
            "description": "The code used to determine the target system where the message will be sent.\n            ",
            "nullable": true
          },
          "interchangeHeader": {
            "description": "The message header data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InterchangeHeader"
          }
        }
      },
      "InterchangeHeader": {
        "type": "object",
        "description": "The configuration data for the message delivery interchange header.\n            ",
        "additionalProperties": false,
        "properties": {
          "characterSet": {
            "description": "The character set used as delimiter for ticketing requests.\n            ",
            "$ref": "#/components/schemas/CharacterSet"
          },
          "receiver": {
            "description": "The next-hop or receiving system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InterchangeSystem"
          },
          "sender": {
            "description": "The sending system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/InterchangeSystem"
          },
          "version": {
            "description": "The EDIFACT version for ticketing requests.\n            ",
            "$ref": "#/components/schemas/EdifactVersion"
          }
        }
      },
      "CharacterSet": {
        "type": "integer",
        "description": "Defines the list of supported character set used as delimiter by e-ticket parsers.\n            \n\n0 = Iata\n1 = Iatb",
        "x-enumNames": [
          "Iata",
          "Iatb"
        ],
        "enum": [
          0,
          1
        ]
      },
      "InterchangeSystem": {
        "type": "object",
        "description": "The configuration data for the message delivery interchange system.\n            ",
        "additionalProperties": false,
        "properties": {
          "systemCode": {
            "type": "string",
            "description": "The IATA-assigned system code for the sending or receiving system.\n            ",
            "nullable": true
          },
          "systemCodeQualifier": {
            "type": "string",
            "description": "The code qualifier of the sending or receiving system.\n            ",
            "nullable": true
          },
          "routingAddress": {
            "type": "string",
            "description": "The routing address.\n            ",
            "nullable": true
          }
        }
      },
      "EdifactVersion": {
        "type": "integer",
        "description": "Defines the list of supported EDIFACT version for ticketing requests.\n            \n\n0 = Unknown\n1 = Version032\n2 = Version081",
        "x-enumNames": [
          "Unknown",
          "Version032",
          "Version081"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ETicketPointOfSale": {
        "type": "object",
        "description": "The configuration data for e-ticketing point of sale.\n            ",
        "additionalProperties": false,
        "properties": {
          "deliveringSystem": {
            "description": "The delivering system.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DeliveringSystem"
          },
          "originator": {
            "description": "The originator details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OriginatorDetails"
          },
          "system": {
            "description": "The system details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SystemDetails"
          }
        }
      },
      "DeliveringSystem": {
        "type": "object",
        "description": "The configuration data for the e-ticket point of sale delivering system.\n            ",
        "additionalProperties": false,
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "The airline code of the system that delivers the message.\nCan also be referred to as Company Identifier.\n            ",
            "nullable": true
          },
          "companyIdNumber": {
            "type": "string",
            "description": "The company ID number.\n            ",
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "The station code of the delivering system's physical location.\nCan also be referred to as Place Location Identifier or Location Code.\n            ",
            "nullable": true
          }
        }
      },
      "OriginatorDetails": {
        "type": "object",
        "description": "The configuration data for the e-ticket point of sale originator details.\n            ",
        "additionalProperties": false,
        "properties": {
          "authorityRequestCode": {
            "type": "string",
            "description": "The authority request code.\n            ",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "nullable": true
          },
          "inHouseAuthorityCode": {
            "type": "string",
            "description": "The authority code or reference number assigned to the requester.\n            ",
            "nullable": true
          },
          "travelAgentCode": {
            "type": "string",
            "description": "The booking agent IATA number.\n            ",
            "nullable": true
          }
        }
      },
      "SystemDetails": {
        "type": "object",
        "description": "The configuration data for the e-ticket point of sale system details.\n            ",
        "additionalProperties": false,
        "properties": {
          "originatorType": {
            "type": "string",
            "description": "The originator type.\n            ",
            "nullable": true
          },
          "stationCode": {
            "type": "string",
            "description": "The station code of the system that initiates the message.\nCan also be referred to as Place Location Identifier or Location Code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfShoppingAttributeGroup": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ShoppingAttributeGroup"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ShoppingAttributeGroup": {
        "type": "object",
        "description": "Model for a shopping attribute groups.\n            ",
        "additionalProperties": false,
        "required": [
          "shoppingAttributeGroupCode"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this shopping attribute group.\n            "
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description for this shopping attribute group.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name for this shopping attribute group.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "shoppingAttributeGroupCode": {
            "type": "string",
            "description": "Gets or sets the code for this shopping attribute group.\n            ",
            "maxLength": 8,
            "minLength": 0
          }
        }
      },
      "IJsonResponseOfShoppingAttributeGroup": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ShoppingAttributeGroup"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfShoppingAttribute": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ShoppingAttribute"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ShoppingAttribute": {
        "type": "object",
        "description": "Model for a shopping attribute.\n            ",
        "additionalProperties": false,
        "required": [
          "shoppingAttributeCode"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the flag for inactive for this shopping attribute.\n            "
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of this shopping attribute.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this shopping attribute.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "shoppingAttributeCode": {
            "type": "string",
            "description": "Gets or sets the code of this shopping attribute.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "shoppingAttributeGroupCodes": {
            "type": "array",
            "description": "Gets or sets the list of group codes associated with this shopping attribute.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "shoppingAttributeType": {
            "description": "Gets or sets the type of this shopping attribute.\n            ",
            "$ref": "#/components/schemas/ShoppingAttributeType"
          }
        }
      },
      "ShoppingAttributeType": {
        "type": "integer",
        "description": "Enumeration for shopping attribute types.\n            \n\n0 = None\n1 = Destination\n2 = Region\n3 = Event",
        "x-enumNames": [
          "None",
          "Destination",
          "Region",
          "Event"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfShoppingAttribute": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ShoppingAttribute"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfSsrGroup": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrGroup"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SsrGroup": {
        "type": "object",
        "description": "The sell service request (SSR) group model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrGroupCode": {
            "type": "string",
            "description": "The SSR group Code.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "ssrs": {
            "type": "array",
            "description": "The Collection of SSRs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrGroupItem"
            }
          }
        }
      },
      "SsrGroupItem": {
        "type": "object",
        "description": "The SSR group SSR model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrGroupCode": {
            "type": "string",
            "description": "The SSR group Code.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "The SSR Code.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfSsrGroup": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrGroup"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfSsrNest": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrNest"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SsrNest": {
        "type": "object",
        "description": "The SSR nest model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrNestCode": {
            "type": "string",
            "description": "The SSR nest code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "ssrs": {
            "type": "array",
            "description": "The SSR.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Ssr"
            }
          }
        }
      },
      "IJsonResponseOfSsrNest": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrNest"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfSsrRestrictionResult": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SsrRestrictionResult"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SsrRestrictionResult": {
        "type": "object",
        "description": "The SSR Restriction Result model.\n            ",
        "additionalProperties": false,
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this model.\n            "
          },
          "ssrRestrictionResultCode": {
            "type": "string",
            "description": "Gets or sets the code for this model\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name for this model.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfSsrRestrictionResult": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SsrRestrictionResult"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfSsr": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Ssr"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfSsr": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Ssr"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfStandByPriority": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StandByPriority"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "StandByPriority": {
        "type": "object",
        "description": "The stand by priority model.\n            ",
        "additionalProperties": false,
        "properties": {
          "standByPriorityCode": {
            "type": "string",
            "description": "The priority code.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "the name.\n            ",
            "nullable": true
          },
          "priorityCategory": {
            "type": "string",
            "description": "the priority category\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "the in active.\n            "
          }
        }
      },
      "IJsonResponseOfStandByPriority": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/StandByPriority"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfStationCategory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StationCategory"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "StationCategory": {
        "type": "object",
        "description": "The station category model.\n            ",
        "additionalProperties": false,
        "properties": {
          "stationCategoryCode": {
            "type": "string",
            "description": "The station category code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "THe in active.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "Deprecated - Please use api/nsk/v1/settings/general/codes endpoint to verify role based access instead.\n            "
          }
        }
      },
      "IJsonResponseOfStationCategory": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/StationCategory"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfStation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Station"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CreateStationRequest": {
        "type": "object",
        "description": "Defines the create station request.\n            ",
        "additionalProperties": false,
        "required": [
          "inActive",
          "fullName",
          "shortName",
          "currencyCode",
          "cultureCode",
          "latitude",
          "longitude",
          "zoneCode",
          "subZoneCode",
          "countryCode",
          "cityCode",
          "timeZoneCode",
          "weightType",
          "stationCode"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the station is inactive.\n            "
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code for the station.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full display name.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "shortName": {
            "type": "string",
            "description": "The short display name.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "macCode": {
            "type": "string",
            "description": "The MAC (Multiple Airport Code) code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The default currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "conversionCurrencyCode": {
            "type": "string",
            "description": "The configured conversion currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0
          },
          "stationClass": {
            "type": "string",
            "description": "The configured class.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "latitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "longitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 11,
            "minLength": 0
          },
          "zoneCode": {
            "type": "string",
            "description": "The geographical location code (i.e. North America, Europe).\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "subZoneCode": {
            "type": "string",
            "description": "The sub zone code based on the geographical location (i.e. USA, Canada).\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "countryCode": {
            "type": "string",
            "description": "The country code the station exists in.\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "provinceStateCode": {
            "type": "string",
            "description": "The province or state the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "The city the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "timeZoneCode": {
            "type": "string",
            "description": "The configured timezone of the station.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "thirdPartyControlled": {
            "type": "boolean",
            "description": "The flag indicating if the station is controlled via a third party.\n            "
          },
          "weightType": {
            "description": "The configured weight units of measurement.\n            ",
            "$ref": "#/components/schemas/WeightType"
          },
          "stationCode": {
            "type": "string",
            "description": "The station unique code.\n            ",
            "maxLength": 3,
            "minLength": 3
          }
        }
      },
      "UpdateStationRequest": {
        "type": "object",
        "description": "Defines the update station request.\n            ",
        "additionalProperties": false,
        "required": [
          "inActive",
          "fullName",
          "shortName",
          "currencyCode",
          "cultureCode",
          "latitude",
          "longitude",
          "zoneCode",
          "subZoneCode",
          "countryCode",
          "cityCode",
          "timeZoneCode",
          "weightType"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the station is inactive.\n            "
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code for the station.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full display name.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "shortName": {
            "type": "string",
            "description": "The short display name.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "macCode": {
            "type": "string",
            "description": "The MAC (Multiple Airport Code) code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The default currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "conversionCurrencyCode": {
            "type": "string",
            "description": "The configured conversion currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0
          },
          "stationClass": {
            "type": "string",
            "description": "The configured class.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "latitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "longitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 11,
            "minLength": 0
          },
          "zoneCode": {
            "type": "string",
            "description": "The geographical location code (i.e. North America, Europe).\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "subZoneCode": {
            "type": "string",
            "description": "The sub zone code based on the geographical location (i.e. USA, Canada).\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "countryCode": {
            "type": "string",
            "description": "The country code the station exists in.\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "provinceStateCode": {
            "type": "string",
            "description": "The province or state the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "The city the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "timeZoneCode": {
            "type": "string",
            "description": "The configured timezone of the station.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "thirdPartyControlled": {
            "type": "boolean",
            "description": "The flag indicating if the station is controlled via a third party.\n            "
          },
          "weightType": {
            "description": "The configured weight units of measurement.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "DeltaMapperOfUpdateStationRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "The flag indicating if the station is inactive.\n            "
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code for the station.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full display name.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "shortName": {
            "type": "string",
            "description": "The short display name.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "macCode": {
            "type": "string",
            "description": "The MAC (Multiple Airport Code) code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The default currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "conversionCurrencyCode": {
            "type": "string",
            "description": "The configured conversion currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0
          },
          "stationClass": {
            "type": "string",
            "description": "The configured class.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1
          },
          "latitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "longitude": {
            "type": "string",
            "description": "The coordinates of the station.\n            ",
            "maxLength": 11,
            "minLength": 0
          },
          "zoneCode": {
            "type": "string",
            "description": "The geographical location code (i.e. North America, Europe).\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "subZoneCode": {
            "type": "string",
            "description": "The sub zone code based on the geographical location (i.e. USA, Canada).\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "countryCode": {
            "type": "string",
            "description": "The country code the station exists in.\n            ",
            "maxLength": 2,
            "minLength": 0
          },
          "provinceStateCode": {
            "type": "string",
            "description": "The province or state the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "The city the station exists in.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "timeZoneCode": {
            "type": "string",
            "description": "The configured timezone of the station.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "thirdPartyControlled": {
            "type": "boolean",
            "description": "The flag indicating if the station is controlled via a third party.\n            "
          },
          "weightType": {
            "description": "The configured weight units of measurement.\n            ",
            "$ref": "#/components/schemas/WeightType"
          }
        }
      },
      "IJsonResponseOfIListOfSubZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubZone"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfSubZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SubZone"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfTimeZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TimeZone"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TimeZone": {
        "type": "object",
        "description": "The timezone model.\n            ",
        "additionalProperties": false,
        "required": [
          "timeZoneCode"
        ],
        "properties": {
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this time zone.\n            "
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this time zone.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "standardVariation": {
            "type": "integer",
            "description": "Gets or sets the standard variation of this time zone\n            "
          },
          "timeZoneCode": {
            "type": "string",
            "description": "Gets or sets the time zone code of this time zone.\n            ",
            "maxLength": 4,
            "minLength": 4
          },
          "timeZoneVariations": {
            "type": "array",
            "description": "Gets or sets a list of Time zone variations associated with this time zone.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TimeZoneVariation"
            }
          }
        }
      },
      "TimeZoneVariation": {
        "type": "object",
        "description": "The time zone variation model.\n            ",
        "additionalProperties": false,
        "properties": {
          "endUtc": {
            "type": "string",
            "description": "Gets or sets the End UTC time variation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "startUtc": {
            "type": "string",
            "description": "Gets or sets the Start UTC time variation.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "variation": {
            "type": "integer",
            "description": "Gets or sets the variation.\n            "
          }
        }
      },
      "IJsonResponseOfTimeZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TimeZone"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfTravelClass": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelClass"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelClass": {
        "type": "object",
        "description": "This model represents the passenger summary info per cabin.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "travelClassCode": {
            "type": "string",
            "description": "Gets or sets the code for this travel class.\n            ",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name for this travel class.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "cabinOfServiceCode": {
            "type": "string",
            "description": "Gets or sets the cabin of service code for this travel class.\n            ",
            "nullable": true
          },
          "systemControlled": {
            "type": "boolean",
            "description": "Gets or sets the system controlled flag for this travel class.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag for this travel class.\n            "
          }
        }
      },
      "IJsonResponseOfTravelClass": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelClass"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfTravelerNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelerNotification"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "TravelerNotification": {
        "type": "object",
        "description": "Traveler notification model.\n            ",
        "additionalProperties": false,
        "properties": {
          "createdUserKey": {
            "type": "string",
            "description": "The created user key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date and time the object was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "notificationTypeCode": {
            "type": "string",
            "description": "Notification type code of the traveler notification.\n            ",
            "nullable": true
          },
          "modifiedUserKey": {
            "type": "string",
            "description": "The modified user key.\n            ",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date and time the object was modified.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the traveler notification.\n            ",
            "nullable": true
          },
          "deliveryMethods": {
            "type": "array",
            "description": "The list of delivery methods for the traveler notification.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelerNotificationDeliveryMethod"
            }
          }
        }
      },
      "TravelerNotificationDeliveryMethod": {
        "type": "object",
        "description": "Traveler notification delivery method model.\n            ",
        "additionalProperties": false,
        "properties": {
          "createdUserKey": {
            "type": "string",
            "description": "The created user key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date and time the object was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "notificationTypeCode": {
            "type": "string",
            "description": "Notification type code of the traveler notification.\n            ",
            "nullable": true
          },
          "modifiedUserKey": {
            "type": "string",
            "description": "The modified user key.\n            ",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date and time the object was modified.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "allowForAnonymous": {
            "type": "boolean",
            "description": "Gets or sets if the traveler notification is allowed for anonymous user.\n            "
          },
          "allowForCustomer": {
            "type": "boolean",
            "description": "Gets or sets if the traveler notification is allowed for customer.\n            "
          },
          "allowForPassenger": {
            "type": "boolean",
            "description": "Gets or sets if the traveler notification is allowed for passenger.\n            "
          },
          "deliveryMethodCode": {
            "type": "string",
            "description": "Delivery method code of the traveler notification.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets the inactive flag.\n            "
          },
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "nullable": true
          },
          "programLevel": {
            "type": "string",
            "description": "The program level.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfTravelerNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TravelerNotification"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfNotificationDeliveryMethod": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationDeliveryMethod"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "NotificationDeliveryMethod": {
        "type": "object",
        "description": "Notification delivery method model.\n            ",
        "additionalProperties": false,
        "properties": {
          "createdUserKey": {
            "type": "string",
            "description": "The created user key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date and time the object was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "notificationTypeCode": {
            "type": "string",
            "description": "Notification type code of the traveler notification.\n            ",
            "nullable": true
          },
          "modifiedUserKey": {
            "type": "string",
            "description": "The modified user key.\n            ",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date and time the object was modified.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the notification delivery method.\n            ",
            "nullable": true
          },
          "contentType": {
            "description": "The content type of the notification delivery method.\n            ",
            "$ref": "#/components/schemas/NotificationContentType"
          },
          "maximumSubscription": {
            "type": "integer",
            "description": "The maximum number of notification subscriptions allowed for this notification delivery method type.\nA number of 0 indicates no limit to the number of subscriptions allowed.\n            "
          }
        }
      },
      "NotificationContentType": {
        "type": "integer",
        "description": "Represents the notification content format type.\n            \n\n0 = XML\n1 = JSON",
        "x-enumNames": [
          "XML",
          "JSON"
        ],
        "enum": [
          0,
          1
        ]
      },
      "IJsonResponseOfIListOfTravelerNotificationDeliveryMethod": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TravelerNotificationDeliveryMethod"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfZone": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Zone"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCountryv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Countryv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Countryv2": {
        "type": "object",
        "description": "Represents the country model, version two.\n            ",
        "additionalProperties": false,
        "required": [
          "countryCode",
          "countryCode3C"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Represents the two-digit country code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "countryCode3C": {
            "type": "string",
            "description": "Represents the three-digit country code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "cities": {
            "type": "array",
            "description": "Gets or sets the list of cities in this country.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/City"
            }
          },
          "defaultCurrencyCode": {
            "type": "string",
            "description": "Gets or sets the default currency code of this country.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "hasProvinceStates": {
            "type": "boolean",
            "description": "Gets or sets whether this country has province states.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "Gets or sets whether this country is active.\n            "
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this country.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "provinceStates": {
            "type": "array",
            "description": "Gets or sets the province states for this country.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProvinceState"
            }
          }
        }
      },
      "IJsonResponseOfCountryv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Countryv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCurrencyv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Currencyv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfCurrencyv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Currencyv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfMarketv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Marketv2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Marketv2": {
        "type": "object",
        "description": "The market model, version 2.\n            ",
        "additionalProperties": false,
        "required": [
          "locationCode",
          "travelLocationCode"
        ],
        "properties": {
          "locationCode": {
            "type": "string",
            "description": "The starting location code for this market.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "earliestCheckInFrom": {
            "type": "integer",
            "description": "The earliest check in from travel location for this market.\n            ",
            "format": "int32"
          },
          "earliestCheckInTo": {
            "type": "integer",
            "description": "The earliest check in to travel location for this market.\n            ",
            "format": "int32"
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for this market.\n            "
          },
          "includesTaxesAndFees": {
            "description": "The directions where taxes and fees are included in this market.\n            ",
            "$ref": "#/components/schemas/Directionality"
          },
          "latestCheckInFrom": {
            "type": "integer",
            "description": "The latest check in from travel location for this market.\n            ",
            "format": "int32"
          },
          "latestCheckInTo": {
            "type": "integer",
            "description": "The latest check in to travel location for this market.\n            ",
            "format": "int32"
          },
          "locationType": {
            "description": "The location type of the starting location for this market.\n            ",
            "$ref": "#/components/schemas/MarketLocationType"
          },
          "travelLocationCode": {
            "type": "string",
            "description": "The ending location code for this market.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "travelLocationType": {
            "description": "The location type of the ending location for this market.\n            ",
            "$ref": "#/components/schemas/MarketLocationType"
          },
          "travelLocationsRequired": {
            "description": "The market rules for requiring travel documents for this market.\n            ",
            "$ref": "#/components/schemas/TravelLocationsRequired"
          }
        }
      },
      "MarketLocationType": {
        "type": "integer",
        "description": "Enum representing the type of location of a market point.\n            \n\n0 = Undefined\n1 = Station\n3 = Mac",
        "x-enumNames": [
          "Undefined",
          "Station",
          "Mac"
        ],
        "enum": [
          0,
          1,
          3
        ]
      },
      "TravelLocationsRequired": {
        "type": "integer",
        "description": "Enum representing when travel documents are required in a market.\n            \n\n0 = None\n1 = FromTravel\n2 = ToTravel\n3 = BothTravel",
        "x-enumNames": [
          "None",
          "FromTravel",
          "ToTravel",
          "BothTravel"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfListOfMarket": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Market"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Market": {
        "type": "object",
        "description": "The market model.\n            ",
        "additionalProperties": false,
        "required": [
          "locationCode",
          "travelLocationCode"
        ],
        "properties": {
          "locationCode": {
            "type": "string",
            "description": "The starting location code for this market.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "earliestCheckInFrom": {
            "type": "integer",
            "description": "The earliest check in from travel location for this market.\n            ",
            "format": "int32"
          },
          "earliestCheckInTo": {
            "type": "integer",
            "description": "The earliest check in to travel location for this market.\n            ",
            "format": "int32"
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for this market.\n            "
          },
          "includesTaxesAndFees": {
            "description": "The directions where taxes and fees are included in this market.\n            ",
            "$ref": "#/components/schemas/Directionality"
          },
          "latestCheckInFrom": {
            "type": "integer",
            "description": "The latest check in from travel location for this market.\n            ",
            "format": "int32"
          },
          "latestCheckInTo": {
            "type": "integer",
            "description": "The latest check in to travel location for this market.\n            ",
            "format": "int32"
          },
          "locationType": {
            "description": "The location type of the starting location for this market.\n            ",
            "$ref": "#/components/schemas/MarketLocationType"
          },
          "travelLocationCode": {
            "type": "string",
            "description": "The ending location code for this market.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "travelLocationType": {
            "description": "The location type of the ending location for this market.\n            ",
            "$ref": "#/components/schemas/MarketLocationType"
          }
        }
      },
      "IJsonResponseOfMarket": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Market"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfBookingPaymentSettingsv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BookingPaymentSettingsv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingPaymentSettingsv2": {
        "type": "object",
        "description": "The booking payment settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowExternalPaymentChargeBack": {
            "type": "boolean",
            "description": "The flag to allow approved external payment charge back.\n            "
          },
          "allowHoldDateOverride": {
            "type": "boolean",
            "description": "The flag to allow overriding the hold dates.\n            "
          },
          "allowIgnoreVoucherRestrictions": {
            "type": "boolean",
            "description": "The flag to allow ignoring voucher restrictions.\n            "
          },
          "allowVoucherIssuance": {
            "type": "boolean",
            "description": "The flag to allow issuing vouchers.\n            "
          },
          "allowManualAuthorization": {
            "type": "boolean",
            "description": "The flag to manually authorize credit cards.\n            "
          },
          "allowOverPay": {
            "type": "boolean",
            "description": "The flag to allow overpayment.\n            "
          },
          "allowUnderPay": {
            "type": "boolean",
            "description": "The flag to allow underpayment.\n            "
          },
          "allowUnvoidVoucher": {
            "type": "boolean",
            "description": "The flag to allow unvoiding vouchers.\n            "
          },
          "allowUseOfBinFraudTool": {
            "type": "boolean",
            "description": "The flag to allow use of BIN fraud tool.\n            "
          },
          "allowVoidVoucher": {
            "type": "boolean",
            "description": "The flag to allow voided vouchers.\n            "
          },
          "enableAutoPaymentVerification": {
            "type": "boolean",
            "description": "The flag to enable auto-payment verification.\n            "
          },
          "allowConfirmBookingWithPartialTicketing": {
            "type": "boolean",
            "description": "The flag to allow confirming booking with partial ticketing.\n            "
          },
          "allowUnmaskingCreditCardNumber": {
            "type": "boolean",
            "description": "The flag to allow displaying the full credit card number without masking.\n            "
          },
          "allowDisplayNoPaymentWarning": {
            "type": "boolean",
            "description": "The flag to allow displaying a no payment warning.\n            "
          },
          "requirePassengerOrContactForCreditFile": {
            "type": "boolean",
            "description": "The flag to require passengers or contacts for a credit file.\n            "
          },
          "requirePassengerOrContactForCreditShell": {
            "type": "boolean",
            "description": "The flag to require passengers or contacts for a credit shell.\n            "
          },
          "requireCommentsForCreditShell": {
            "type": "boolean",
            "description": "The flag to require comments for credit shell.\n            "
          },
          "disableAlternateAgAccount": {
            "type": "boolean",
            "description": "The flag to disable alternative AG accounts.\n            "
          },
          "creditShellCreditCode": {
            "type": "string",
            "description": "The credit shell credit code.\n            ",
            "nullable": true
          },
          "maxInstallmentOverride": {
            "type": "integer",
            "description": "Gets or sets a max number of installment overrides.\n            ",
            "format": "int32",
            "maximum": 999.0,
            "minimum": 0.0
          },
          "maxPaymentQueries": {
            "type": "integer",
            "description": "The max number of payment queries.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "secondsTillStartPaymentQuery": {
            "type": "integer",
            "description": "The number of seconds till the payment query starts.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 2.0
          },
          "secondsTillRepeatPaymentQuery": {
            "type": "integer",
            "description": "The number of seconds till the payment query repeats.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 3.0
          },
          "holdsDaysBeforeDeparture": {
            "type": "string",
            "description": "The duration for a hold before booking date.\n            ",
            "format": "duration",
            "nullable": true
          },
          "holdsDaysAfterDeparture": {
            "type": "string",
            "description": "The duration for a hold after booking date.\n            ",
            "format": "duration",
            "nullable": true
          },
          "allowPendingCustomerActionAuthorization": {
            "type": "boolean",
            "description": "The flag to allow authorization of a pending customer action payment.\n            "
          },
          "allowManualAuthorizationOfPendingPaymentWithoutValidation": {
            "type": "boolean",
            "description": "Indicates whether the user is allowed to approve payments\nwith Pending status.\n            "
          },
          "maskPaymentFields": {
            "type": "boolean",
            "description": "Mask the payment fields.\n            "
          }
        }
      },
      "DeltaMapperOfBookingPaymentSettingsv2": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "allowExternalPaymentChargeBack": {
            "type": "boolean",
            "description": "The flag to allow approved external payment charge back.\n            "
          },
          "allowHoldDateOverride": {
            "type": "boolean",
            "description": "The flag to allow overriding the hold dates.\n            "
          },
          "allowIgnoreVoucherRestrictions": {
            "type": "boolean",
            "description": "The flag to allow ignoring voucher restrictions.\n            "
          },
          "allowVoucherIssuance": {
            "type": "boolean",
            "description": "The flag to allow issuing vouchers.\n            "
          },
          "allowManualAuthorization": {
            "type": "boolean",
            "description": "The flag to manually authorize credit cards.\n            "
          },
          "allowOverPay": {
            "type": "boolean",
            "description": "The flag to allow overpayment.\n            "
          },
          "allowUnderPay": {
            "type": "boolean",
            "description": "The flag to allow underpayment.\n            "
          },
          "allowUnvoidVoucher": {
            "type": "boolean",
            "description": "The flag to allow unvoiding vouchers.\n            "
          },
          "allowUseOfBinFraudTool": {
            "type": "boolean",
            "description": "The flag to allow use of BIN fraud tool.\n            "
          },
          "allowVoidVoucher": {
            "type": "boolean",
            "description": "The flag to allow voided vouchers.\n            "
          },
          "enableAutoPaymentVerification": {
            "type": "boolean",
            "description": "The flag to enable auto-payment verification.\n            "
          },
          "allowConfirmBookingWithPartialTicketing": {
            "type": "boolean",
            "description": "The flag to allow confirming booking with partial ticketing.\n            "
          },
          "allowUnmaskingCreditCardNumber": {
            "type": "boolean",
            "description": "The flag to allow displaying the full credit card number without masking.\n            "
          },
          "allowDisplayNoPaymentWarning": {
            "type": "boolean",
            "description": "The flag to allow displaying a no payment warning.\n            "
          },
          "requirePassengerOrContactForCreditFile": {
            "type": "boolean",
            "description": "The flag to require passengers or contacts for a credit file.\n            "
          },
          "requirePassengerOrContactForCreditShell": {
            "type": "boolean",
            "description": "The flag to require passengers or contacts for a credit shell.\n            "
          },
          "requireCommentsForCreditShell": {
            "type": "boolean",
            "description": "The flag to require comments for credit shell.\n            "
          },
          "disableAlternateAgAccount": {
            "type": "boolean",
            "description": "The flag to disable alternative AG accounts.\n            "
          },
          "creditShellCreditCode": {
            "type": "string",
            "description": "The credit shell credit code.\n            ",
            "nullable": true
          },
          "maxInstallmentOverride": {
            "type": "integer",
            "description": "Gets or sets a max number of installment overrides.\n            ",
            "format": "int32",
            "maximum": 999.0,
            "minimum": 0.0
          },
          "maxPaymentQueries": {
            "type": "integer",
            "description": "The max number of payment queries.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "secondsTillStartPaymentQuery": {
            "type": "integer",
            "description": "The number of seconds till the payment query starts.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 2.0
          },
          "secondsTillRepeatPaymentQuery": {
            "type": "integer",
            "description": "The number of seconds till the payment query repeats.\n            ",
            "format": "int32",
            "maximum": 10000.0,
            "minimum": 3.0
          },
          "holdsDaysBeforeDeparture": {
            "type": "string",
            "description": "The duration for a hold before booking date.\n            ",
            "format": "duration",
            "nullable": true
          },
          "holdsDaysAfterDeparture": {
            "type": "string",
            "description": "The duration for a hold after booking date.\n            ",
            "format": "duration",
            "nullable": true
          },
          "allowPendingCustomerActionAuthorization": {
            "type": "boolean",
            "description": "The flag to allow authorization of a pending customer action payment.\n            "
          },
          "allowManualAuthorizationOfPendingPaymentWithoutValidation": {
            "type": "boolean",
            "description": "Indicates whether the user is allowed to approve payments\nwith Pending status.\n            "
          },
          "maskPaymentFields": {
            "type": "boolean",
            "description": "Mask the payment fields.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfSubZonev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubZonev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SubZonev2": {
        "type": "object",
        "description": "The version two of the subzone model.\n            ",
        "additionalProperties": false,
        "required": [
          "subZoneCode",
          "zoneCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this subzone.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "subZoneCode": {
            "type": "string",
            "description": "Gets or sets the subzone code for this subzone.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "zoneCode": {
            "type": "string",
            "description": "Gets or sets the zone code for this subzone.\n            ",
            "maxLength": 2,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfSubZonev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SubZonev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfZonev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Zonev2"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Zonev2": {
        "type": "object",
        "description": "The version two of the zone model.\n            ",
        "additionalProperties": false,
        "required": [
          "areaCode",
          "zoneCode"
        ],
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Gets or sets the area code of this zone.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of this zone.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "zoneCode": {
            "type": "string",
            "description": "Gets or sets the zone code of this zone.\n            ",
            "maxLength": 2,
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfZonev2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Zonev2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfBundleConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleConfiguration"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleConfiguration": {
        "type": "object",
        "description": "The bundle configuration model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleCode": {
            "type": "string",
            "description": "The service bundle code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "feeCode": {
            "type": "string",
            "description": "The SSR fee code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "bookingQueueCode": {
            "type": "string",
            "description": "The booking queue code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "programLevel": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The bundle name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The bundle description.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "hasPrice": {
            "type": "boolean",
            "description": "Indicates if the bundle type has a cost associated with it.\n            "
          },
          "rank": {
            "type": "integer",
            "description": "The bundle rank.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0
          },
          "inActive": {
            "type": "boolean",
            "description": "Indicates if the bundle is active.\n            "
          },
          "allSsrsRequired": {
            "type": "boolean",
            "description": "Indicates if all SSR's are required.\n            "
          },
          "legApplication": {
            "description": "Indicates the applicability of leg-based (meal) SSRs in a bundle.\n            ",
            "$ref": "#/components/schemas/BundleLegSsrApplication"
          }
        }
      },
      "BundleLegSsrApplication": {
        "type": "integer",
        "description": "The service bundle ssr enumeration.\n            \n\n0 = FirstLegOnly\n1 = ApplyToAllLegs",
        "x-enumNames": [
          "FirstLegOnly",
          "ApplyToAllLegs"
        ],
        "enum": [
          0,
          1
        ]
      },
      "IJsonResponseOfBundleConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BundleConfiguration"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfBundleSsrConfiguration": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSsrConfiguration"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleSsrConfiguration": {
        "type": "object",
        "description": "The bundle ssr configuration model.\n            ",
        "additionalProperties": false,
        "properties": {
          "ssrCode": {
            "type": "string",
            "description": "The ssr code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "discountPercent": {
            "type": "number",
            "description": "The discount percent.\n            ",
            "format": "decimal",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "ssrNumber": {
            "type": "integer",
            "description": "The SSR number.\n            "
          },
          "isFeeWaived": {
            "type": "boolean",
            "description": "Indicates if the service fee is waived.\n            "
          },
          "amounts": {
            "type": "array",
            "description": "The service bundle SSR discount amounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleDiscountAmount"
            }
          },
          "bundleCode": {
            "type": "string",
            "description": "The service bundle code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "upgradeFromSsrCode": {
            "type": "string",
            "description": "The ssr code that was upgraded.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "bundleSsrType": {
            "description": "The bundle ssr type.\n            ",
            "$ref": "#/components/schemas/BundleSsrType"
          }
        }
      },
      "BundleSsrType": {
        "type": "integer",
        "description": "The service bundle ssr enumeration.\n            \n\n0 = InBundle\n1 = InBundleUpgrade\n2 = NotInBundle",
        "x-enumNames": [
          "InBundle",
          "InBundleUpgrade",
          "NotInBundle"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIListOfBundleRule": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleRule"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleRule": {
        "type": "object",
        "description": "The bundle rule model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleRuleCode": {
            "type": "string",
            "description": "The bundle rule code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The bundle rule name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfBundleSet": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BundleSet"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BundleSet": {
        "type": "object",
        "description": "The bundle set model.\n            ",
        "additionalProperties": false,
        "properties": {
          "bundleSetCode": {
            "type": "string",
            "description": "The service bundle code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The bundle set name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Indicates if the set is inactive or not.\n            "
          },
          "bundleCodes": {
            "type": "array",
            "description": "The collection of bundle codes associated with the bundle set.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfIListOfAgentSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AgentSettingType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AgentSettingType": {
        "type": "object",
        "description": "The agent setting type.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentSettingTypeCode": {
            "type": "string",
            "description": "The setting type code.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The setting type name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "schema": {
            "type": "string",
            "description": "The data schema.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfAgentSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AgentSettingType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCommissionRate": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CommissionRate"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CommissionRate": {
        "type": "object",
        "description": "The commission rate model.\n            ",
        "additionalProperties": false,
        "required": [
          "commissionRateCode"
        ],
        "properties": {
          "commissionRateCode": {
            "type": "string",
            "description": "The commission rate code.\n            ",
            "maxLength": 8,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfCommissionRate": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CommissionRate"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfContactType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ContactType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ContactType": {
        "type": "object",
        "description": "The booking contact type.\n            ",
        "additionalProperties": false,
        "required": [
          "contactTypeCode"
        ],
        "properties": {
          "contactTypeCode": {
            "type": "string",
            "description": "The type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "name": {
            "type": "string",
            "description": "The name of the type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfContactType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfCustomerProgram": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomerProgram"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CustomerProgram": {
        "type": "object",
        "description": "The customer program such as loyalty programs.\n            ",
        "additionalProperties": false,
        "properties": {
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "programType": {
            "description": "The program type.\n            ",
            "$ref": "#/components/schemas/ProgramType"
          },
          "validationType": {
            "type": "string",
            "description": "The validation type.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is in-active.\n            "
          },
          "qualifyingSegments": {
            "type": "integer",
            "description": "The qualifying segments.\n            "
          },
          "qualifyingPoints": {
            "type": "integer",
            "description": "The qualifying points.\n            ",
            "format": "int32"
          },
          "pointBalance": {
            "type": "integer",
            "description": "The point balance.\n            ",
            "format": "int32"
          },
          "customerProgramLevels": {
            "type": "array",
            "description": "The customer program levels.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomerProgramLevel"
            }
          }
        }
      },
      "ProgramType": {
        "type": "integer",
        "description": "The program type enumeration.\n            \n\n0 = Default\n1 = Internal\n2 = External",
        "x-enumNames": [
          "Default",
          "Internal",
          "External"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "CustomerProgramLevel": {
        "type": "object",
        "description": "The customer program level.\n            ",
        "additionalProperties": false,
        "properties": {
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "programLevelCode": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "The short name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "displayCode": {
            "type": "string",
            "description": "The display code.\n            ",
            "maxLength": 1,
            "minLength": 0,
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "The rank.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active flag.\n            "
          },
          "customerProgramSettings": {
            "type": "array",
            "description": "The list of customer program settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomerProgramSetting"
            }
          }
        }
      },
      "CustomerProgramSetting": {
        "type": "object",
        "description": "The customer program setting.\n            ",
        "additionalProperties": false,
        "properties": {
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "programLevel": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "settingCode": {
            "type": "string",
            "description": "The setting code.\n            ",
            "maxLength": 16,
            "minLength": 0,
            "nullable": true
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number.\n            ",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "settingValue": {
            "type": "string",
            "description": "The setting value.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfCustomerProgram": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CustomerProgram"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfCustomerProgramLevel": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CustomerProgramLevel"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfDepartment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Department": {
        "type": "object",
        "description": "The department model.\n            ",
        "additionalProperties": false,
        "properties": {
          "departmentCode": {
            "type": "string",
            "description": "The department code.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The department name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfDepartment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Department"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfDocumentType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DocumentType": {
        "type": "object",
        "description": "The document type model.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode"
        ],
        "properties": {
          "documentTypeCode": {
            "type": "string",
            "description": "The document type code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The document type name.\n            ",
            "nullable": true
          },
          "group": {
            "description": "The document group.\n            ",
            "$ref": "#/components/schemas/DocumentGroup"
          },
          "isExpirationDateRequired": {
            "type": "boolean",
            "description": "Indicates if an expiration date is required.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          }
        }
      },
      "IJsonResponseOfDocumentType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DocumentType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfDomain": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Domain": {
        "type": "object",
        "description": "The domain model.\n            ",
        "additionalProperties": false,
        "required": [
          "domainCode"
        ],
        "properties": {
          "domainCode": {
            "type": "string",
            "description": "The domain code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "The domain name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "pattern": "^[^\\[\\]]*$",
            "nullable": true
          },
          "passwordNeverExpires": {
            "type": "boolean",
            "description": "Set to true if the password will never expire.\n            "
          },
          "minimumPasswordAge": {
            "type": "integer",
            "description": "Minimum Password Age is the amount of days that a password must live before it can be\nchanged. This is to prevent an Agent from changing their password the required amount\nof times so that the system allows her to return to her original password. For\nexample, if my pwd (12345) expires, and I don't want to change it, without this\nMinimum Password Age I could change it manually the right number of times and then\nchange it back to 12345, thus defeating the purpose of requiring the change in the\nfirst place.\nIf the field is set to null, the system should never prevent an\nAgent from changing her password. The example above would be perfectly valid.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "maximumPasswordAge": {
            "type": "integer",
            "description": "The Maximum Password Age is the amount of time a password can live before the system\nforces it to be changed. If this is set to null, the system\nwould never force an Agent to change their password.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "maximumFaliedLogons": {
            "type": "integer",
            "description": "After failing logon the amount of times specified by this field the locked bit is\nflipped on the Agent. No more logon attempts from the UI will be accepted for that\nAgent name. This locked bit can be flipped (on or off) manually in the Agents dialog\nin SkyManager.\nSetting this field to null would also indicate that logon can be\nattempted an unlimited amount of times for an Agent.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "uniquePasswordCount": {
            "type": "integer",
            "description": "The system forces the Agent to not re-use a password that it remembers the Agent has\nused. This field defines how many passwords the system remembers for an Agent. So if\nthis field is set to two and if my password was 12345, then when my password is\nchanged I would have to have two other passwords before I could reuse 12345.\nThis field does NOT specify how many Agents can have the same password. As far as the\nsystem is concerned every Agent can have the same password.\n            ",
            "maximum": 32767.0,
            "minimum": 1.0,
            "nullable": true
          },
          "passwordPolicy": {
            "description": "The password policy.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegularExpressionPolicy"
          },
          "usernamePolicy": {
            "description": "The regular expression that defines the rules for the username policy.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RegularExpressionPolicy"
          },
          "allowed": {
            "type": "boolean",
            "description": "True if the domain is allowed to use.\n            "
          }
        }
      },
      "RegularExpressionPolicy": {
        "type": "object",
        "description": "The model describing regular expression policies for a string.\n            ",
        "additionalProperties": false,
        "required": [
          "policy"
        ],
        "properties": {
          "policy": {
            "type": "string",
            "description": "The regular expression policy that will be evaluated.\n            ",
            "maxLength": 128,
            "minLength": 0
          },
          "description": {
            "type": "string",
            "description": "The policy description.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfDomain": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Domain"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfEmailType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EmailType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EmailType": {
        "type": "object",
        "description": "The email type.\n            ",
        "additionalProperties": false,
        "required": [
          "emailTypeCode"
        ],
        "properties": {
          "emailTypeCode": {
            "type": "string",
            "description": "The email type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The type name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The InActive.\n            "
          },
          "dataSchema": {
            "type": "string",
            "description": "The data schema.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfEmailType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/EmailType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerDiscount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerDiscount"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerDiscount": {
        "type": "object",
        "description": "The passenger discount model.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerDiscountCode": {
            "type": "string",
            "description": "The passenger discount code.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "passengerDiscountType": {
            "description": "The passenger discount type.\n            ",
            "$ref": "#/components/schemas/PassengerDiscountType"
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "allowed": {
            "type": "boolean",
            "description": "The allowed.\n            "
          }
        }
      },
      "PassengerDiscountType": {
        "type": "integer",
        "description": "Passenger discount type enumeration.\n            \n\n0 = Default\n1 = Regular\n2 = Loyalty",
        "x-enumNames": [
          "Default",
          "Regular",
          "Loyalty"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfPassengerDiscount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerDiscount"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPassengerType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PassengerType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PassengerType": {
        "type": "object",
        "description": "The passenger type model.\n            ",
        "additionalProperties": false,
        "required": [
          "passengerTypeCode"
        ],
        "properties": {
          "nonAdult": {
            "type": "boolean",
            "description": "The non-adult for the passenger type.\n            "
          },
          "passengerTypeCode": {
            "type": "string",
            "description": "The code for the passenger type.\n            ",
            "maxLength": 4,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name for the passenger type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "allowed": {
            "type": "boolean",
            "description": "The allowed flag for the passenger type.\n            "
          },
          "inActive": {
            "type": "boolean",
            "description": "The inactive flag for the passenger type.\n            "
          },
          "typeIndicator": {
            "description": "The type indicator specifying the age group this belongs to.\n            ",
            "$ref": "#/components/schemas/PassengerTypeIndicator"
          },
          "minimumAge": {
            "type": "integer",
            "description": "The minimum age for the passenger type.\n            "
          },
          "maximumAge": {
            "type": "integer",
            "description": "The maximum age for the passenger type.\n            "
          }
        }
      },
      "PassengerTypeIndicator": {
        "type": "integer",
        "description": "Passenger type indicator.\n            \n\n0 = Adult\n1 = Infant\n2 = Child\n3 = NonAdult",
        "x-enumNames": [
          "Adult",
          "Infant",
          "Child",
          "NonAdult"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "IJsonResponseOfPassengerType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PassengerType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPersonAttachmentType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAttachmentType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonAttachmentType": {
        "type": "object",
        "description": "The person attachment Type.\n            ",
        "additionalProperties": false,
        "required": [
          "personAttachmentTypeCode"
        ],
        "properties": {
          "personAttachmentTypeCode": {
            "type": "string",
            "description": "The type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is In-Active.\n            "
          }
        }
      },
      "IJsonResponseOfPersonAttachmentType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonAttachmentType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPersonInformationType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonInformationType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonInformationType": {
        "type": "object",
        "description": "The person information type model.\n            ",
        "additionalProperties": false,
        "required": [
          "personInformationTypeCode"
        ],
        "properties": {
          "personInformationTypeCode": {
            "type": "string",
            "description": "The person information type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the type.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is in-active.\n            "
          },
          "schema": {
            "type": "string",
            "description": "The data schema of person info type.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPersonInformationType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonInformationType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPhoneType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PhoneType": {
        "type": "object",
        "description": "The phone type.\n            ",
        "additionalProperties": false,
        "required": [
          "phoneTypeCode"
        ],
        "properties": {
          "phoneTypeCode": {
            "type": "string",
            "description": "The type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The Name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is InActive.\n            "
          },
          "type": {
            "description": "The enum value.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          }
        }
      },
      "IJsonResponseOfPhoneType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PhoneType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfRoleSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RoleSettingType"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfRoleSettingType": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RoleSettingType"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfAgencyCreationSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AgencyCreationSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "AgencyCreationSettings": {
        "type": "object",
        "description": "Settings for creating agencies.\n            ",
        "additionalProperties": false,
        "properties": {
          "department": {
            "type": "string",
            "description": "The default Department for new agency.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "The default Role for new agency.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The default Domain for new agency.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "domainName": {
            "type": "string",
            "description": "The default Domain name for new agency.\n            ",
            "nullable": true
          },
          "domainLocation": {
            "type": "string",
            "description": "The default domain Location value for new agency.\n            ",
            "nullable": true
          },
          "channelType": {
            "description": "The default channel type for new agency.\n            ",
            "$ref": "#/components/schemas/ChannelType"
          },
          "notificationEmailAddress": {
            "type": "string",
            "description": "The default notification email address for new agency.\n            ",
            "nullable": true
          },
          "masterRole": {
            "type": "string",
            "description": "The default master role for the new agency.\n            ",
            "nullable": true
          },
          "phoneType": {
            "description": "The default phone type for the new agency.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          }
        }
      },
      "IJsonResponseOfCustomerCreationSettings": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CustomerCreationSettings"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "CustomerCreationSettings": {
        "type": "object",
        "description": "Settings for creating customers.\n            ",
        "additionalProperties": false,
        "properties": {
          "organization": {
            "type": "string",
            "description": "Gets or sets the default Customer organization for new customer.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "domain": {
            "type": "string",
            "description": "Gets or sets the default Domain for new customer.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the default Department for new customer.\n            ",
            "maxLength": 4,
            "minLength": 0,
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "Gets or sets the default Role for new customer.\n            ",
            "maxLength": 4,
            "minLength": 1,
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "Gets or sets the default Location value for new customer.\n            ",
            "maxLength": 5,
            "minLength": 0,
            "nullable": true
          },
          "minimumAge": {
            "type": "integer",
            "description": "Gets or sets the minimum age for a new customer.\n            ",
            "format": "int32",
            "maximum": 32767.0,
            "minimum": 0.0
          },
          "enableCheckDigit": {
            "type": "boolean",
            "description": "Gets or sets the flag that enables the check digit algorithm.\n            "
          },
          "allowPropertyBagUpload": {
            "type": "boolean",
            "description": "Gets or sets the flag that allows bag property uploads.\n            "
          },
          "maximumPersonInfoSize": {
            "type": "integer",
            "description": "Gets or sets the maximum size of the person info.\n            ",
            "format": "int64",
            "nullable": true
          },
          "allowDuplicateCustomerName": {
            "type": "boolean",
            "description": "Gets or sets the flag allowing duplicate customer names.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfSuffix": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Suffix"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Suffix": {
        "type": "object",
        "description": "The suffix model.\n            ",
        "additionalProperties": false,
        "required": [
          "suffixCode"
        ],
        "properties": {
          "suffixCode": {
            "type": "string",
            "description": "The suffix code.\n            ",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Is InActive.\n            "
          }
        }
      },
      "IJsonResponseOfSuffix": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Suffix"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfTitle": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Title"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Title": {
        "type": "object",
        "description": "The Title.\n            ",
        "additionalProperties": false,
        "properties": {
          "titleKey": {
            "type": "string",
            "description": "The Title key.\n            ",
            "maxLength": 6,
            "minLength": 1,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "gender": {
            "description": "The gender.\n            ",
            "$ref": "#/components/schemas/Gender"
          },
          "weightCategory": {
            "description": "The weight category.\n            ",
            "$ref": "#/components/schemas/WeightCategory"
          },
          "inActive": {
            "type": "boolean",
            "description": "The InActive.\n            "
          }
        }
      },
      "IJsonResponseOfTitle": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Title"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ServerTransferRequest": {
        "type": "object",
        "description": "Represents a server transfer request.\n            ",
        "additionalProperties": false,
        "required": [
          "serverContextToken"
        ],
        "properties": {
          "serverContextToken": {
            "type": "string",
            "description": "The NewSkies server context token to transfer.\n            ",
            "minLength": 1
          },
          "applicationName": {
            "type": "string",
            "description": "The optional application name.\n            ",
            "nullable": true
          },
          "channel": {
            "description": "The transferred server's channel type.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChannelType"
          }
        }
      },
      "SingleSignOnCredentials": {
        "type": "object",
        "description": "Defines the single sign on credentials.\n            ",
        "additionalProperties": false,
        "required": [
          "singleSignOn",
          "providerKey"
        ],
        "properties": {
          "singleSignOn": {
            "type": "string",
            "description": "The single sign on token.\n            ",
            "maxLength": 256,
            "minLength": 0
          },
          "providerKey": {
            "type": "string",
            "description": "The unique single sign on provider key.\n            ",
            "minLength": 1
          },
          "providerName": {
            "type": "string",
            "description": "The single sign on provider name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "applicationName": {
            "type": "string",
            "description": "The optional name of the calling application\n            ",
            "nullable": true
          },
          "channelType": {
            "description": "The optional channel type invoking the communication with the server.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ChannelType"
          }
        }
      },
      "SingleSignOnCreateRequest": {
        "type": "object",
        "description": "Defines the single sign on create request.\n            ",
        "additionalProperties": false,
        "required": [
          "singleSignOnCredentials",
          "person"
        ],
        "properties": {
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserCodes"
          },
          "singleSignOnCredentials": {
            "description": "The single sign on credentials.\n            ",
            "$ref": "#/components/schemas/SingleSignOnCredentials"
          },
          "person": {
            "description": "The person information to be used.\n            ",
            "$ref": "#/components/schemas/PersonCreateRequest"
          }
        }
      },
      "UserCodes": {
        "type": "object",
        "description": "Defines all the different user codes.\n            ",
        "additionalProperties": false,
        "required": [
          "departmentCode",
          "locationCode",
          "organizationCode",
          "domainCode"
        ],
        "properties": {
          "departmentCode": {
            "type": "string",
            "description": "The user's department code.\n            ",
            "maxLength": 4,
            "minLength": 1
          },
          "locationCode": {
            "type": "string",
            "description": "The user's location code.\n            ",
            "maxLength": 5,
            "minLength": 1
          },
          "locationGroupCode": {
            "type": "string",
            "description": "The user's location group code.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The user's organization code.\n            ",
            "maxLength": 10,
            "minLength": 0
          },
          "organizationGroupCode": {
            "type": "string",
            "description": "The user's organization group code.\n            ",
            "nullable": true
          },
          "domainCode": {
            "type": "string",
            "description": "The user's domain code.\n            ",
            "maxLength": 3,
            "minLength": 0
          }
        }
      },
      "PersonCreateRequest": {
        "type": "object",
        "description": "Defines the person create request.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "The unique person customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonType"
          },
          "status": {
            "description": "The status of the person.\n            ",
            "$ref": "#/components/schemas/PersonStatus"
          },
          "details": {
            "description": "The person's basic information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonBasicInformation"
          },
          "notificationPreference": {
            "description": "The person's notification preference.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "name": {
            "description": "The persons true name.\n            ",
            "$ref": "#/components/schemas/Name"
          },
          "emailAddresses": {
            "type": "array",
            "description": "The collection of registered email address.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EmailCreateRequest"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of registered phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPhoneNumberRequest"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The collection of known addresses.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAddressCreateRequest"
            }
          },
          "storedPayments": {
            "type": "array",
            "description": "The collection of registered stored payments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonStoredPaymentRequest"
            }
          },
          "travelDocuments": {
            "type": "array",
            "description": "The collection of registered travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonTravelDocumentRequest"
            }
          },
          "programs": {
            "type": "array",
            "description": "The collection of enrolled customer programs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonCustomerProgramCreateRequest"
            }
          },
          "comments": {
            "type": "array",
            "description": "The collection of comments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonCommentRequest"
            }
          },
          "preferences": {
            "type": "array",
            "description": "The collection of preferences.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPreferenceCreateRequest"
            }
          },
          "aliases": {
            "type": "array",
            "description": "The collection of alternate names for the person.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAliasRequest"
            }
          },
          "affiliates": {
            "type": "array",
            "description": "The collection of affiliates for the person.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAffiliation"
            }
          }
        }
      },
      "PersonType": {
        "type": "integer",
        "description": "Defines the type of person.\n            \n\n0 = None\n1 = Customer\n2 = Agent",
        "x-enumNames": [
          "None",
          "Customer",
          "Agent"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PersonStatus": {
        "type": "integer",
        "description": "The status of the person.\n            \n\n0 = Active\n1 = Terminated\n2 = Suspended",
        "x-enumNames": [
          "Active",
          "Terminated",
          "Suspended"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PersonBasicInformation": {
        "type": "object",
        "description": "Defines the person's basic information.\n            ",
        "additionalProperties": false,
        "properties": {
          "gender": {
            "description": "The person's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "description": "The person's nationality.\n            ",
            "nullable": true
          },
          "residentCountry": {
            "type": "string",
            "description": "The person's resident country.\n            ",
            "nullable": true
          },
          "passengerType": {
            "type": "string",
            "description": "The type of passenger the person is.\n            ",
            "nullable": true
          },
          "preferredCultureCode": {
            "type": "string",
            "description": "The person's preferred culture code.\n            ",
            "nullable": true
          },
          "preferredCurrencyCode": {
            "type": "string",
            "description": "The person's preferred currency code.\n            ",
            "nullable": true
          },
          "nationalIdNumber": {
            "type": "string",
            "description": "The person's national ID number.\n            ",
            "nullable": true
          }
        }
      },
      "PersonPhoneNumberRequest": {
        "type": "object",
        "description": "Defines the the person phone number.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "number"
        ],
        "properties": {
          "type": {
            "description": "The phone number type.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          },
          "number": {
            "type": "string",
            "description": "The phone number without any formatting characters.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if this phone number is the default.\n            "
          }
        }
      },
      "PersonAddressCreateRequest": {
        "type": "object",
        "description": "Defines a person address request.\n            ",
        "additionalProperties": false,
        "required": [
          "addressTypeCode"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the address is the persons default.\n            "
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "addressTypeCode": {
            "type": "string",
            "description": "The type of address.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          }
        }
      },
      "PersonStoredPaymentRequest": {
        "type": "object",
        "description": "Defines the person's stored payment create request.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodType",
          "paymentMethodCode",
          "accountNumber"
        ],
        "properties": {
          "paymentMethodType": {
            "description": "The type of payment being added.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if the stored payment is the default.\n            "
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number.\n            ",
            "maxLength": 34,
            "minLength": 0
          }
        }
      },
      "PersonTravelDocumentRequest": {
        "type": "object",
        "description": "Defines the person travel document.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode"
        ],
        "properties": {
          "documentTypeCode": {
            "type": "string",
            "description": "The unique travel document type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "issuedByCode": {
            "type": "string",
            "description": "The issuer code for the travel document (country code).\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the travel document is the default.\n            "
          }
        }
      },
      "PersonCustomerProgramCreateRequest": {
        "type": "object",
        "description": "Defines a person's customer program create request.\n            ",
        "additionalProperties": false,
        "required": [
          "programNumber",
          "programCode"
        ],
        "properties": {
          "programNumber": {
            "type": "string",
            "description": "The unique program number for the person.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "True if this is set as the default program.\n            "
          },
          "programLevelCode": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0
          }
        }
      },
      "PersonCommentRequest": {
        "type": "object",
        "description": "Defines a person comment request.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The comments text.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/PersonCommentType"
          }
        }
      },
      "PersonCommentType": {
        "type": "integer",
        "description": "Defines the different types of person comments.\n            \n\n0 = Default\n1 = Itinerary\n2 = Manifest\n3 = Alert\n4 = Archive",
        "x-enumNames": [
          "Default",
          "Itinerary",
          "Manifest",
          "Alert",
          "Archive"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "PersonPreferenceCreateRequest": {
        "type": "object",
        "description": "Defines a person preference create request.\n            ",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the preference.\n            ",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The preference code.\n            ",
            "nullable": true
          }
        }
      },
      "PersonAliasRequest": {
        "type": "object",
        "description": "Defines the person alias request.\n            ",
        "additionalProperties": false,
        "properties": {
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of alias.\n            ",
            "$ref": "#/components/schemas/PersonAliasType"
          }
        }
      },
      "PersonAliasType": {
        "type": "integer",
        "description": "Defines the type of alternate name.\n            \n\n0 = Alias\n1 = Variant",
        "x-enumNames": [
          "Alias",
          "Variant"
        ],
        "enum": [
          0,
          1
        ]
      },
      "PersonAffiliation": {
        "type": "object",
        "description": "Defines the person affiliation.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the affiliated person.\n            ",
            "minLength": 1
          },
          "personAffiliationKey": {
            "type": "string",
            "description": "The unique person affiliation key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfSingleSignOnProvider": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SingleSignOnProvider"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SingleSignOnProvider": {
        "type": "object",
        "description": "Defines the single sign on credentials.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The single sign on provider name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "authorizationEndpoint": {
            "type": "string",
            "description": "The single sign on provider authorization endpoint.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "tokenEndpoint": {
            "type": "string",
            "description": "The single sign on provider token endpoint.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "clientIdentifier": {
            "type": "string",
            "description": "The single sign on provider client identifier.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "singleSignOnType": {
            "type": "string",
            "description": "The single sign on type.\n            ",
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "Indicates if the single sign on provider is active.\n            "
          },
          "providerKey": {
            "type": "string",
            "description": "A unique identifier for the single sign on provider.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfSingleSignOnProvider": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SingleSignOnProvider"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfUserSingleSignOnToken": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserSingleSignOnToken"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UserSingleSignOnToken": {
        "type": "object",
        "description": "Defines a user's single sign on token.\n            ",
        "additionalProperties": false,
        "required": [
          "singleSignOn"
        ],
        "properties": {
          "providerKey": {
            "type": "string",
            "description": "The unique single sign on provider key.\n            ",
            "nullable": true
          },
          "singleSignOn": {
            "type": "string",
            "description": "The single sign on token.\n            ",
            "maxLength": 256,
            "minLength": 0
          },
          "expirationDate": {
            "type": "string",
            "description": "The single sign on token expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfUserSingleSignOnToken": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserSingleSignOnToken"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SingleSignOnTokenRequest": {
        "type": "object",
        "description": "Defines the single sign on token request.\n            ",
        "additionalProperties": false,
        "required": [
          "singleSignOn"
        ],
        "properties": {
          "singleSignOn": {
            "type": "string",
            "description": "The single sign on token.\n            ",
            "maxLength": 256,
            "minLength": 0
          },
          "expirationDate": {
            "type": "string",
            "description": "The single sign on token expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfSingleSignOnTokenRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "singleSignOn": {
            "type": "string",
            "description": "The single sign on token.\n            ",
            "maxLength": 256,
            "minLength": 0
          },
          "expirationDate": {
            "type": "string",
            "description": "The single sign on token expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfBookingTripResult": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BookingTripResult"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "BookingTripResult": {
        "type": "object",
        "description": "Booking flight result data.\n            ",
        "additionalProperties": false,
        "properties": {
          "recordLocator": {
            "type": "string",
            "description": "The record locator.\n            ",
            "nullable": true
          },
          "bookingStatus": {
            "description": "The booking status.\n            ",
            "$ref": "#/components/schemas/BookingStatus"
          },
          "priceStatus": {
            "description": "The price status.\n            ",
            "$ref": "#/components/schemas/PriceStatus"
          },
          "paidStatus": {
            "description": "The paid status.\n            ",
            "$ref": "#/components/schemas/PaidStatus"
          },
          "createdDate": {
            "type": "string",
            "description": "The UTC date and time of when the booking was created.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name on the booking.\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name on the booking.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "The customer number on the booking.\n            ",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "The applicable segments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SegmentTripResult"
            }
          }
        }
      },
      "SegmentTripResult": {
        "type": "object",
        "description": "Model data.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "This is a summarry of all the legs on the segment. It will contain the details\nof the transportation from the first and last leg.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "classOfService": {
            "type": "string",
            "description": "The class of service.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "activityDate": {
            "type": "string",
            "description": "The activity date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "identifier": {
            "description": "The transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "externalIdentifier": {
            "description": "The external transportation identifier.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationIdentifier"
          },
          "legs": {
            "type": "array",
            "description": "The associated leg information.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/LegTripResult"
            }
          },
          "journeyIndex": {
            "type": "integer",
            "description": "The journey index the segment is related to relative to the booking.\n            "
          },
          "segmentIndex": {
            "type": "integer",
            "description": "The segment index the segment is related to relative to the booking.\n            "
          }
        }
      },
      "LegTripResult": {
        "type": "object",
        "description": "Model data.\n            ",
        "additionalProperties": false,
        "properties": {
          "designator": {
            "description": "Transportation information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/TransportationDesignator"
          },
          "boardingSequence": {
            "type": "integer",
            "description": "The boarding sequence number.\n            "
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "The passenger seat compartment designator.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "unitDesignator": {
            "type": "string",
            "description": "The passenger seat compartment designator.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "status": {
            "description": "The leg's status.\n            ",
            "$ref": "#/components/schemas/LegStatus"
          },
          "liftStatus": {
            "description": "The lift status.\n            ",
            "$ref": "#/components/schemas/LiftStatus"
          },
          "departureTimeUtc": {
            "type": "string",
            "description": "The departure time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "arrivalTimeUtc": {
            "type": "string",
            "description": "The arrival time using the time variant in universal time.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfUser": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/User"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "description": "Defines a unique user.\n            ",
        "additionalProperties": false,
        "required": [
          "roles",
          "username",
          "codes"
        ],
        "properties": {
          "lastAlertReadDate": {
            "type": "string",
            "description": "The date the alerts were last read.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "lastNewsReadDate": {
            "type": "string",
            "description": "The date the news was last read.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "allowed": {
            "type": "boolean",
            "description": "Flag indicating if status is allowed.\n            "
          },
          "lastLogon": {
            "type": "string",
            "description": "The data and time of last login.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "passwordLastChanged": {
            "type": "string",
            "description": "The date and time the password was last changed.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "The collection of authorized roles.\n            ",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "settings": {
            "type": "array",
            "description": "The collection of agent settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserSetting"
            }
          },
          "status": {
            "description": "The status of the account.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "$ref": "#/components/schemas/UserCodes"
          },
          "hireDate": {
            "type": "string",
            "description": "The date the agent was hired.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "description": "The date the agent was terminated.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The agent's note.\n            ",
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace logging queue code.\n            ",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating if the account is locked.\n            "
          },
          "forcePasswordReset": {
            "type": "boolean",
            "description": "Flag indicating if the password needs to be reset.\n            ",
            "nullable": true
          },
          "userKey": {
            "type": "string",
            "description": "The unique user key.\n            ",
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The unque person key associated to the user.\n            ",
            "nullable": true
          }
        }
      },
      "UserRole": {
        "type": "object",
        "description": "Defines a user role.\n            ",
        "additionalProperties": false,
        "required": [
          "roleCode",
          "effectiveAfter"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "description": "The role's name.\n            ",
            "nullable": true
          },
          "parentRoleCode": {
            "type": "string",
            "description": "The parents role code.\n            ",
            "nullable": true
          },
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "minLength": 1
          },
          "effectiveDays": {
            "type": "array",
            "description": "The days the role is effective.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "effectiveAfter": {
            "type": "string",
            "description": "The date the role is effective after.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "effectiveBefore": {
            "type": "string",
            "description": "The date the role is effective before.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "userRoleKey": {
            "type": "string",
            "description": "The user role key.\n            ",
            "nullable": true
          }
        }
      },
      "UserSetting": {
        "type": "object",
        "description": "Defines the agent setting configuration.\n            ",
        "additionalProperties": false,
        "properties": {
          "agentSettingTypeCode": {
            "type": "string",
            "description": "The setting type code.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The setting type name.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "inActive": {
            "type": "boolean",
            "description": "The in active.\n            "
          },
          "schema": {
            "type": "string",
            "description": "The data schema.\n            ",
            "maxLength": 2147483647,
            "minLength": 0,
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "The setting data.\n            ",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "The settings version.\n            "
          }
        }
      },
      "UserStatus": {
        "type": "integer",
        "description": "Defines the status of a user.\n            \n\n0 = Default\n1 = Active\n2 = Pending\n3 = Suspended\n4 = Terminated",
        "x-enumNames": [
          "Default",
          "Active",
          "Pending",
          "Suspended",
          "Terminated"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "UserRequest": {
        "type": "object",
        "description": "Defines the user request.\n            ",
        "additionalProperties": false,
        "required": [
          "username",
          "codes"
        ],
        "properties": {
          "status": {
            "description": "The status of the account.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "$ref": "#/components/schemas/UserCodes"
          },
          "hireDate": {
            "type": "string",
            "description": "The date the agent was hired.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "description": "The date the agent was terminated.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The agent's note.\n            ",
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace logging queue code.\n            ",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating if the account is locked.\n            "
          },
          "forcePasswordReset": {
            "type": "boolean",
            "description": "Flag indicating if the password needs to be reset.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfUserRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The status of the account.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "nullable": true,
            "properties": {
              "departmentCode": {
                "type": "string",
                "description": "The user's department code.\n            ",
                "maxLength": 4,
                "minLength": 1
              },
              "locationCode": {
                "type": "string",
                "description": "The user's location code.\n            ",
                "maxLength": 5,
                "minLength": 1
              },
              "locationGroupCode": {
                "type": "string",
                "description": "The user's location group code.\n            ",
                "nullable": true
              },
              "organizationCode": {
                "type": "string",
                "description": "The user's organization code.\n            ",
                "maxLength": 10,
                "minLength": 0
              },
              "organizationGroupCode": {
                "type": "string",
                "description": "The user's organization group code.\n            ",
                "nullable": true
              },
              "domainCode": {
                "type": "string",
                "description": "The user's domain code.\n            ",
                "maxLength": 3,
                "minLength": 0
              }
            }
          },
          "hireDate": {
            "type": "string",
            "description": "The date the agent was hired.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "description": "The date the agent was terminated.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The agent's note.\n            ",
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace logging queue code.\n            ",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating if the account is locked.\n            "
          },
          "forcePasswordReset": {
            "type": "boolean",
            "description": "Flag indicating if the password needs to be reset.\n            ",
            "nullable": true
          }
        }
      },
      "UserCustomerCreateRequest": {
        "type": "object",
        "description": "Defines the user customer create request that will be setup with the defiend default customer creation parameters.\n            ",
        "additionalProperties": false,
        "required": [
          "username",
          "password",
          "person"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "password": {
            "type": "string",
            "description": "The unique password.\n            ",
            "minLength": 1
          },
          "sendRegistrationConfirmation": {
            "type": "boolean",
            "description": "Send registration configrmation.\n            "
          },
          "person": {
            "description": "The person record to be associated with the customer.\n            ",
            "$ref": "#/components/schemas/PersonCreateRequest"
          }
        }
      },
      "IJsonResponseOfNskRoles": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NskRoles"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UserImpersonateRequest": {
        "type": "object",
        "description": "Defines a user impersonate request.\n            ",
        "additionalProperties": false,
        "required": [
          "roleCode"
        ],
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "The role to impersonate.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfSkySpeedSettingsUserPreferences": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/SkySpeedSettingsUserPreferences"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "SkySpeedSettingsUserPreferences": {
        "type": "object",
        "description": "Defines the SkySpeed default settings for the currently logged in user.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The default currency.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The default culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The default country.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "description": "The default nationality.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "collectionCurrencyCode": {
            "type": "string",
            "description": "The currency that is used for fees and SSRs other than the default currency.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collectionCurrencySetting": {
            "description": "Indicates to which the collection currency will be applied to.\n            ",
            "$ref": "#/components/schemas/CollectionCurrencySetting"
          },
          "flightResultFareType": {
            "description": "Indicates whether to display flights with monetary, loyalty or both fares in the flight results.\n            ",
            "$ref": "#/components/schemas/FlightResultFareType"
          }
        }
      },
      "CollectionCurrencySetting": {
        "type": "integer",
        "description": "Defines to which the collection currency will be applied.\n            \n\n0 = None\n1 = Payments\n2 = Fees\n3 = Both",
        "x-enumNames": [
          "None",
          "Payments",
          "Fees",
          "Both"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "FlightResultFareType": {
        "type": "integer",
        "description": "Defines which fares will be included in the flight results.\n            \n\n0 = All\n1 = Monetary\n2 = Loyalty",
        "x-enumNames": [
          "All",
          "Monetary",
          "Loyalty"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "IJsonResponseOfIListOfUserRole": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfUserRole": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserRole"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UserRoleCreateRequest": {
        "type": "object",
        "description": "Defines the user role create request.\n            ",
        "additionalProperties": false,
        "required": [
          "effectiveAfter",
          "roleCode"
        ],
        "properties": {
          "effectiveDays": {
            "type": "array",
            "description": "The days the role is effective.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "effectiveAfter": {
            "type": "string",
            "description": "The date the role is effective after.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "effectiveBefore": {
            "type": "string",
            "description": "The date the role is effective before.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "roleCode": {
            "type": "string",
            "description": "The unique role code.\n            ",
            "minLength": 1
          }
        }
      },
      "UserRoleEditRequest": {
        "type": "object",
        "description": "Defines the user role edit request.\n            ",
        "additionalProperties": false,
        "required": [
          "effectiveAfter"
        ],
        "properties": {
          "effectiveAfter": {
            "type": "string",
            "description": "The date the role is effective after.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "effectiveBefore": {
            "type": "string",
            "description": "The date the role is effective before.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "effectiveDays": {
            "type": "array",
            "description": "The days the role is effective.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          }
        }
      },
      "DeltaMapperOfUserRolePatchRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "effectiveAfter": {
            "type": "string",
            "description": "The date the role is effective after.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "effectiveBefore": {
            "type": "string",
            "description": "The date the role is effective before.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UserRolePatchRequest": {
        "type": "object",
        "description": "Defines the user role patch request.\n            ",
        "additionalProperties": false,
        "required": [
          "effectiveAfter"
        ],
        "properties": {
          "effectiveAfter": {
            "type": "string",
            "description": "The date the role is effective after.\n            ",
            "format": "date-time",
            "minLength": 1
          },
          "effectiveBefore": {
            "type": "string",
            "description": "The date the role is effective before.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UserCustomerCreateRequestv2": {
        "type": "object",
        "description": "Defines the user customer create request that will be setup with the defiend default customer creation parameters.\n            ",
        "additionalProperties": false,
        "required": [
          "username",
          "password",
          "personKey"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "password": {
            "type": "string",
            "description": "The unique password.\n            ",
            "minLength": 1
          },
          "sendRegistrationConfirmation": {
            "type": "boolean",
            "description": "Send registration configrmation.\n            "
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key to be associated to the customer.\n            ",
            "minLength": 1
          }
        }
      },
      "UserChangePasswordRequestv2": {
        "type": "object",
        "description": "Defines a user change password request.\n            ",
        "additionalProperties": false,
        "required": [
          "newPassword",
          "currentPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password.\n            ",
            "maxLength": 16,
            "minLength": 0
          },
          "currentPassword": {
            "type": "string",
            "description": "The current user's password.\n            ",
            "maxLength": 16,
            "minLength": 0
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "description": "Defines the user create request.\n            ",
        "additionalProperties": false,
        "required": [
          "password",
          "roles",
          "username",
          "codes",
          "person"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "The unique password.\n            ",
            "maxLength": 16,
            "minLength": 0
          },
          "roles": {
            "type": "array",
            "description": "The collection of user roles.\n            ",
            "items": {
              "$ref": "#/components/schemas/UserRoleCreateRequest"
            }
          },
          "settings": {
            "type": "array",
            "description": "The collection of agent settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserSetting"
            }
          },
          "sendRegistrationConfirmation": {
            "type": "boolean",
            "description": "Send registration confirmation.\n            "
          },
          "status": {
            "description": "The status of the account.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "$ref": "#/components/schemas/UserCodes"
          },
          "hireDate": {
            "type": "string",
            "description": "The date the agent was hired.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "description": "The date the agent was terminated.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The agent's note.\n            ",
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace logging queue code.\n            ",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating if the account is locked.\n            "
          },
          "forcePasswordReset": {
            "type": "boolean",
            "description": "Flag indicating if the password needs to be reset.\n            ",
            "nullable": true
          },
          "person": {
            "description": "The person to create for the user.\n            ",
            "$ref": "#/components/schemas/PersonCreateRequest"
          }
        }
      },
      "UserChangePasswordRequestBase": {
        "type": "object",
        "description": "Defines a change password request base.\n            ",
        "additionalProperties": false,
        "required": [
          "newPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password.\n            ",
            "maxLength": 16,
            "minLength": 0
          }
        }
      },
      "IJsonResponseOfIListOfPersonAddress": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAddress"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonAddress": {
        "type": "object",
        "description": "Defines a unique person address.\n            ",
        "additionalProperties": false,
        "required": [
          "addressTypeCode"
        ],
        "properties": {
          "addressTypeCode": {
            "type": "string",
            "description": "The type of address.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the address is the persons default.\n            "
          },
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "personAddressKey": {
            "type": "string",
            "description": "The unique person address key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPersonAddress": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonAddress"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonAddressEditRequest": {
        "type": "object",
        "description": "Defines the person address edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the address is the persons default.\n            "
          }
        }
      },
      "DeltaMapperOfPersonAddressEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "lineOne": {
            "type": "string",
            "description": "The address line one.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineTwo": {
            "type": "string",
            "description": "The address line two.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lineThree": {
            "type": "string",
            "description": "The address line 3.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The country code.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "provinceState": {
            "type": "string",
            "description": "The province state.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code.\n            ",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the address is the persons default.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfPersonAlias": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAlias"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonAlias": {
        "type": "object",
        "description": "Defines a person's alternate name that they go by.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The type of alias.\n            ",
            "$ref": "#/components/schemas/PersonAliasType"
          },
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "personAliasKey": {
            "type": "string",
            "description": "The unique person alias key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPersonAlias": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonAlias"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DeltaMapperOfPersonAliasRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of alias.\n            ",
            "$ref": "#/components/schemas/PersonAliasType"
          }
        }
      },
      "IJsonResponseOfIListOfPersonComment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonComment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonComment": {
        "type": "object",
        "description": "Defines a person comment.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The comments text.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/PersonCommentType"
          },
          "personCommentKey": {
            "type": "string",
            "description": "The unique person comment key.\n            ",
            "nullable": true
          },
          "createdUserKey": {
            "type": "string",
            "description": "The unique user key of the agent that created the comment.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date the comment was created.\n            ",
            "format": "date-time"
          },
          "modifiedUserKey": {
            "type": "string",
            "description": "The unique user key of the agent that last modified the comment.\n            ",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the comment was last modified.\n            ",
            "format": "date-time"
          }
        }
      },
      "IJsonResponseOfPersonComment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonComment"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DeltaMapperOfPersonCommentRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The comments text.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The comment type.\n            ",
            "$ref": "#/components/schemas/PersonCommentType"
          }
        }
      },
      "IJsonResponseOfPerson": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Person"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Person": {
        "type": "object",
        "description": "Defines a person.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The persons true name.\n            ",
            "$ref": "#/components/schemas/PersonName"
          },
          "emailAddresses": {
            "type": "array",
            "description": "The collection of registered email address.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonEmail"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The collection of registered phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPhoneNumber"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The collection of known addresses.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAddress"
            }
          },
          "storedPayments": {
            "type": "array",
            "description": "The collection of registered stored payments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonStoredPayment"
            }
          },
          "travelDocuments": {
            "type": "array",
            "description": "The collection of registered travel documents.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonTravelDocument"
            }
          },
          "programs": {
            "type": "array",
            "description": "The collection of enrolled customer programs.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonCustomerProgram"
            }
          },
          "comments": {
            "type": "array",
            "description": "The collection of comments.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonComment"
            }
          },
          "preferences": {
            "type": "array",
            "description": "The collection of preferences.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPreference"
            }
          },
          "aliases": {
            "type": "array",
            "description": "The collection of alternate names for the person.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAlias"
            }
          },
          "affiliates": {
            "type": "array",
            "description": "The collection of affilations for the person.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAffiliation"
            }
          },
          "customerNumber": {
            "type": "string",
            "description": "The unique person customer number.\n            ",
            "maxLength": 20,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The type of person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonType"
          },
          "status": {
            "description": "The status of the person.\n            ",
            "$ref": "#/components/schemas/PersonStatus"
          },
          "details": {
            "description": "The person's basic information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonBasicInformation"
          },
          "notificationPreference": {
            "description": "The person's notification preference.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonName": {
        "type": "object",
        "description": "Defines a person name.\n            ",
        "additionalProperties": false,
        "properties": {
          "first": {
            "type": "string",
            "description": "The given first name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "middle": {
            "type": "string",
            "description": "The given middle name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "The given last name.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "The suffix.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "personNameKey": {
            "type": "string",
            "description": "The unique person name key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonEmail": {
        "type": "object",
        "description": "Defines a specific person email.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "email"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type code of the email address.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "email": {
            "type": "string",
            "description": "The email address value.\n            ",
            "maxLength": 266,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the email is the default.\n            "
          },
          "personEmailKey": {
            "type": "string",
            "description": "The unique email key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonPhoneNumber": {
        "type": "object",
        "description": "Defines a unique person phone number.\n            ",
        "additionalProperties": false,
        "required": [
          "type",
          "number"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Flag indicating if this phone number is the default.\n            "
          },
          "type": {
            "description": "The phone number type.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          },
          "number": {
            "type": "string",
            "description": "The phone number without any formatting characters.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "personPhoneNumberKey": {
            "type": "string",
            "description": "The unique key for the phone number.\n            ",
            "nullable": true
          }
        }
      },
      "PersonStoredPayment": {
        "type": "object",
        "description": "Defines a specific person's stored payment.\n            ",
        "additionalProperties": false,
        "required": [
          "accountNumber",
          "paymentMethodType",
          "paymentMethodCode"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The account number.\n            ",
            "maxLength": 34,
            "minLength": 0
          },
          "paymentMethodType": {
            "description": "The type of payment being added.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if the stored payment is the default.\n            "
          },
          "storedPaymentKey": {
            "type": "string",
            "description": "The unique stored payment key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonTravelDocument": {
        "type": "object",
        "description": "Defines a specific person travel document.\n            ",
        "additionalProperties": false,
        "required": [
          "documentTypeCode"
        ],
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the travel document is the default.\n            "
          },
          "documentTypeCode": {
            "type": "string",
            "description": "The unique travel document type code.\n            ",
            "maxLength": 4,
            "minLength": 0
          },
          "issuedByCode": {
            "type": "string",
            "description": "The issuer code for the travel document (country code).\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0,
            "nullable": true
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "personTravelDocumentKey": {
            "type": "string",
            "description": "The unique person travel document key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonCustomerProgram": {
        "type": "object",
        "description": "Defines a person's customer program.\n            ",
        "additionalProperties": false,
        "required": [
          "programCode",
          "programNumber"
        ],
        "properties": {
          "pointBalance": {
            "type": "integer",
            "description": "The current point balance.\n            ",
            "format": "int32"
          },
          "currentYearQualifyingPoints": {
            "type": "integer",
            "description": "The current years qualifying points.\n            ",
            "format": "int32"
          },
          "currentYearRedeemablePoints": {
            "type": "integer",
            "description": "The current years redeemable points.\n            ",
            "format": "int32"
          },
          "lifetimeAccumulatedQualifyingPoints": {
            "type": "integer",
            "description": "The lifetime accumulated qualifying points.\n            ",
            "format": "int32"
          },
          "lifetimeAccumulatedRedeemablePoints": {
            "type": "integer",
            "description": "The lifetime accumulated redeemable points.\n            ",
            "format": "int32"
          },
          "qualifyingPoints": {
            "type": "integer",
            "description": "The qualifying points.\n            ",
            "format": "int32"
          },
          "qualifyingSegments": {
            "type": "integer",
            "description": "The qualifying segments.\n            "
          },
          "createdDate": {
            "type": "string",
            "description": "The created date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The modified date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "programCode": {
            "type": "string",
            "description": "The program code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "programNumber": {
            "type": "string",
            "description": "The unique program number for the person.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "True if this is set as the default program.\n            "
          },
          "programLevelCode": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "personCustomerProgramKey": {
            "type": "string",
            "description": "The unique person customer program key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonPreference": {
        "type": "object",
        "description": "Defines the person preferences.\n            ",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The preference code.\n            ",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value of the preference.\n            ",
            "nullable": true
          },
          "personPreferenceKey": {
            "type": "string",
            "description": "The unique preference key.\n            ",
            "nullable": true
          }
        }
      },
      "PersonEditRequest": {
        "type": "object",
        "description": "Defines the person create request.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "type": {
            "description": "The type of person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonType"
          },
          "status": {
            "description": "The status of the person.\n            ",
            "$ref": "#/components/schemas/PersonStatus"
          },
          "details": {
            "description": "The person's basic information.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonBasicInformation"
          },
          "notificationPreference": {
            "description": "The person's notification preference.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "name": {
            "description": "The persons true name.\n            ",
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "DeltaMapperOfPersonEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The type of person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonType"
          },
          "status": {
            "description": "The status of the person.\n            ",
            "$ref": "#/components/schemas/PersonStatus"
          },
          "details": {
            "description": "The person's basic information.\n            ",
            "nullable": true,
            "properties": {
              "gender": {
                "description": "The person's gender.\n            ",
                "nullable": true,
                "$ref": "#/components/schemas/Gender"
              },
              "dateOfBirth": {
                "type": "string",
                "description": "The person's date of birth.\n            ",
                "format": "date-time",
                "nullable": true
              },
              "nationality": {
                "type": "string",
                "description": "The person's nationality.\n            ",
                "nullable": true
              },
              "residentCountry": {
                "type": "string",
                "description": "The person's resident country.\n            ",
                "nullable": true
              },
              "passengerType": {
                "type": "string",
                "description": "The type of passenger the person is.\n            ",
                "nullable": true
              },
              "preferredCultureCode": {
                "type": "string",
                "description": "The person's preferred culture code.\n            ",
                "nullable": true
              },
              "preferredCurrencyCode": {
                "type": "string",
                "description": "The person's preferred currency code.\n            ",
                "nullable": true
              },
              "nationalIdNumber": {
                "type": "string",
                "description": "The person's national ID number.\n            ",
                "nullable": true
              }
            }
          },
          "notificationPreference": {
            "description": "The person's notification preference.\n            ",
            "$ref": "#/components/schemas/NotificationPreference"
          },
          "name": {
            "description": "The persons true name.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          }
        }
      },
      "IJsonResponseOfIListOfPersonCustomerProgram": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonCustomerProgram"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonCustomerProgram": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonCustomerProgram"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonCustomerProgramEditRequest": {
        "type": "object",
        "description": "Defines a person's customer program edit request.\n            ",
        "additionalProperties": false,
        "required": [
          "programNumber"
        ],
        "properties": {
          "programNumber": {
            "type": "string",
            "description": "The unique program number for the person.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "True if this is set as the default program.\n            "
          },
          "programLevelCode": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeltaMapperOfPersonCustomerProgramEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "programNumber": {
            "type": "string",
            "description": "The unique program number for the person.\n            ",
            "maxLength": 32,
            "minLength": 0
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "True if this is set as the default program.\n            "
          },
          "programLevelCode": {
            "type": "string",
            "description": "The program level.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPersonEmail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonEmail"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonEmail": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonEmail"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EmailEditRequest": {
        "type": "object",
        "description": "Defines the person email edit address.\n            ",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address value.\n            ",
            "maxLength": 266,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the email is the default.\n            "
          }
        }
      },
      "DeltaMapperOfEmailEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address value.\n            ",
            "maxLength": 266,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the email is the default.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfPersonInformation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonInformation"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonInformation": {
        "type": "object",
        "description": "Defines the a person information.\n            ",
        "additionalProperties": false,
        "required": [
          "personInformationTypeCode"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The size of the information data.\n            ",
            "format": "int32"
          },
          "personInformationTypeCode": {
            "type": "string",
            "description": "The person information type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          },
          "data": {
            "type": "string",
            "description": "The information data.\n            ",
            "nullable": true
          },
          "personInformationKey": {
            "type": "string",
            "description": "The unique person information key.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPersonInformation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonInformation"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonInformationCreateRequest": {
        "type": "object",
        "description": "Defines a person information create request.\n            ",
        "additionalProperties": false,
        "required": [
          "personInformationTypeCode"
        ],
        "properties": {
          "data": {
            "type": "string",
            "description": "The information data.\n            ",
            "nullable": true
          },
          "personInformationTypeCode": {
            "type": "string",
            "description": "The person information type code.\nPlease note that this should be a char and not a string.\n            ",
            "maxLength": 1,
            "minLength": 1
          }
        }
      },
      "PersonInformationEditRequest": {
        "type": "object",
        "description": "Defines a person information edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "The information data.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfPersonInformationEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "The information data.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPersonPhoneNumber": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPhoneNumber"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonPhoneNumber": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonPhoneNumber"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "DeltaMapperOfPersonPhoneNumberRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The phone number type.\n            ",
            "$ref": "#/components/schemas/PhoneNumberType"
          },
          "number": {
            "type": "string",
            "description": "The phone number without any formatting characters.\n            ",
            "maxLength": 20,
            "minLength": 0
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if this phone number is the default.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfPersonPreference": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonPreference"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonPreference": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonPreference"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonPreferenceEditRequest": {
        "type": "object",
        "description": "Defines the person preference edit request.\n            ",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the preference.\n            ",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfPersonPreferenceEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the preference.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPersonStoredPayment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonStoredPayment"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonStoredPayment": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonStoredPayment"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonStoredPaymentUpdateRequest": {
        "type": "object",
        "description": "Defines the person's stored payment create request.\n            ",
        "additionalProperties": false,
        "required": [
          "paymentMethodType",
          "paymentMethodCode"
        ],
        "properties": {
          "paymentMethodType": {
            "description": "The type of payment being added.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if the stored payment is the default.\n            "
          }
        }
      },
      "DeltaMapperOfPersonStoredPaymentUpdateRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "paymentMethodType": {
            "description": "The type of payment being added.\n            ",
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "paymentMethodCode": {
            "type": "string",
            "description": "The payment method code.\n            ",
            "maxLength": 2,
            "minLength": 1
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if the stored payment is the default.\n            "
          }
        }
      },
      "IJsonResponseOfIListOfPersonTravelDocument": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonTravelDocument"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonTravelDocument": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonTravelDocument"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UserCreateRequestv2": {
        "type": "object",
        "description": "Defines the v2 user create request.\n            ",
        "additionalProperties": false,
        "required": [
          "password",
          "roles",
          "username",
          "codes",
          "personKey"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "The unique password.\n            ",
            "maxLength": 16,
            "minLength": 0
          },
          "roles": {
            "type": "array",
            "description": "The collection of user roles.\n            ",
            "items": {
              "$ref": "#/components/schemas/UserRoleCreateRequest"
            }
          },
          "settings": {
            "type": "array",
            "description": "The collection of agent settings.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserSetting"
            }
          },
          "sendRegistrationConfirmation": {
            "type": "boolean",
            "description": "Send registration confirmation.\n            "
          },
          "status": {
            "description": "The status of the account.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "maxLength": 64,
            "minLength": 0
          },
          "codes": {
            "description": "The identifying agent codes.\n            ",
            "$ref": "#/components/schemas/UserCodes"
          },
          "hireDate": {
            "type": "string",
            "description": "The date the agent was hired.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "description": "The date the agent was terminated.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The agent's note.\n            ",
            "nullable": true
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace logging queue code.\n            ",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating if the account is locked.\n            "
          },
          "forcePasswordReset": {
            "type": "boolean",
            "description": "Flag indicating if the password needs to be reset.\n            ",
            "nullable": true
          },
          "personKey": {
            "type": "string",
            "description": "The unique person key associated with the user.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfIListOfUserRecord": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRecord"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "UserRecord": {
        "type": "object",
        "description": "Defines a user record.\n            ",
        "additionalProperties": false,
        "properties": {
          "userKey": {
            "type": "string",
            "description": "The unique user key.\n            ",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The user's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "roles": {
            "type": "array",
            "description": "The collection of user roles.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "status": {
            "description": "The status of the user.\n            ",
            "$ref": "#/components/schemas/UserStatus"
          },
          "allowed": {
            "type": "boolean",
            "description": "Flag indicating if the user is allowed.\n            "
          },
          "domainCode": {
            "type": "string",
            "description": "The domain the user exists in.\n            ",
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization the user exists in.\n            ",
            "nullable": true
          }
        }
      },
      "TravelDocumentEditRequestv2": {
        "type": "object",
        "description": "Defines the edit travel document request.\n            ",
        "additionalProperties": false,
        "required": [
          "number"
        ],
        "properties": {
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the travel document is the default.\n            "
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DeltaMapperOfTravelDocumentEditRequestv2": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "birthCountry": {
            "type": "string",
            "description": "The BirthCountry property.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The Name property.\n            ",
            "nullable": true,
            "properties": {
              "first": {
                "type": "string",
                "description": "The given first name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "middle": {
                "type": "string",
                "description": "The given middle name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "last": {
                "type": "string",
                "description": "The given last name.\n            ",
                "maxLength": 32,
                "minLength": 0,
                "nullable": true
              },
              "title": {
                "type": "string",
                "description": "The title.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "suffix": {
                "type": "string",
                "description": "The suffix.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "nationality": {
            "type": "string",
            "description": "The Nationality property.\n            ",
            "maxLength": 2,
            "minLength": 0,
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when this travel document expires.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The travel document number.\n            ",
            "maxLength": 35,
            "minLength": 0
          },
          "issuedDate": {
            "type": "string",
            "description": "The date this travel document was issued.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag indicating if the travel document is the default.\n            "
          },
          "gender": {
            "description": "The travel document holder's gender.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The person's date of birth.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfPersonAffiliation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonAffiliation"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfPersonAffiliation": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonAffiliation"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonAffiliationRequest": {
        "type": "object",
        "description": "Defines the person affiliation.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the affiliated person.\n            ",
            "minLength": 1
          }
        }
      },
      "IJsonResponseOfIListOfPersonTravelNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonTravelNotification"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonTravelNotification": {
        "type": "object",
        "description": "A person travel notification.\n            ",
        "additionalProperties": false,
        "properties": {
          "travelNotificationKey": {
            "type": "string",
            "description": "The travel notification key.\n            ",
            "nullable": true
          },
          "events": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationEvent"
            }
          },
          "timedEvents": {
            "type": "array",
            "description": "The list of travel notification event.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NotificationTimedEvent"
            }
          },
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "nullable": true
          },
          "notificationDestination": {
            "description": "The notification destination.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationDestination"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device for the push notification.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date of the travel notification.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfPersonTravelNotification": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonTravelNotification"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfPersonRecord": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonRecord"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonRecord": {
        "type": "object",
        "description": "Defines the person record.\n            ",
        "additionalProperties": false,
        "properties": {
          "personKey": {
            "type": "string",
            "description": "The unique person key.\n            ",
            "nullable": true
          },
          "type": {
            "description": "The person's type.\n            ",
            "$ref": "#/components/schemas/PersonType"
          },
          "status": {
            "description": "The person's status.\n            ",
            "$ref": "#/components/schemas/PersonStatus"
          },
          "customerNumber": {
            "type": "string",
            "description": "The person's customer number.\n            ",
            "nullable": true
          },
          "name": {
            "description": "The person's name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The person's default phone number.\n            ",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The person's default email address.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The person's default address.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "programLoyaltyNumber": {
            "type": "string",
            "description": "The person's default program loyalty number.\n            ",
            "nullable": true
          }
        }
      },
      "PersonMergeRequestBase": {
        "type": "object",
        "description": "The base request to merge two persons with their program/s.\n            ",
        "additionalProperties": false,
        "required": [
          "deletePersonKey"
        ],
        "properties": {
          "deletePersonKey": {
            "type": "string",
            "description": "The person that would be removed from the merge.\n            ",
            "minLength": 1
          },
          "newName": {
            "description": "The new name of the merged person.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "customerProgramCodes": {
            "type": "array",
            "description": "The list of customer program codes to be merged.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IJsonResponseOfPersonRecordsResponse": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/PersonRecordsResponse"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "PersonRecordsResponse": {
        "type": "object",
        "description": "Defines the person record response.\n            ",
        "additionalProperties": false,
        "properties": {
          "records": {
            "type": "array",
            "description": "The person records search results.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PersonRecord"
            }
          },
          "lastIndex": {
            "type": "integer",
            "description": "The last index of the paged response.\n            ",
            "format": "int64"
          }
        }
      },
      "IJsonResponseOfOrganizationCommissionRate": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationCommissionRate"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationCommissionRate": {
        "type": "object",
        "description": "The commission rate details of an organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "commissionRateCode": {
            "type": "string",
            "description": "Commission rate code.\n            ",
            "maxLength": 8,
            "minLength": 0,
            "nullable": true
          },
          "directRate": {
            "type": "number",
            "description": "The direct rate.\n            ",
            "format": "decimal"
          },
          "gdsRate": {
            "type": "number",
            "description": "The Gds rate.\n            ",
            "format": "decimal"
          },
          "webRate": {
            "type": "number",
            "description": "The web rate.\n            ",
            "format": "decimal"
          },
          "apiRate": {
            "type": "number",
            "description": "The Api rate.\n            ",
            "format": "decimal"
          },
          "addOnRate": {
            "type": "number",
            "description": "The add on rate.\n            ",
            "format": "decimal"
          }
        }
      },
      "OrganizationCreateRequest": {
        "type": "object",
        "description": "The data on the organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "type": {
            "description": "Organization type.\n            ",
            "$ref": "#/components/schemas/OrganizationType"
          },
          "configuration": {
            "description": "Advanced configuration values.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationConfigurationv2"
          },
          "status": {
            "description": "The organization status.\n            ",
            "$ref": "#/components/schemas/OrganizationStatus"
          },
          "parentOrganizationCode": {
            "type": "string",
            "description": "The parent organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "statementNote": {
            "type": "string",
            "description": "The statement note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lastStatementDate": {
            "type": "string",
            "description": "The last statement date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "sendNotification": {
            "type": "boolean",
            "description": "Send agency activation notification.\n            "
          },
          "externalAccounts": {
            "type": "array",
            "description": "External accounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationExternalAccountRequest"
            }
          },
          "commissionRates": {
            "type": "array",
            "description": "Commission rates.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationCommissionRate"
            }
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CompanyDetails"
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactDetails"
          }
        }
      },
      "OrganizationType": {
        "type": "integer",
        "description": "Organization type.\n            \n\n0 = Default\n1 = Master\n2 = Carrier\n3 = TravelAgency\n4 = ThirdParty",
        "x-enumNames": [
          "Default",
          "Master",
          "Carrier",
          "TravelAgency",
          "ThirdParty"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "OrganizationConfigurationv2": {
        "type": "object",
        "description": "The configuration details of an organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "The culture code.\n            ",
            "maxLength": 17,
            "minLength": 0,
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 1,
            "nullable": true
          },
          "commissionable": {
            "type": "boolean",
            "description": "Commissionable.\n            "
          },
          "recalculateCommission": {
            "type": "boolean",
            "description": "Recalculate commission.\n            "
          },
          "recallCommission": {
            "type": "boolean",
            "description": "Recall commission.\n            "
          },
          "nettedTotal": {
            "type": "boolean",
            "description": "Netted total.\n            "
          },
          "gdsEmailItinerary": {
            "description": "Gds email itinerary.\n            ",
            "$ref": "#/components/schemas/ExternalDistributionOption"
          },
          "sourceIsInternal": {
            "type": "boolean",
            "description": "Organization source is internal. Otherwise its external.\n            "
          },
          "sourceIsDeleted": {
            "type": "boolean",
            "description": "Organization source is deleted. Otherwise its active.\n            "
          },
          "traceQueueCode": {
            "type": "string",
            "description": "The trace queue code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "referralType": {
            "description": "Referral type.\n            ",
            "$ref": "#/components/schemas/ReferralType"
          }
        }
      },
      "ExternalDistributionOption": {
        "type": "integer",
        "description": "Describes the external distribution option.\n            \n\n0 = NoDistribution\n1 = UseOrganizationEmailOnly\n2 = UseMessageEmailOnly\n3 = UseMessageEmail",
        "x-enumNames": [
          "NoDistribution",
          "UseOrganizationEmailOnly",
          "UseMessageEmailOnly",
          "UseMessageEmail"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ReferralType": {
        "type": "integer",
        "description": "Referral type.\n            \n\n0 = Default\n1 = Allowed\n2 = AllowedWithUrlMatch\n3 = NotAllowed",
        "x-enumNames": [
          "Default",
          "Allowed",
          "AllowedWithUrlMatch",
          "NotAllowed"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "OrganizationStatus": {
        "type": "integer",
        "description": "Organization status.\n            \n\n0 = Default\n1 = Active\n2 = Cancelled\n3 = Pending",
        "x-enumNames": [
          "Default",
          "Active",
          "Cancelled",
          "Pending"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "OrganizationExternalAccountRequest": {
        "type": "object",
        "description": "The data for an organizations external account.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the external account.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "description": "The routing number.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number.\n            ",
            "maxLength": 34,
            "minLength": 0,
            "nullable": true
          },
          "bankIdentifierCode": {
            "type": "string",
            "description": "The band identifier code (BIC).\n            ",
            "maxLength": 16,
            "minLength": 0,
            "nullable": true
          },
          "internationalBankAccountNumber": {
            "type": "string",
            "description": "The international bank account number or IBAN.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The notes.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "CompanyDetails": {
        "type": "object",
        "description": "The organization company details of an organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The organization name.\n            ",
            "nullable": true
          },
          "address": {
            "description": "The address of the organization.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "url": {
            "type": "string",
            "description": "The website url of the organization.\n            ",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address.\n            ",
            "format": "email",
            "nullable": true
          },
          "internalNote": {
            "type": "string",
            "description": "Internal note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "externalNote": {
            "type": "string",
            "description": "External note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The available phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "ContactDetails": {
        "type": "object",
        "description": "The contact details for an organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The contact name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The available contact phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "OrganizationEditRequest": {
        "type": "object",
        "description": "The base data on the organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "type": {
            "description": "Organization type.\n            ",
            "$ref": "#/components/schemas/OrganizationType"
          },
          "configuration": {
            "description": "Advanced configuration values.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationConfigurationv2"
          },
          "status": {
            "description": "The organization status.\n            ",
            "$ref": "#/components/schemas/OrganizationStatus"
          },
          "parentOrganizationCode": {
            "type": "string",
            "description": "The parent organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "statementNote": {
            "type": "string",
            "description": "The statement note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lastStatementDate": {
            "type": "string",
            "description": "The last statement date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CompanyEditDetails"
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactEditDetails"
          }
        }
      },
      "CompanyEditDetails": {
        "type": "object",
        "description": "The organization company details of an organization.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The organization name.\n            ",
            "minLength": 1
          },
          "address": {
            "description": "The address of the organization.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "url": {
            "type": "string",
            "description": "The website url of the organization.\n            ",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address.\n            ",
            "format": "email",
            "nullable": true
          },
          "internalNote": {
            "type": "string",
            "description": "Internal note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "externalNote": {
            "type": "string",
            "description": "External note.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ContactEditDetails": {
        "type": "object",
        "description": "The contact details for an organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The contact name.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Name"
          }
        }
      },
      "DeltaMapperOfOrganizationEditRequest": {
        "type": "object",
        "description": "Map delta changes of a specific type T to another object.\n            ",
        "additionalProperties": false,
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "type": {
            "description": "Organization type.\n            ",
            "$ref": "#/components/schemas/OrganizationType"
          },
          "configuration": {
            "description": "Advanced configuration values.\n            ",
            "nullable": true,
            "properties": {
              "cultureCode": {
                "type": "string",
                "description": "The culture code.\n            ",
                "maxLength": 17,
                "minLength": 0,
                "nullable": true
              },
              "currencyCode": {
                "type": "string",
                "description": "The currency code.\n            ",
                "maxLength": 3,
                "minLength": 1,
                "nullable": true
              },
              "commissionable": {
                "type": "boolean",
                "description": "Commissionable.\n            "
              },
              "recalculateCommission": {
                "type": "boolean",
                "description": "Recalculate commission.\n            "
              },
              "recallCommission": {
                "type": "boolean",
                "description": "Recall commission.\n            "
              },
              "nettedTotal": {
                "type": "boolean",
                "description": "Netted total.\n            "
              },
              "gdsEmailItinerary": {
                "description": "Gds email itinerary.\n            ",
                "$ref": "#/components/schemas/ExternalDistributionOption"
              },
              "sourceIsInternal": {
                "type": "boolean",
                "description": "Organization source is internal. Otherwise its external.\n            "
              },
              "sourceIsDeleted": {
                "type": "boolean",
                "description": "Organization source is deleted. Otherwise its active.\n            "
              },
              "traceQueueCode": {
                "type": "string",
                "description": "The trace queue code.\n            ",
                "maxLength": 6,
                "minLength": 0,
                "nullable": true
              },
              "referralType": {
                "description": "Referral type.\n            ",
                "$ref": "#/components/schemas/ReferralType"
              }
            }
          },
          "status": {
            "description": "The organization status.\n            ",
            "$ref": "#/components/schemas/OrganizationStatus"
          },
          "parentOrganizationCode": {
            "type": "string",
            "description": "The parent organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "statementNote": {
            "type": "string",
            "description": "The statement note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lastStatementDate": {
            "type": "string",
            "description": "The last statement date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "properties": {
              "name": {
                "type": "string",
                "description": "The organization name.\n            ",
                "minLength": 1
              },
              "address": {
                "description": "The address of the organization.\n            ",
                "nullable": true,
                "properties": {
                  "lineOne": {
                    "type": "string",
                    "description": "The address line one.\n            ",
                    "maxLength": 128,
                    "minLength": 0,
                    "nullable": true
                  },
                  "lineTwo": {
                    "type": "string",
                    "description": "The address line two.\n            ",
                    "maxLength": 128,
                    "minLength": 0,
                    "nullable": true
                  },
                  "lineThree": {
                    "type": "string",
                    "description": "The address line 3.\n            ",
                    "maxLength": 128,
                    "minLength": 0,
                    "nullable": true
                  },
                  "countryCode": {
                    "type": "string",
                    "description": "The country code.\n            ",
                    "maxLength": 2,
                    "minLength": 0,
                    "nullable": true
                  },
                  "provinceState": {
                    "type": "string",
                    "description": "The province state.\n            ",
                    "maxLength": 3,
                    "minLength": 0,
                    "nullable": true
                  },
                  "city": {
                    "type": "string",
                    "description": "The city.\n            ",
                    "maxLength": 32,
                    "minLength": 0,
                    "nullable": true
                  },
                  "postalCode": {
                    "type": "string",
                    "description": "The postal code.\n            ",
                    "maxLength": 10,
                    "minLength": 0,
                    "nullable": true
                  }
                }
              },
              "url": {
                "type": "string",
                "description": "The website url of the organization.\n            ",
                "maxLength": 2048,
                "minLength": 0,
                "nullable": true
              },
              "emailAddress": {
                "type": "string",
                "description": "The email address.\n            ",
                "format": "email",
                "nullable": true
              },
              "internalNote": {
                "type": "string",
                "description": "Internal note.\n            ",
                "maxLength": 256,
                "minLength": 0,
                "nullable": true
              },
              "externalNote": {
                "type": "string",
                "description": "External note.\n            ",
                "maxLength": 256,
                "minLength": 0,
                "nullable": true
              }
            }
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "properties": {
              "name": {
                "description": "The contact name.\n            ",
                "nullable": true,
                "properties": {
                  "first": {
                    "type": "string",
                    "description": "The given first name.\n            ",
                    "maxLength": 32,
                    "minLength": 0,
                    "nullable": true
                  },
                  "middle": {
                    "type": "string",
                    "description": "The given middle name.\n            ",
                    "maxLength": 32,
                    "minLength": 0,
                    "nullable": true
                  },
                  "last": {
                    "type": "string",
                    "description": "The given last name.\n            ",
                    "maxLength": 32,
                    "minLength": 0,
                    "nullable": true
                  },
                  "title": {
                    "type": "string",
                    "description": "The title.\n            ",
                    "maxLength": 6,
                    "minLength": 0,
                    "nullable": true
                  },
                  "suffix": {
                    "type": "string",
                    "description": "The suffix.\n            ",
                    "maxLength": 6,
                    "minLength": 0,
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      },
      "IJsonResponseOfOrganizationv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Organizationv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Organizationv2": {
        "type": "object",
        "description": "The base data on the organization.\n            ",
        "additionalProperties": false,
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "type": {
            "description": "Organization type.\n            ",
            "$ref": "#/components/schemas/OrganizationType"
          },
          "configuration": {
            "description": "Advanced configuration values.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationConfigurationv2"
          },
          "status": {
            "description": "The organization status.\n            ",
            "$ref": "#/components/schemas/OrganizationStatus"
          },
          "parentOrganizationCode": {
            "type": "string",
            "description": "The parent organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          },
          "statementNote": {
            "type": "string",
            "description": "The statement note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "lastStatementDate": {
            "type": "string",
            "description": "The last statement date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "externalAccounts": {
            "type": "array",
            "description": "External accounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationExternalAccountv2"
            }
          },
          "commissionRates": {
            "type": "array",
            "description": "Commission rates.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationCommissionRate"
            }
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CompanyDetails"
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactDetails"
          }
        }
      },
      "OrganizationExternalAccountv2": {
        "type": "object",
        "description": "The data for an organizations external account.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the external account.\n            ",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "routingNumber": {
            "type": "string",
            "description": "The routing number.\n            ",
            "maxLength": 32,
            "minLength": 0,
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number.\n            ",
            "maxLength": 34,
            "minLength": 0,
            "nullable": true
          },
          "bankIdentifierCode": {
            "type": "string",
            "description": "The band identifier code (BIC).\n            ",
            "maxLength": 16,
            "minLength": 0,
            "nullable": true
          },
          "internationalBankAccountNumber": {
            "type": "string",
            "description": "The international bank account number or IBAN.\n            ",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "The notes.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "externalAccountKey": {
            "type": "string",
            "description": "The unique key for the external account.\n            ",
            "nullable": true
          }
        }
      },
      "OrganizationRegisterRequest": {
        "type": "object",
        "description": "The data on the organization register request.\n            ",
        "additionalProperties": false,
        "required": [
          "organizationCode"
        ],
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CompanyDetails"
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactDetails"
          },
          "externalAccounts": {
            "type": "array",
            "description": "External accounts.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationExternalAccountRequest"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The organization's currency code.\n            ",
            "nullable": true
          },
          "cultureCode": {
            "type": "string",
            "description": "The organization's culture code.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfOrganizationExternalAccountv2": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationExternalAccountv2"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "IJsonResponseOfIListOfOrganizationGroup": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationGroup"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationGroup": {
        "type": "object",
        "description": "The data for an organization group.\n            ",
        "additionalProperties": false,
        "required": [
          "organizationGroupCode"
        ],
        "properties": {
          "organizationGroupCode": {
            "type": "string",
            "description": "The organization group code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The organization group name.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfOrganizationGroupDetails": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationGroupDetails"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationGroupDetails": {
        "type": "object",
        "description": "The data for an organization group including details.\n            ",
        "additionalProperties": false,
        "required": [
          "organizationGroupCode"
        ],
        "properties": {
          "organizationGroupCode": {
            "type": "string",
            "description": "The organization group code.\n            ",
            "maxLength": 3,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The organization group name.\n            ",
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "description": "The organizations included in the group.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationRecordMinimum"
            }
          }
        }
      },
      "OrganizationRecordMinimum": {
        "type": "object",
        "description": "The data for a simple organization record.\n            ",
        "additionalProperties": false,
        "required": [
          "organizationCode"
        ],
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization group code.\n            ",
            "maxLength": 10,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The organization company name.\n            ",
            "nullable": true
          }
        }
      },
      "OrganizationGroupRequest": {
        "type": "object",
        "description": "The data for an organization group request.\n            ",
        "additionalProperties": false,
        "properties": {
          "organizationGroupName": {
            "type": "string",
            "description": "The organization group name.\n            ",
            "nullable": true
          },
          "organization": {
            "description": "The organization included in the group.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationRecordMinimum"
          }
        }
      },
      "IJsonResponseOfIListOfOrganizationRecord": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationRecord"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationRecord": {
        "type": "object",
        "description": "The data on the user related agent's organization.\n            ",
        "additionalProperties": false,
        "required": [
          "organizationCode"
        ],
        "properties": {
          "organizationCode": {
            "type": "string",
            "description": "The organization code.\n            ",
            "maxLength": 10,
            "minLength": 2
          },
          "type": {
            "description": "Organization type.\n            ",
            "$ref": "#/components/schemas/OrganizationType"
          },
          "company": {
            "description": "The company details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CompanyDetailsRecord"
          },
          "contact": {
            "description": "The contact details.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ContactDetails"
          },
          "status": {
            "description": "The organization status.\n            ",
            "$ref": "#/components/schemas/OrganizationStatus"
          },
          "parentOrganizationCode": {
            "type": "string",
            "description": "The parent organization code.\n            ",
            "maxLength": 10,
            "minLength": 2,
            "nullable": true
          }
        }
      },
      "CompanyDetailsRecord": {
        "type": "object",
        "description": "The organization company details record results.\n            ",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The organization name.\n            ",
            "minLength": 1
          },
          "address": {
            "description": "The address of the organization.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Address"
          },
          "url": {
            "type": "string",
            "description": "The website url of the organization.\n            ",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address.\n            ",
            "format": "email",
            "nullable": true
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The available phone numbers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          }
        }
      },
      "AccountChangePasswordRequest": {
        "type": "object",
        "description": "Defines a change password request.\n            ",
        "additionalProperties": false,
        "required": [
          "newPassword",
          "credentials"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password.\n            ",
            "maxLength": 16,
            "minLength": 0
          },
          "credentials": {
            "description": "The current credentials.\n            ",
            "$ref": "#/components/schemas/Credentials"
          }
        }
      },
      "AccountForgotPasswordRequest": {
        "type": "object",
        "description": "Defines the account forgot password request.\n            ",
        "additionalProperties": false,
        "required": [
          "domainCode"
        ],
        "properties": {
          "domainCode": {
            "type": "string",
            "description": "The domain the user is located in.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "username": {
            "type": "string",
            "description": "The unique username.\n            ",
            "nullable": true
          },
          "alternateIdentifier": {
            "type": "string",
            "description": "The alternate identifier.\n            ",
            "nullable": true
          }
        }
      },
      "IJsonResponseOfAccount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/Account"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Account": {
        "type": "object",
        "description": "The account model.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountKey": {
            "type": "string",
            "description": "The account key.\n            ",
            "nullable": true
          },
          "totalAvailable": {
            "type": "number",
            "description": "The summed total of all currently available credit amounts for the account.\n            ",
            "format": "decimal"
          },
          "owner": {
            "description": "The account owner type.\n            ",
            "$ref": "#/components/schemas/AccountOwnerType"
          },
          "type": {
            "description": "The account type.\n            ",
            "$ref": "#/components/schemas/AccountType"
          },
          "status": {
            "description": "The account status.\n            ",
            "$ref": "#/components/schemas/AccountStatus"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal"
          },
          "foreignAvailable": {
            "type": "number",
            "description": "The foreign currency available.\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number associated to the customer or organization.\n            ",
            "nullable": true
          },
          "expiredCreditAmount": {
            "type": "number",
            "description": "The amount of credit that was unused and already expired.\n            ",
            "format": "decimal"
          },
          "expiredCreditCurrencyCode": {
            "type": "string",
            "description": "The currency code of the expired credit amount.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collections": {
            "type": "array",
            "description": "The list of account collections.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AccountCollection"
            }
          },
          "accountName": {
            "type": "string",
            "description": "The account name associated to the customer.\n            ",
            "nullable": true
          }
        }
      },
      "AccountOwnerType": {
        "type": "integer",
        "description": "The account owner type enumeration.\n            \n\n0 = Organization\n1 = Personnal\n2 = Booking\n3 = Unknown",
        "x-enumNames": [
          "Organization",
          "Personnal",
          "Booking",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "AccountType": {
        "type": "integer",
        "description": "The account type enumeration.\n            \n\n0 = Credit\n1 = Prepaid\n2 = Supplementary\n3 = Dependent\n4 = Unknown",
        "x-enumNames": [
          "Credit",
          "Prepaid",
          "Supplementary",
          "Dependent",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "AccountStatus": {
        "type": "integer",
        "description": "The account status enumeration.\n            \n\n0 = Open\n1 = Closed\n2 = AgencyInactive\n3 = Unknown",
        "x-enumNames": [
          "Open",
          "Closed",
          "AgencyInactive",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "AccountCollection": {
        "type": "object",
        "description": "The account collection model.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountCollectionKey": {
            "type": "string",
            "description": "The unique account collection key.\n            ",
            "nullable": true
          },
          "available": {
            "type": "number",
            "description": "The available amount.\n            ",
            "format": "decimal"
          },
          "amount": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "transactionCode": {
            "type": "string",
            "description": "The transaction code.\n            ",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "AccountCollectionRequest": {
        "type": "object",
        "description": "The account collection request model.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The credit account transaction amount.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The credit account transaction currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The credit account transaction note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "transactionCode": {
            "type": "string",
            "description": "The transaction code.\n            ",
            "maxLength": 6,
            "minLength": 0,
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The account collection expiration.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateAccountRequest": {
        "type": "object",
        "description": "The create account request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "IJsonResponseOfIListOfTransaction": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "description": "The payload data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "description": "The transaction model.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The credit account transaction amount.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The credit account transaction currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The credit account transaction note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "accountTransactionCode": {
            "type": "string",
            "description": "The system-generated code for the transaction.\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "The record locator from the refunded booking payment.\n            ",
            "nullable": true
          },
          "transactionKey": {
            "type": "string",
            "description": "The unique transaction key.\n            ",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The created date associated with the transaction.\n            ",
            "format": "date-time",
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "The transaction foreign amount.\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The transaction foreign currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The transaction type.\n            ",
            "$ref": "#/components/schemas/TransactionType"
          },
          "paymentId": {
            "type": "integer",
            "description": "The payment ID of the transaction. This will only be non zero on refunded booking payments. A zero signifies that\nno payment ID is found.\n            ",
            "format": "int64"
          },
          "accountCollectionKey": {
            "type": "string",
            "description": "The account collection key associated with the transaction.\n            ",
            "nullable": true
          }
        }
      },
      "TransactionType": {
        "type": "integer",
        "description": "The dotREZ specific transaction types.  This includes some system specific values that\nare not allowed during a transaction creation.\n            \n\n0 = Default\n1 = Payment\n2 = Adjustment\n3 = Supplementary\n4 = Transfer\n5 = Spoilage\n6 = StatementDateAndBalance\n7 = PayableCommission\n8 = Commission\n9 = ChildCommissionTransfer\n10 = ParentCommissionTransfer",
        "x-enumNames": [
          "Default",
          "Payment",
          "Adjustment",
          "Supplementary",
          "Transfer",
          "Spoilage",
          "StatementDateAndBalance",
          "PayableCommission",
          "Commission",
          "ChildCommissionTransfer",
          "ParentCommissionTransfer"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "TransactionRequest": {
        "type": "object",
        "description": "The create transaction request.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The credit account transaction amount.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The credit account transaction currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The credit account transaction note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ChildAccountTransactionsRequest": {
        "type": "object",
        "description": "The organization account transaction request.\n            ",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to adjust on the account.\n            ",
            "format": "decimal"
          }
        }
      },
      "IJsonResponseOfOrganizationAccount": {
        "type": "object",
        "description": "Defines the JSON response contract.\n            ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "The payload data.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/OrganizationAccount"
          },
          "errors": {
            "type": "array",
            "description": "The collection of errors being thrown.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "messages": {
            "type": "array",
            "description": "The collection of informational messages.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "OrganizationAccount": {
        "type": "object",
        "description": "The organization account model.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountKey": {
            "type": "string",
            "description": "The account key.\n            ",
            "nullable": true
          },
          "totalAvailable": {
            "type": "number",
            "description": "The summed total of all currently available credit amounts for the account.\n            ",
            "format": "decimal"
          },
          "owner": {
            "description": "The account owner type.\n            ",
            "$ref": "#/components/schemas/AccountOwnerType"
          },
          "type": {
            "description": "The account type.\n            ",
            "$ref": "#/components/schemas/AccountType"
          },
          "status": {
            "description": "The account status.\n            ",
            "$ref": "#/components/schemas/AccountStatus"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal"
          },
          "foreignAvailable": {
            "type": "number",
            "description": "The foreign currency available.\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "The foreign currency code.\n            ",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The account number associated to the customer or organization.\n            ",
            "nullable": true
          },
          "expiredCreditAmount": {
            "type": "number",
            "description": "The amount of credit that was unused and already expired.\n            ",
            "format": "decimal"
          },
          "expiredCreditCurrencyCode": {
            "type": "string",
            "description": "The currency code of the expired credit amount.\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "collection": {
            "description": "The organization account collection.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/AccountCollectionBase"
          }
        }
      },
      "AccountCollectionBase": {
        "type": "object",
        "description": "The account collection base model.\n            ",
        "additionalProperties": false,
        "properties": {
          "accountCollectionKey": {
            "type": "string",
            "description": "The unique account collection key.\n            ",
            "nullable": true
          },
          "available": {
            "type": "number",
            "description": "The available amount.\n            ",
            "format": "decimal"
          },
          "amount": {
            "type": "number",
            "description": "The total amount.\n            ",
            "format": "decimal"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateOrganizationAccountRequest": {
        "type": "object",
        "description": "The create organization account request model.\n            ",
        "additionalProperties": false,
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The account currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount of the account.\n            ",
            "format": "decimal"
          },
          "type": {
            "description": "The allowed account types for account creation.\n            ",
            "$ref": "#/components/schemas/AllowedAccountTypes"
          },
          "note": {
            "type": "string",
            "description": "The optional note to associate with the account creation.\n            ",
            "nullable": true
          }
        }
      },
      "AllowedAccountTypes": {
        "type": "integer",
        "description": "The allowed account type enumeration.  These are a subset of the AccountTypes enumeartion\nand represent the currently supported account types for an account creation.\n            \n\n0 = Credit\n1 = Prepaid\n2 = Supplementary",
        "x-enumNames": [
          "Credit",
          "Prepaid",
          "Supplementary"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OrganizationRefundRequest": {
        "type": "object",
        "description": "Defines information needed for an organization account refund.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "organizationCode"
        ],
        "properties": {
          "parentPaymentKey": {
            "type": "string",
            "description": "The payment identifier used if this refund is being reversed from an existing payment.\nThe refund is assumed to be made at the booking/account level if the value for this property is null or empty.\n            ",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to apply.\n            ",
            "format": "decimal"
          },
          "paymentFields": {
            "type": "object",
            "description": "Dynamic field information used for validation related to the specific payment type.\nSee the PaymentMethodsAvailable view model / PaymentMethodFieldList\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code. This will default to the bookings currency code.\n            ",
            "maxLength": 3,
            "minLength": 0,
            "nullable": true
          },
          "organizationCode": {
            "type": "string",
            "description": "The organization code account number to credit to.\n            ",
            "maxLength": 34,
            "minLength": 0
          },
          "accountTransactionCode": {
            "type": "string",
            "description": "The account transaction code associated with the account.\n            ",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The organization refund comment.\n            ",
            "nullable": true
          }
        }
      },
      "OrganizationTransactionRequest": {
        "type": "object",
        "description": "The organization account transaction request.\n            ",
        "additionalProperties": false,
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The credit account transaction amount.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "The credit account transaction currency code.\n            ",
            "maxLength": 3,
            "minLength": 0
          },
          "note": {
            "type": "string",
            "description": "The credit account transaction note.\n            ",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "type": {
            "description": "The transaction types for an organization account.\n            ",
            "$ref": "#/components/schemas/AllowedTransactionTypes"
          }
        }
      },
      "AllowedTransactionTypes": {
        "type": "integer",
        "description": "The dotREZ specific transaction types.\n            \n\n0 = Default\n1 = Payment\n2 = Adjustment\n3 = Supplementary",
        "x-enumNames": [
          "Default",
          "Payment",
          "Adjustment",
          "Supplementary"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ScanSearchRequest": {
        "type": "object",
        "description": "The search by scan request object\n            ",
        "additionalProperties": false,
        "properties": {
          "scan": {
            "description": "Scan data to search with.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/LocationParseRequest"
          },
          "origin": {
            "type": "string",
            "description": "Origin station of the booking.\n            ",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true
          },
          "departureDate": {
            "type": "string",
            "description": "Departure date of the booking.\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "LocationParseRequest": {
        "type": "object",
        "description": "Request for converting scan track data into a scan result\n            ",
        "additionalProperties": false,
        "properties": {
          "track1": {
            "type": "string",
            "description": "Track 1 of scan data\n            ",
            "nullable": true
          },
          "track2": {
            "type": "string",
            "description": "Track 2\n            ",
            "nullable": true
          },
          "track3": {
            "type": "string",
            "description": "Track 3\n            ",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "Location of parser\n            ",
            "nullable": true
          }
        }
      },
      "PreloadDeviceType": {
        "type": "integer",
        "description": "Types of printer preload devices\n            \n\n0 = ATB\n1 = BTP",
        "x-enumNames": [
          "ATB",
          "BTP"
        ],
        "enum": [
          0,
          1
        ]
      },
      "BoardingPassPrintRequest": {
        "type": "object",
        "description": "Request to generate a boarding pass datastream.\n            ",
        "additionalProperties": false,
        "properties": {
          "passengerKeys": {
            "type": "array",
            "description": "Gets or sets the filtered passenger keys.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "segmentKeys": {
            "type": "array",
            "description": "Gets or sets the filtered segment keys.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "string",
            "description": "Gets or sets the location to print as\n            ",
            "nullable": true
          }
        }
      },
      "BagTagPrintRequest": {
        "type": "object",
        "description": "Request for converting bag tags into print streams\n            ",
        "additionalProperties": false,
        "properties": {
          "bagTagKeys": {
            "type": "array",
            "description": "BagTag Keys for conversion\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "overrideStatusRestrictions": {
            "type": "boolean",
            "description": "Flag to override whether bags are converted based on bag status\n            ",
            "deprecated": true,
            "x-deprecatedMessage": "This flag is no longer in use"
          },
          "location": {
            "type": "string",
            "description": "Location of resource to generate bag tag print streams\n            ",
            "nullable": true
          }
        }
      },
      "BagTagPrintRequestv2": {
        "type": "object",
        "description": "Request for converting bag tags into print streams\n            ",
        "additionalProperties": false,
        "required": [
          "passengerKeys",
          "segmentKeys"
        ],
        "properties": {
          "passengerKeys": {
            "type": "array",
            "description": "BagTag Keys for conversion.\n            ",
            "items": {
              "type": "string"
            }
          },
          "segmentKeys": {
            "type": "array",
            "description": "SegmentKeys to generate print streams for.\n            ",
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "string",
            "description": "Location of resource to generate bag tag print streams.\n            ",
            "nullable": true
          }
        }
      },
      "CombinedScan": {
        "type": "object",
        "description": "Class to hold all the different scan types to have strong typing on a scan result.\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingPassScan": {
            "description": "Boarding pass scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassScan"
          },
          "creditCardScan": {
            "description": "Credit card scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/CreditCardScan"
          },
          "documentScan": {
            "description": "Document scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/DocumentScan"
          },
          "itineraryScan": {
            "description": "Itinerary scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/ItineraryScan"
          },
          "membershipCardScan": {
            "description": "Membership card scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/MembershipCardScan"
          },
          "recordLocatorScan": {
            "description": "Record locator scan.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/RecordLocatorScan"
          }
        }
      },
      "BoardingPassScan": {
        "type": "object",
        "description": "A boarding pass scan.\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "flightDay": {
            "type": "integer",
            "description": "Flight Day\n            ",
            "format": "int32"
          },
          "mobileBarcode": {
            "type": "string",
            "description": "Mobile Barcode\n            ",
            "nullable": true
          },
          "boardingPass": {
            "description": "Boarding Pass\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassScanResponse"
          }
        }
      },
      "BoardingPassScanResponse": {
        "type": "object",
        "description": "Represents a boarding pass on a boarding pass scan\n            ",
        "additionalProperties": false,
        "properties": {
          "boardingPassNumber": {
            "type": "integer",
            "description": "Boarding pass number\n            "
          },
          "title": {
            "type": "string",
            "description": "Title\n            ",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "Suffix\n            ",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name\n            ",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "Gets and Sets the RecordLocator of the passenger - links the passenger to the booking.\n            ",
            "nullable": true
          },
          "customerNumber": {
            "type": "string",
            "description": "Gets or Sets the identifier for the customer, i.e. Frequent Flyer number.\n            ",
            "nullable": true
          },
          "selecteeString": {
            "type": "string",
            "description": "Gets or Sets the string that indicates a selectee.\n            ",
            "nullable": true
          },
          "baseFare": {
            "type": "number",
            "description": "Gets or Sets the base fare for this reservation.\n            ",
            "format": "decimal"
          },
          "totalTax": {
            "type": "number",
            "description": "Gets or Sets the Taxes for this reservation.\n            ",
            "format": "decimal"
          },
          "totalCost": {
            "type": "number",
            "description": "Gets or Sets the Total Cost for this reservation.\n            ",
            "format": "decimal"
          },
          "totalFare": {
            "type": "number",
            "description": "Gets or Sets the Total fare for this reservation.\n            ",
            "format": "decimal"
          },
          "discountedFare": {
            "type": "number",
            "description": "Gets or Sets the DiscountedFare for this reservation.\n            ",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "Gets or Sets the CurrencyCode for the agent that requested the printing.\n            ",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "description": "Gets or Sets the ContactPhone for this reservation.\n            ",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "Gets or Sets the FareBasisCode for this reservation.\n            ",
            "nullable": true
          },
          "fareClass": {
            "type": "string",
            "description": "Gets or Sets the FareClass for this reservation.\n            ",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "description": "Gets or Sets the Gender for this passenger.\n            ",
            "nullable": true
          },
          "passengerId": {
            "type": "integer",
            "description": "Gets or Sets the PassengerId for this passenger.\n            ",
            "format": "int64"
          },
          "passengerTypeTag": {
            "type": "string",
            "description": "Gets or Sets the PassengerTypeTag for this reservation.\n            ",
            "nullable": true
          },
          "passportCountry": {
            "type": "string",
            "description": "Gets or Sets the PassportCountry for this reservation.\n            ",
            "nullable": true
          },
          "passportExpiryDate": {
            "type": "string",
            "description": "Gets or Sets the PassportExpiryDate for this passenger.\n            ",
            "format": "date-time"
          },
          "passportNumber": {
            "type": "string",
            "description": "Gets or Sets the PassportNumber for this passenger.\n            ",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Gets or Sets the DateOfBirth for this passenger.\n            ",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "Gets or Sets the Payment date for this passenger.\n            ",
            "format": "date-time"
          },
          "paymentDescription": {
            "type": "string",
            "description": "Gets or Sets the payment description for this reservation.\n            ",
            "nullable": true
          },
          "stationID": {
            "type": "string",
            "description": "Gets or Sets the StationID for this reservation.\n            ",
            "nullable": true
          },
          "receiptNumber": {
            "type": "string",
            "description": "Gets or Sets the ReceiptNumber for this boarding pass.\nThis is a 9 digit number that is zero padded on the left.\nThe number is made from the last 9 digits of the passengerID\n            ",
            "nullable": true
          },
          "currentTime": {
            "type": "string",
            "description": "Gets or Sets the CurrentTime this boarding pass was requested.\n            ",
            "format": "date-time"
          },
          "agentID": {
            "type": "string",
            "description": "Gets or Sets the agentID for the agent that requested the printing.\n            ",
            "nullable": true
          },
          "iataid": {
            "type": "string",
            "description": "Gets or Sets the IATAID for the boarding pass.\n            ",
            "nullable": true
          },
          "guestValueLevelName": {
            "type": "string",
            "description": "Gets or Sets the GuestValueLevelName.\n            ",
            "nullable": true
          },
          "guestValueLevelCode": {
            "type": "string",
            "description": "Gets or Sets the GuestValueLevelCode.\n            ",
            "maxLength": 1
          },
          "boardingMessage": {
            "type": "string",
            "description": "Gets or Sets the BoardingMessage.\n            ",
            "nullable": true
          },
          "infant": {
            "description": "Gets the Infant associated this passenger.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassScanInfant"
          },
          "barCode": {
            "description": "Gets the BarCode.\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassScanBarCode"
          },
          "segments": {
            "type": "array",
            "description": "Gets collection of BoardingPassSegment objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanSegment"
            }
          },
          "serviceCharges": {
            "type": "array",
            "description": "Gets collection of Service objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanServiceCharge"
            }
          },
          "documents": {
            "type": "array",
            "description": "Gets and sets the collection of Document objects.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GoNowDocument"
            }
          },
          "calculations": {
            "type": "array",
            "description": "list of reservations related monetary calculations\nkey of the dictionary is referened to CalculationType constants\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanCalculation"
            }
          },
          "isoTitle": {
            "type": "string",
            "description": "ISO Title\n            ",
            "nullable": true
          },
          "isoSuffix": {
            "type": "string",
            "description": "ISO Suffix\n            ",
            "nullable": true
          },
          "isoFirstName": {
            "type": "string",
            "description": "ISO First name\n            ",
            "nullable": true
          },
          "isoMiddleName": {
            "type": "string",
            "description": "ISO Middle name\n            ",
            "nullable": true
          },
          "isoLastName": {
            "type": "string",
            "description": "ISO Last Name\n            ",
            "nullable": true
          },
          "infantIndicator": {
            "type": "boolean",
            "description": "This indicates if the boarding pass if for an\nInfant without a seat  (INFT, etc)\n            "
          }
        }
      },
      "BoardingPassScanInfant": {
        "type": "object",
        "description": "Boarding pass scan infant\n            ",
        "additionalProperties": false,
        "properties": {
          "countryOfResidence": {
            "type": "string",
            "description": "CountryOfResidence\n            ",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "description": "CountryOfResidence\n            ",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "DateOfBirth\n            ",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "description": "Gender\n            ",
            "nullable": true
          },
          "doesNameExist": {
            "type": "boolean",
            "description": "Does name exist flag\n            "
          },
          "title": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "paxInfoFieldsForIatciUpdate": {
            "type": "array",
            "description": "Contains list of passenger fields that needs an IATCI update.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isoTitle": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "isoSuffix": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "isoFirstName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "isoMiddleName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          },
          "isoLastName": {
            "type": "string",
            "description": "DOCTODO\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanBarCode": {
        "type": "object",
        "description": "Represents a bar code on a boarding pass scan\n            ",
        "additionalProperties": false,
        "properties": {
          "barCodeData": {
            "type": "string",
            "description": "Gets and Sets the BarCodeData.\n            ",
            "nullable": true
          },
          "barCodeType": {
            "type": "string",
            "description": "Gets and Sets the BarCodeType.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanSegment": {
        "type": "object",
        "description": "Represents a Segment on a boarding pass scan\n            ",
        "additionalProperties": false,
        "properties": {
          "departureDateTime": {
            "type": "string",
            "description": "Departure date time\n            ",
            "format": "date-time"
          },
          "carrierCode": {
            "type": "string",
            "description": "Carrier code\n            ",
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "Flight number\n            ",
            "nullable": true
          },
          "opSuffix": {
            "type": "string",
            "description": "Op suffix\n            ",
            "maxLength": 1
          },
          "departureStation": {
            "type": "string",
            "description": "Departure station\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "Arrival station\n            ",
            "nullable": true
          },
          "airlineName": {
            "type": "string",
            "description": "Airline name\n            ",
            "nullable": true
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "Arrival date time\n            ",
            "format": "date-time"
          },
          "departureGate": {
            "type": "string",
            "description": "Departure gate\n            ",
            "nullable": true
          },
          "departureStationName": {
            "type": "string",
            "description": "Departure station name\n            ",
            "nullable": true
          },
          "arrivalStationName": {
            "type": "string",
            "description": "Arrival station name\n            ",
            "nullable": true
          },
          "boardingTime": {
            "type": "string",
            "description": "Boarding time\n            ",
            "format": "date-time"
          },
          "connectionInd": {
            "type": "boolean",
            "description": "Connection indicator\n            "
          },
          "segmentType": {
            "type": "string",
            "description": "Segment type\n            ",
            "nullable": true
          },
          "bookingStatus": {
            "type": "string",
            "description": "Booking status\n            ",
            "nullable": true
          },
          "international": {
            "type": "boolean",
            "description": "International indicator\n            "
          },
          "cabinOfService": {
            "type": "string",
            "description": "Cabin of service\n            ",
            "maxLength": 1
          },
          "ticketIndicator": {
            "type": "string",
            "description": "Ticket indicator\n            ",
            "nullable": true
          },
          "ticketNumber": {
            "type": "string",
            "description": "Ticket number\n            ",
            "nullable": true
          },
          "classOfService": {
            "type": "string",
            "description": "Class of service\n            ",
            "nullable": true
          },
          "verifiedTravelDocs": {
            "type": "string",
            "description": "Verified travel documents\n            ",
            "nullable": true
          },
          "fareClassName": {
            "type": "string",
            "description": "Fare class name\n            ",
            "nullable": true
          },
          "productClassName": {
            "type": "string",
            "description": "Product class name\n            ",
            "nullable": true
          },
          "infantInd": {
            "type": "boolean",
            "description": "Infant indicator\n            "
          },
          "infantTicketNumber": {
            "type": "string",
            "description": "Infant ticket number\n            ",
            "nullable": true
          },
          "otherClassOfService": {
            "type": "string",
            "description": "Other class of service\n            ",
            "nullable": true
          },
          "otherCarrierCode": {
            "type": "string",
            "description": "other carrier code\n            ",
            "nullable": true
          },
          "otherCarrierName": {
            "type": "string",
            "description": "Other carrier name\n            ",
            "nullable": true
          },
          "otherFlightNumber": {
            "type": "string",
            "description": "Other flight number\n            ",
            "nullable": true
          },
          "otherOpSuffix": {
            "type": "string",
            "description": "Other op suffix\n            ",
            "maxLength": 1
          },
          "barCodes": {
            "type": "array",
            "description": "Bar codes\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanBarCode"
            }
          },
          "legs": {
            "type": "array",
            "description": "Segment legs\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanLeg"
            }
          },
          "programName": {
            "type": "string",
            "description": "Program name\n            ",
            "nullable": true
          },
          "programLevelShortName": {
            "type": "string",
            "description": "Program level code\n            ",
            "nullable": true
          },
          "programNumber": {
            "type": "string",
            "description": "Program number\n            ",
            "nullable": true
          },
          "otherRecordLocator": {
            "type": "string",
            "description": "Other record locator\n            ",
            "nullable": true
          },
          "programCode": {
            "type": "string",
            "description": "Program code\n            ",
            "nullable": true
          },
          "freeBaggageAllowance": {
            "type": "string",
            "description": "Free baggage allowance\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanLeg": {
        "type": "object",
        "description": "Represents a leg on a boarding pass scan\n            ",
        "additionalProperties": false,
        "properties": {
          "departureDateTime": {
            "type": "string",
            "description": "Departure date time\n            ",
            "format": "date-time"
          },
          "carrierCode": {
            "type": "string",
            "description": "Carrier code\n            ",
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "Flight number\n            ",
            "nullable": true
          },
          "opSuffix": {
            "type": "string",
            "description": "Op suffix\n            ",
            "maxLength": 1
          },
          "departureStation": {
            "type": "string",
            "description": "Departure  station\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "Arrival station\n            ",
            "nullable": true
          },
          "legNumber": {
            "type": "integer",
            "description": "Leg number\n            "
          },
          "boardingSequence": {
            "type": "integer",
            "description": "Boarding sequence\n            "
          },
          "liftStatus": {
            "type": "string",
            "description": "Lift status\n            ",
            "nullable": true
          },
          "boardingZone": {
            "type": "integer",
            "description": "Boarding zone\n            "
          },
          "aircraftType": {
            "type": "string",
            "description": "Aircraft type\n            ",
            "nullable": true
          },
          "aircraftTypeSuffix": {
            "type": "string",
            "description": "Aircraft type suffix\n            ",
            "nullable": true
          },
          "operatingCarrier": {
            "type": "string",
            "description": "Operating carrier\n            ",
            "nullable": true
          },
          "operatingCarrierName": {
            "type": "string",
            "description": "Operating carrier name\n            ",
            "nullable": true
          },
          "operatingFlightNumber": {
            "type": "string",
            "description": "Operating flight number\n            ",
            "nullable": true
          },
          "operatedByText": {
            "type": "string",
            "description": "Operated by text\n            ",
            "nullable": true
          },
          "operatingOpSuffix": {
            "type": "string",
            "description": "Operating Op Suffix\n            ",
            "maxLength": 1
          },
          "sta": {
            "type": "string",
            "description": "STA.\n            ",
            "format": "date-time"
          },
          "subjectToGovtApproval": {
            "type": "boolean",
            "description": "Subject to government approval\n            "
          },
          "codeShareIndicator": {
            "type": "string",
            "description": "Code share indicator\n            ",
            "maxLength": 1
          },
          "compartmentDesignator": {
            "type": "string",
            "description": "Compartment designator\n            ",
            "nullable": true
          },
          "seatInfo": {
            "type": "string",
            "description": "Seat info\n            ",
            "nullable": true
          },
          "seatRow": {
            "type": "string",
            "description": "Seat row\n            ",
            "nullable": true
          },
          "seatColumn": {
            "type": "string",
            "description": "Seat column\n            ",
            "nullable": true
          },
          "unitDesignator": {
            "type": "string",
            "description": "Unit designator\n            ",
            "nullable": true
          },
          "baggage": {
            "type": "array",
            "description": "Baggage\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanBaggage"
            }
          },
          "ssrs": {
            "type": "array",
            "description": "Ssrs\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanSsr"
            }
          },
          "oaBoardingZone": {
            "type": "string",
            "description": "OA Boarding zone\n            ",
            "nullable": true
          },
          "aircraftChange": {
            "type": "boolean",
            "description": "Aircraft change indicator\n            "
          },
          "bppr": {
            "type": "string",
            "description": "Bppr\n            ",
            "nullable": true
          },
          "authorizationList": {
            "type": "array",
            "description": "Authorization list\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BoardingPassScanAuthorization"
            }
          },
          "bpprText": {
            "type": "string",
            "description": "Bppr text\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanBaggage": {
        "type": "object",
        "description": "Boarding pass scan baggage\n            ",
        "additionalProperties": false,
        "properties": {
          "bagTag": {
            "type": "string",
            "description": "BagTag\n            ",
            "nullable": true
          },
          "tagDate": {
            "type": "string",
            "description": "Tag date\n            ",
            "format": "date-time"
          },
          "originStation": {
            "type": "string",
            "description": "Origin station\n            ",
            "nullable": true
          },
          "weight": {
            "description": "Weight\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/BoardingPassScanBaggageWeight"
          },
          "taggedToStation": {
            "type": "string",
            "description": "Tagged to station\n            ",
            "nullable": true
          },
          "taggedToFlightNumber": {
            "type": "string",
            "description": "Tagged to flight number\n            ",
            "nullable": true
          },
          "baggageStatus": {
            "type": "string",
            "description": "Baggage status\n            ",
            "nullable": true
          },
          "compartmentId": {
            "type": "integer",
            "description": "Compartment ID\n            "
          },
          "lrtIndicator": {
            "type": "boolean",
            "description": "LRT Indicator\n            "
          },
          "taggedToCarrierCode": {
            "type": "string",
            "description": "Tagged to carrier code\n            ",
            "nullable": true
          },
          "taggedToStationCity": {
            "type": "string",
            "description": "Tagged to station city\n            ",
            "nullable": true
          },
          "baggageType": {
            "type": "string",
            "description": "Baggage Type\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanBaggageWeight": {
        "type": "object",
        "description": "Boarding pass scan baggage weight\n            ",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "number",
            "description": "Value.\nThe weight of the baggage in numbers\n            ",
            "format": "decimal"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "UnitOfMeasure\nThe unit of measurement used for the bag either in pounds or kilos or any new\nmeasurement in the future.\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanSsr": {
        "type": "object",
        "description": "Boarding pass scan SSR\n            ",
        "additionalProperties": false,
        "properties": {
          "note": {
            "type": "string",
            "description": "Note\n            ",
            "nullable": true
          },
          "ssrCode": {
            "type": "string",
            "description": "Ssr code\n            ",
            "nullable": true
          },
          "ssrDetail": {
            "type": "string",
            "description": "Ssr detail\n            ",
            "nullable": true
          },
          "ssrNumber": {
            "type": "integer",
            "description": "Ssr number\n            "
          }
        }
      },
      "BoardingPassScanAuthorization": {
        "type": "object",
        "description": "Boarding pass authorization\n            ",
        "additionalProperties": false,
        "properties": {
          "driverName": {
            "type": "string",
            "description": "Driver name\n            ",
            "nullable": true
          },
          "authorizationStatus": {
            "type": "string",
            "description": "Authorization status\n            ",
            "nullable": true
          },
          "boardingPassPrintText": {
            "type": "string",
            "description": "Boarding pass print text\n            ",
            "nullable": true
          },
          "isInfant": {
            "type": "boolean",
            "description": "Is infant indicator\n            "
          },
          "screeningType": {
            "type": "string",
            "description": "Screening type\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanServiceCharge": {
        "type": "object",
        "description": "Boarding pass scan service charge\n            ",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount\n            ",
            "format": "decimal"
          },
          "chargeCode": {
            "type": "string",
            "description": "Charge code\n            ",
            "nullable": true
          },
          "chargeDetail": {
            "type": "string",
            "description": "Charge detail\n            ",
            "nullable": true
          },
          "boardingPassServiceType": {
            "type": "string",
            "description": "Boarding pass service type\n            ",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code\n            ",
            "nullable": true
          },
          "foreignAmount": {
            "type": "number",
            "description": "Foreign amount\n            ",
            "format": "decimal"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "Foreign currency code\n            ",
            "nullable": true
          },
          "ticketCode": {
            "type": "string",
            "description": "Ticket code\n            ",
            "nullable": true
          }
        }
      },
      "GoNowDocument": {
        "type": "object",
        "description": "A scan document\n            ",
        "additionalProperties": false,
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type Code\n            ",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type\n            ",
            "nullable": true
          },
          "issuingCountryCode": {
            "type": "string",
            "description": "The issuing country\n            ",
            "nullable": true
          },
          "documentDetails": {
            "type": "array",
            "description": "Document details in key-value pairs\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DataField"
            }
          }
        }
      },
      "DataField": {
        "type": "object",
        "description": "Stores values in key-value pairs\n            ",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "Data\n            ",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Field name\n            ",
            "nullable": true
          }
        }
      },
      "BoardingPassScanCalculation": {
        "type": "object",
        "description": "Boarding pass Calculation\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name\n            ",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Value\n            ",
            "format": "decimal"
          }
        }
      },
      "CreditCardScan": {
        "type": "object",
        "description": "A credit card scan.\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type\n            ",
            "nullable": true
          },
          "creditCardNumber": {
            "type": "string",
            "description": "Credit card number\n            ",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date\n            ",
            "format": "date-time"
          },
          "creditCardHolder": {
            "type": "string",
            "description": "Credit card holder\n            ",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title\n            ",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "Suffix\n            ",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name\n            ",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name\n            ",
            "nullable": true
          }
        }
      },
      "DocumentScan": {
        "type": "object",
        "description": "A Document scan\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "document": {
            "description": "The document details\n            ",
            "nullable": true,
            "$ref": "#/components/schemas/GoNowDocument"
          },
          "firstName": {
            "type": "string",
            "description": "First name\n            ",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name\n            ",
            "nullable": true
          }
        }
      },
      "ItineraryScan": {
        "type": "object",
        "description": "An itinerary scan\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "Flight Number\n            ",
            "nullable": true
          },
          "departureStation": {
            "type": "string",
            "description": "Departure station\n            ",
            "nullable": true
          },
          "arrivalStation": {
            "type": "string",
            "description": "Arrival station\n            ",
            "nullable": true
          }
        }
      },
      "MembershipCardScan": {
        "type": "object",
        "description": "A membership card scan\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "membershipCardNumber": {
            "type": "string",
            "description": "Membership card number\n            ",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date\n            ",
            "format": "date-time"
          },
          "tierCode": {
            "type": "string",
            "description": "Tier code\n            ",
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "Carrier code\n            ",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title\n            ",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "Suffix\n            ",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name\n            ",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name\n            ",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name\n            ",
            "nullable": true
          }
        }
      },
      "RecordLocatorScan": {
        "type": "object",
        "description": "A record locator scan\n            ",
        "additionalProperties": false,
        "properties": {
          "scanType": {
            "type": "string",
            "description": "Gets or sets the Scan Type of the Scan.\n            ",
            "nullable": true
          },
          "recordLocator": {
            "type": "string",
            "description": "Record locator\n            ",
            "nullable": true
          }
        }
      },
      "KioskVerifyTravelDocumentRequest": {
        "type": "object",
        "description": "Defines the request for the Kiosk Verify Travel Document\n            ",
        "additionalProperties": false,
        "required": [
          "scannedDocuments"
        ],
        "properties": {
          "scannedDocuments": {
            "type": "array",
            "description": "Collection of VerifiedDocumentRequest\n            ",
            "items": {
              "$ref": "#/components/schemas/VerifiedDocumentRequest"
            }
          }
        }
      },
      "VerifiedDocumentRequest": {
        "type": "object",
        "description": "Verified Document Request\n            ",
        "additionalProperties": false,
        "required": [
          "scan",
          "travelDocumentKey"
        ],
        "properties": {
          "scan": {
            "description": "The scan to verify the document with.\n            ",
            "$ref": "#/components/schemas/LocationParseRequest"
          },
          "travelDocumentKey": {
            "type": "string",
            "description": "The document being verified.\n            ",
            "minLength": 1
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Paste your JWT token from the token endpoint.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}